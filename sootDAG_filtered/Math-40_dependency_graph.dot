digraph G {
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.util$Precision#equals(double,double,int)";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifySequence(double,double,double)";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getStartValue()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$Precision#equals(float,float,int)";
  "org.apache.commons.math.util$Precision#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$Precision#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#equals(float,float,float)" -> "org.apache.commons.math.util$Precision#equals(float,float,int)";
  "org.apache.commons.math.util$Precision#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$Precision#equals(float,float,int)";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyInterval(double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$Precision#equals(double,double,int)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$Precision#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.util$Precision#round(float,int,int)" -> "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math.util$Precision#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#copySign(float,float)";
  "org.apache.commons.math.util$Precision#equals(double,double)" -> "org.apache.commons.math.util$Precision#equals(double,double,int)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#equals(double,double,double)" -> "org.apache.commons.math.util$Precision#equals(double,double,int)";
  "org.apache.commons.math.util$Precision#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#min(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifySequence(double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Incrementor#incrementCount(int)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.util$Incrementor#incrementCount()" -> "org.apache.commons.math.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMaxEvaluations()" -> "org.apache.commons.math.util$Incrementor#getMaximalCount()";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#isSequence(double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isSequence(double,double,double)";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#scalb(double,int)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#getExponent(double)";
  "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math.util$Precision#equals(double,double,double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math.util$Precision#equals(double,double,int)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#min(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math.util$FastMath#log(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getEvaluations()" -> "org.apache.commons.math.util$Incrementor#getCount()";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$Precision#equals(double,double,int)";
  "org.apache.commons.math.util$Precision#round(double,int)" -> "org.apache.commons.math.util$Precision#round(double,int,int)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$Precision#equals(float,float)" -> "org.apache.commons.math.util$Precision#equals(float,float,int)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifySequence(double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateFunction,double,double,double,int)";
  "org.apache.commons.math.util$Precision#round(float,int)" -> "org.apache.commons.math.util$Precision#round(float,int,int)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#isBracketing(double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateFunction,double,double)";
}
