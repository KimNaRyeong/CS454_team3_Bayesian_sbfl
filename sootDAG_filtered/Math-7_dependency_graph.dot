digraph G {
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.util$Incrementor#incrementCount()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#round(double,int,int)";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyInterval(double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.ode.events$EventState$1#value(double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#<clinit>()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#<clinit>()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#ulp(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()" -> "org.apache.commons.math3.util$Incrementor#getCount()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#readBaseExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#readBaseExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#shift()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#shift()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#round(float,int,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getCurrentTime()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$Incrementor#getCount()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#isForward()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMaxEvaluations()" -> "org.apache.commons.math3.util$Incrementor#getMaximalCount()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.ode$AbstractIntegrator#getEvaluations()" -> "org.apache.commons.math3.util$Incrementor#getCount()";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations)" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations)" -> "org.apache.commons.math3.ode$EquationsMapper#getFirstIndex()";
  "org.apache.commons.math3.ode$AbstractIntegrator#setMaxEvaluations(int)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#storeTime(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#storeTime(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#storeTime(double)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#storeTime(double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#shift()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.events$EventHandler$Action#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getCurrentTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#setTime(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#ulp(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$AbstractIntegrator#setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#shift()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#getOrder()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$Incrementor#getCount()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#setPrimaryState(double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.events$EventState#getEventHandler()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$AbstractIntegrator#setStateInitialized(boolean)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftCurrentTime(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftPreviousTime(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#storeTime(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getSecondaryMappers()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$AbstractIntegrator#initIntegration(double,double[],double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalCurrentTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.events$EventState#getEventTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getCompleteState()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#setCompleteState(double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMaxStep()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.events$EventState#stop()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getPreviousTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#resetInternalState()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.events$EventState#reset(double,double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.events$EventState#stepAccepted(double,double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMinStep()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryState()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#isForward()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getTotalDimension()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$EquationsMapper#getFirstIndex()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryMapper()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#storeTime(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doCopy()";
  "org.apache.commons.math3.ode$AbstractIntegrator#initIntegration(double,double[],double)" -> "org.apache.commons.math3.ode.events$EventState#getEventHandler()";
  "org.apache.commons.math3.ode$AbstractIntegrator#initIntegration(double,double[],double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#setStateInitialized(boolean)";
  "org.apache.commons.math3.ode$AbstractIntegrator#initIntegration(double,double[],double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])" -> "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.events$EventHandler$Action#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getCurrentTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$Incrementor#getCount()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftCurrentTime(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftPreviousTime(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalCurrentTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.events$EventState#getEventTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.events$EventState#stop()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getPreviousTime()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.events$EventState#reset(double,double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.events$EventState#stepAccepted(double,double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#isForward()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#getCompleteState()" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#getCompleteState()" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#getCompleteState()" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getTotalDimension()";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#getCompleteState()" -> "org.apache.commons.math3.ode$EquationsMapper#getFirstIndex()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doCopy()";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#setCompleteState(double[])" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#setCompleteState(double[])" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#setCompleteState(double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getTotalDimension()";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#setCompleteState(double[])" -> "org.apache.commons.math3.ode$EquationsMapper#getFirstIndex()";
  "org.apache.commons.math3.ode.events$EventState#stop()" -> "org.apache.commons.math3.ode.events$EventHandler$Action#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMaxStep()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMinStep()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#resetInternalState()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#resetInternalState()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#reset(double,double[])" -> "org.apache.commons.math3.ode.events$EventHandler$Action#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#reset(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#reset(double,double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode.events$EventState#stepAccepted(double,double[])" -> "org.apache.commons.math3.ode.events$EventHandler$Action#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#stepAccepted(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#stepAccepted(double,double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getPreviousTime()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#getTotalDimension()" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode$ExpandableStatefulODE#getTotalDimension()" -> "org.apache.commons.math3.ode$EquationsMapper#getFirstIndex()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#shift()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.events$EventHandler$Action#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getCurrentTime()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#setTime(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#ulp(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#shift()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#getOrder()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getTime()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$Incrementor#getCount()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.events$EventState#getEventHandler()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#setStateInitialized(boolean)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftCurrentTime(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftPreviousTime(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#storeTime(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getSecondaryMappers()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#initIntegration(double,double[],double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalCurrentTime()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.events$EventState#getEventTime()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getCompleteState()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#setCompleteState(double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMaxStep()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.events$EventState#stop()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getPreviousTime()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#resetInternalState()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.events$EventState#reset(double,double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.events$EventState#stepAccepted(double,double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMinStep()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#isForward()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getTotalDimension()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$EquationsMapper#getFirstIndex()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryMapper()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#storeTime(double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doCopy()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#ulp(double)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getTime()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryMapper()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doCopy()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.ode$AbstractIntegrator#getEventHandlers()" -> "org.apache.commons.math3.ode.events$EventState#getEventHandler()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#readBaseExternal(java.io.ObjectInput)";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$Incrementor#incrementCount(int)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.util$Incrementor#incrementCount(int)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#readBaseExternal(java.io.ObjectInput)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode$EquationsMapper#getDimension()";
  "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator$1#compare(org.apache.commons.math3.ode.events.EventState,org.apache.commons.math3.ode.events.EventState)" -> "org.apache.commons.math3.ode.events$EventState#getEventTime()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.ode$AbstractIntegrator#getMaxEvaluations()" -> "org.apache.commons.math3.util$Incrementor#getMaximalCount()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.ode$AbstractIntegrator#addEventHandler(org.apache.commons.math3.ode.events.EventHandler,double,double,int)" -> "org.apache.commons.math3.ode$AbstractIntegrator#addEventHandler(org.apache.commons.math3.ode.events.EventHandler,double,double,int,org.apache.commons.math3.analysis.solvers.UnivariateSolver)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.events$EventState$1#value(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isSequence(double,double,double)" -> "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isSequence(double,double,double)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()";
  "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()" -> "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
}
