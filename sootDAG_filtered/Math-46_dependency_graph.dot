digraph G {
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#divide(double)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#divide(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#divide(double)" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#createComplex(double,double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#min(int,int)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$MathUtils#copyOf(int[],int)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#min(int,int)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils$2#<clinit>()" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#getArgument()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#negate()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#negate()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#factorial(int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)" -> "org.apache.commons.math.util$MathUtils$2#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)" -> "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean,boolean)";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean,boolean)" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean,boolean)" -> "org.apache.commons.math.util$MathUtils$2#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$MathUtils#equals(float,float)";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$MathUtils#gcd(long,long)";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#conjugate()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#conjugate()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#addAndCheck(long,long,org.apache.commons.math.exception.util.Localizable)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$MathUtils#gcd(int,int)";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(int,int)";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#max(int,int)";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$MathUtils#indicator(float)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#round(double,int)" -> "org.apache.commons.math.util$MathUtils#round(double,int,int)";
  "org.apache.commons.math.util$MathUtils#round(double,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#checkBinomial(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#gcd(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#checkBinomial(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#gcd(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$MathUtils#checkBinomial(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$MathUtils#gcd(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#add(double)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#add(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$MathUtils#factorial(int)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$MathUtils#factorialLog(int)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$MathUtils#factorial(int)";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#exp()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$MathUtils#equals(double,double)";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#multiply(double)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#multiply(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#negate()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#sqrt()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#sqrt1z()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$MathUtils#indicator(double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$MathUtils#indicator(double)";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#sqrt()";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$MathUtils#indicator(double)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.util$MathUtils#addAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#addAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#addAndCheck(long,long,org.apache.commons.math.exception.util.Localizable)";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils$2#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean,boolean)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,double)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#readResolve()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#readResolve()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#min(int,int)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$MathUtils#copyOf(double[],int)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#min(int,int)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils$1#compare(org.apache.commons.math.util.Pair,org.apache.commons.math.util.Pair)" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils$1#compare(org.apache.commons.math.util.Pair,org.apache.commons.math.util.Pair)" -> "org.apache.commons.math.util$MathUtils$2#<clinit>()";
  "org.apache.commons.math.util$MathUtils#sortInPlace(double[],double[][])" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#sortInPlace(double[],double[][])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#sortInPlace(double[],double[][])" -> "org.apache.commons.math.util$MathUtils#sortInPlace(double[],org.apache.commons.math.util.MathUtils$OrderDirection,double[][])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#valueOf(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$MathUtils#cosh(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$MathUtils#sinh(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#negate()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#sqrt()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#sqrt1z()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$MathUtils#indicator(double)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$MathUtils#cosh(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$MathUtils#sinh(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$MathUtils#cosh(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$MathUtils#sinh(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#hashCode()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#hashCode()" -> "org.apache.commons.math.util$MathUtils#hash(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#subAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#subAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#addAndCheck(long,long,org.apache.commons.math.exception.util.Localizable)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#exp()";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#multiply(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#getExponent(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#scalb(double,int)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$MathUtils#indicator(float)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$MathUtils#round(float,int,int)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#subtract(double)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#subtract(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#valueOf(double,double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$MathUtils#cosh(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$MathUtils#sinh(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$MathUtils#cosh(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$MathUtils#sinh(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$MathUtils#cosh(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$MathUtils#sinh(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
}
