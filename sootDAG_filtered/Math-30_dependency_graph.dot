digraph G {
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Erf#erf(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#getRan()" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.util$FastMath#round(double)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$1#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.stat.ranking$NaNStrategy#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#fill(double[],java.util.List,double)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)" -> "org.apache.commons.math3.stat.ranking$TiesStrategy#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking$1#<clinit>()" -> "org.apache.commons.math3.stat.ranking$NaNStrategy#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking$1#<clinit>()" -> "org.apache.commons.math3.stat.ranking$TiesStrategy#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionFactor(float)" -> "org.apache.commons.math3.util$ResizableDoubleArray#getContractionCriteria()";
  "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionFactor(float)" -> "org.apache.commons.math3.util$ResizableDoubleArray#checkContractExpand(float,float)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Erf#erfc(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Erf#erf(double,double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Erf#erfc(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.special$Erf#erfc(double)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Erf#erf(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.util$ResizableDoubleArray#discardFrontElements(int)" -> "org.apache.commons.math3.util$ResizableDoubleArray#discardExtremeElements(int,boolean)";
  "org.apache.commons.math3.util$ResizableDoubleArray#discardFrontElements(int)" -> "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()";
  "org.apache.commons.math3.util$ResizableDoubleArray#discardFrontElements(int)" -> "org.apache.commons.math3.util$ResizableDoubleArray#contract()";
  "org.apache.commons.math3.util$ResizableDoubleArray#discardExtremeElements(int,boolean)" -> "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()";
  "org.apache.commons.math3.util$ResizableDoubleArray#discardExtremeElements(int,boolean)" -> "org.apache.commons.math3.util$ResizableDoubleArray#contract()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$ResizableDoubleArray#getElements()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath#round(float)";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$ResizableDoubleArray#expand()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#<clinit>()" -> "org.apache.commons.math3.util$ResizableDoubleArray#contract()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ResizableDoubleArray#expand()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$ResizableDoubleArray#expand()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ResizableDoubleArray#expand()" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$ResizableDoubleArray#expand()" -> "org.apache.commons.math3.util$FastMath#round(float)";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)" -> "org.apache.commons.math3.util$FastMath#round(float)";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#expand()";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#contract()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)" -> "org.apache.commons.math3.util$FastMath#round(float)";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#expand()";
  "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#contract()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.util$FastMath#round(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#restoreNaNs(double[],java.util.List)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$1#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getValue()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getPosition()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaNStrategy#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#fill(double[],java.util.List,double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.inference$MannWhitneyUTest#concatenateSamples(double[],double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.inference$MannWhitneyUTest#ensureDataConformance(double[],double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.stat.ranking$TiesStrategy#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getValue()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getPosition()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.util$FastMath#round(double)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#restoreNaNs(double[],java.util.List)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$1#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getValue()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getPosition()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaNStrategy#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#fill(double[],java.util.List,double)";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])" -> "org.apache.commons.math3.stat.ranking$TiesStrategy#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getValue()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getValue()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getValue()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getPosition()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)";
  "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataImpl#getSecRan()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#sample()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$NormalDistribution#sample()" -> "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)";
  "org.apache.commons.math3.distribution$NormalDistribution#sample()" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.distribution$NormalDistribution#sample()" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#<clinit>()" -> "org.apache.commons.math3.stat.ranking$NaNStrategy#<clinit>()";
  "org.apache.commons.math3.stat.ranking$NaturalRanking#<clinit>()" -> "org.apache.commons.math3.stat.ranking$TiesStrategy#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataImpl#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$NormalDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataImpl#getSecRan()";
  "org.apache.commons.math3.util$ResizableDoubleArray#setContractionCriteria(float)" -> "org.apache.commons.math3.util$ResizableDoubleArray#checkContractExpand(float,float)";
  "org.apache.commons.math3.util$ResizableDoubleArray#setContractionCriteria(float)" -> "org.apache.commons.math3.util$ResizableDoubleArray#getExpansionFactor()";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$ResizableDoubleArray#setElement(int,double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#expandTo(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$ResizableDoubleArray#setNumElements(int)" -> "org.apache.commons.math3.util$ResizableDoubleArray#expandTo(int)";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#round(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#restoreNaNs(double[],java.util.List)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$1#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getValue()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getPosition()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaNStrategy#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$NaturalRanking#fill(double[],java.util.List,double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.inference$MannWhitneyUTest#concatenateSamples(double[],double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.inference$MannWhitneyUTest#ensureDataConformance(double[],double[])";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.stat.ranking$TiesStrategy#<clinit>()";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataImpl#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#getElements()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath#round(float)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#expand()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#contract()";
  "org.apache.commons.math3.util$ResizableDoubleArray#copy()" -> "org.apache.commons.math3.util$ResizableDoubleArray#copy(org.apache.commons.math3.util.ResizableDoubleArray,org.apache.commons.math3.util.ResizableDoubleArray)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#getMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Erf#erf(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataImpl#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#getElements()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataImpl#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#round(float)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#expand()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataImpl#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$ResizableDoubleArray#contract()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$ResizableDoubleArray#discardMostRecentElements(int)" -> "org.apache.commons.math3.util$ResizableDoubleArray#discardExtremeElements(int,boolean)";
  "org.apache.commons.math3.util$ResizableDoubleArray#discardMostRecentElements(int)" -> "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()";
  "org.apache.commons.math3.util$ResizableDoubleArray#discardMostRecentElements(int)" -> "org.apache.commons.math3.util$ResizableDoubleArray#contract()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataImpl#getSecRan()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)";
}
