digraph G {
  "org.apache.commons.math.util$MathUtils#pow(java.math.BigInteger,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(int[],int[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#subAndCheck(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$MathUtils#gcd(int,int)";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(int,int)";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#gcd(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#min(int,int)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[],int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#addAndCheck(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$MathUtils#cosh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.exception.util$ExceptionContext#readObject(java.io.ObjectInputStream)" -> "org.apache.commons.math.exception.util$ExceptionContext#deSerializeContext(java.io.ObjectInputStream)";
  "org.apache.commons.math.exception.util$ExceptionContext#readObject(java.io.ObjectInputStream)" -> "org.apache.commons.math.exception.util$ExceptionContext#deSerializeMessages(java.io.ObjectInputStream)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#min(int,int)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$MathUtils#copyOf(double[],int)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#min(int,int)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(double[],int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.exception.util$ExceptionContext#serializeMessages(java.io.ObjectOutputStream)" -> "org.apache.commons.math.exception.util$ExceptionContext#nonSerializableReplacement(java.lang.Object)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#distance1(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$MathUtils#factorial(int)";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$MathUtils#factorialLog(int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#factorial(int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorial(int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#pow(long,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.exception$MathIllegalStateException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception$MathIllegalStateException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.exception$MathIllegalStateException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)";
  "org.apache.commons.math.exception$MathIllegalStateException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getLocalizedMessage()";
  "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.exception.util$ExceptionContext#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception.util$ExceptionContext#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.exception.util$ExceptionContext#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#min(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#forceSide(int,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.exception$MathIllegalArgumentException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception$MathIllegalArgumentException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.exception$MathIllegalArgumentException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)";
  "org.apache.commons.math.exception$MathIllegalArgumentException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getLocalizedMessage()";
  "org.apache.commons.math.exception.util$ExceptionContext#writeObject(java.io.ObjectOutputStream)" -> "org.apache.commons.math.exception.util$ExceptionContext#nonSerializableReplacement(java.lang.Object)";
  "org.apache.commons.math.exception.util$ExceptionContext#writeObject(java.io.ObjectOutputStream)" -> "org.apache.commons.math.exception.util$ExceptionContext#serializeMessages(java.io.ObjectOutputStream)";
  "org.apache.commons.math.exception.util$ExceptionContext#writeObject(java.io.ObjectOutputStream)" -> "org.apache.commons.math.exception.util$ExceptionContext#serializeContext(java.io.ObjectOutputStream)";
  "org.apache.commons.math.exception.util$ExceptionContext#serializeContext(java.io.ObjectOutputStream)" -> "org.apache.commons.math.exception.util$ExceptionContext#nonSerializableReplacement(java.lang.Object)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifySequence(double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifySequence(double,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#round(double,int)" -> "org.apache.commons.math.util$MathUtils#round(double,int,int)";
  "org.apache.commons.math.util$MathUtils#round(double,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$MathUtils#factorialLog(int)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$MathUtils#factorial(int)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$MathUtils#factorialDouble(int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$MathUtils#equals(double,double)";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equals(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equals(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils$2#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean,boolean)";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils$2#<clinit>()" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean,boolean)" -> "org.apache.commons.math.util$MathUtils$2#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean,boolean)" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)" -> "org.apache.commons.math.util$MathUtils$2#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)" -> "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean,boolean)";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils$1#compare(org.apache.commons.math.util.Pair,org.apache.commons.math.util.Pair)" -> "org.apache.commons.math.util$MathUtils$2#<clinit>()";
  "org.apache.commons.math.util$MathUtils$1#compare(org.apache.commons.math.util.Pair,org.apache.commons.math.util.Pair)" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#sortInPlace(double[],double[][])" -> "org.apache.commons.math.util$MathUtils#sortInPlace(double[],org.apache.commons.math.util.MathUtils$OrderDirection,double[][])";
  "org.apache.commons.math.util$MathUtils#sortInPlace(double[],double[][])" -> "org.apache.commons.math.util$MathUtils$OrderDirection#<clinit>()";
  "org.apache.commons.math.util$MathUtils#sortInPlace(double[],double[][])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$MathUtils#log(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#min(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#isBracketing(double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#isBracketing(double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#isSequence(double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isSequence(double,double,double)";
  "org.apache.commons.math.exception$MathIllegalStateException#getMessage()" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception$MathIllegalStateException#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage()";
  "org.apache.commons.math.exception$MathIllegalStateException#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.exception$MathIllegalStateException#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)";
  "org.apache.commons.math.exception.util$ExceptionContext#getMessage()" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception.util$ExceptionContext#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.exception.util$ExceptionContext#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$MathUtils#indicator(float)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$MathUtils#round(float,int,int)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$MathUtils#roundUnscaled(double,double,int)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$MathUtils#indicator(float)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$MathUtils#round(float,int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#min(int,int)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$MathUtils#copyOf(int[],int)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copyOf(int[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.exception.util$ExceptionContext#addMessage(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math.exception.util$ArgUtils#flatten(java.lang.Object[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#min(double,double)";
  "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#gcd(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#checkBinomial(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientLog(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#checkBinomial(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#gcd(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#checkBinomial(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficientDouble(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$MathUtils#gcd(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$MathUtils#checkBinomial(int,int)";
  "org.apache.commons.math.util$MathUtils#binomialCoefficient(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyInterval(double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyInterval(double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMin()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifyBracketing(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver#doSolve()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getRelativeAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$Incrementor#resetCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#computeObjectiveValue(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$AllowedSolution#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#setup(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$Method#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseSecantSolver$1#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#incrementEvaluationCount()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMax()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getAbsoluteAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getFunctionValueAccuracy()";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseSecantSolver#solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,org.apache.commons.math.analysis.solvers.AllowedSolution)" -> "org.apache.commons.math.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math.util$MathUtils#addAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#addAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#addAndCheck(long,long,org.apache.commons.math.exception.util.Localizable)";
  "org.apache.commons.math.util$MathUtils#addAndCheck(long,long)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#addAndCheck(long,long,org.apache.commons.math.exception.util.Localizable)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,double)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#compareTo(double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$MathUtils#equals(double,double,int)";
  "org.apache.commons.math.util$MathUtils#equals(double,double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#pow(java.math.BigInteger,long)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.util$MathUtils#distanceInf(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#pow(long,long)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distance(int[],int[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.exception$MathArithmeticException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception$MathArithmeticException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.exception$MathArithmeticException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)";
  "org.apache.commons.math.exception$MathArithmeticException#getLocalizedMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getLocalizedMessage()";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#subAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#subAndCheck(long,long)" -> "org.apache.commons.math.util$MathUtils#addAndCheck(long,long,org.apache.commons.math.exception.util.Localizable)";
  "org.apache.commons.math.util$MathUtils#subAndCheck(long,long)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$MathUtils#sinh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.exception$MathArithmeticException#getMessage()" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception$MathArithmeticException#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage()";
  "org.apache.commons.math.exception$MathArithmeticException#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.exception$MathArithmeticException#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)";
  "org.apache.commons.math.util$Incrementor#incrementCount(int)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifySequence(double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifySequence(double,double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifySequence(double,double,double)" -> "org.apache.commons.math.analysis.solvers$UnivariateRealSolverUtils#verifyInterval(double,double)";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#verifySequence(double,double,double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$MathUtils#equals(float,float)";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equals(float[],float[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$MathUtils#mulAndCheck(long,long)";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$MathUtils#gcd(long,long)";
  "org.apache.commons.math.util$MathUtils#lcm(long,long)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#abs(long)";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#gcd(long,long)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale,java.lang.String)" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale,java.lang.String)" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#max(int,int)";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#distanceInf(int[],int[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getEvaluations()" -> "org.apache.commons.math.util$Incrementor#getCount()";
  "org.apache.commons.math.util$MathUtils#pow(int,long)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.exception$MathIllegalArgumentException#getMessage()" -> "org.apache.commons.math.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)";
  "org.apache.commons.math.exception$MathIllegalArgumentException#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage()";
  "org.apache.commons.math.exception$MathIllegalArgumentException#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)";
  "org.apache.commons.math.exception$MathIllegalArgumentException#getMessage()" -> "org.apache.commons.math.exception.util$ExceptionContext#getMessage(java.util.Locale)";
  "org.apache.commons.math.util$MathUtils#pow(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equals(float,float,float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#pow(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#normalizeArray(double[],double)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.analysis.solvers$BaseAbstractUnivariateRealSolver#getMaxEvaluations()" -> "org.apache.commons.math.util$Incrementor#getMaximalCount()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#getExponent(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#scalb(double,int)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float,float)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#abs(int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$MathUtils#<clinit>()";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$MathUtils#equals(float,float,int)";
  "org.apache.commons.math.util$MathUtils#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
}
