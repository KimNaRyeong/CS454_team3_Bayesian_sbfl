digraph G {
  "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math.ode$AbstractIntegrator#integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#nextUp(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#toRadians(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$Precision#equals(float,float,float)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#tan(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853Integrator#<clinit>()";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#log10(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#expm1(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$Precision#round(float,int,int)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#nextUp(float)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float,float)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#cbrt(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#tanh(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#ulp(float)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#atanh(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#hypot(double,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#atan(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$Precision#equals(double,double,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#acos(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#ulp(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#log1p(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#toDegrees(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#main(java.lang.String[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#round(float)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#cosh(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#asin(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#log(double,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$Precision#equals(double,double,int)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#acosh(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#asinh(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#resetInternalState()";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#round(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#rint(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$Precision#equals(float,float,int)";
  "org.apache.commons.math.ode$AbstractIntegrator#addEventHandler(org.apache.commons.math.ode.events.EventHandler,double,double,int,org.apache.commons.math.analysis.solvers.UnivariateRealSolver)" -> "org.apache.commons.math.ode$AbstractIntegrator#addEventHandler(org.apache.commons.math.ode.events.EventHandler,double,double,int)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math.ode.EquationsMapper,org.apache.commons.math.ode.EquationsMapper[])" -> "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math.ode.EquationsMapper,org.apache.commons.math.ode.EquationsMapper[])";
  "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math.ode.EquationsMapper,org.apache.commons.math.ode.EquationsMapper[])" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math.ode.EquationsMapper,org.apache.commons.math.ode.EquationsMapper[])";
  "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math.ode.EquationsMapper,org.apache.commons.math.ode.EquationsMapper[])" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#readBaseExternal(java.io.ObjectInput)" -> "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)";
  "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#readExternal(java.io.ObjectInput)";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double[],double[])";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.util$FastMath#hypot(double,double)";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.util$FastMath#ulp(double)";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double,double)";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double,double)";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.util$Precision#equals(double,double,double)";
  "org.apache.commons.math.util$FastMath#abs(double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#setCompleteState(double[])" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#storeTime(double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)" -> "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)" -> "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#storeTime(double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#storeTime(double)" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#storeTime(double)";
  "org.apache.commons.math.util$Incrementor#incrementCount()" -> "org.apache.commons.math.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math.util$Incrementor#incrementCount()" -> "org.apache.commons.math.util$Incrementor#incrementCount(int)";
  "org.apache.commons.math.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math.util$Precision#equals(float,float,int)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float,int)";
  "org.apache.commons.math.util$Precision#equals(float,float,int)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math.util$Precision#equals(float,float,int)" -> "org.apache.commons.math.util$Precision#equals(float,float,float)";
  "org.apache.commons.math.util$Precision#equals(float,float,int)" -> "org.apache.commons.math.util$Precision#equals(float,float)";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#log1p(double)";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#log10(double)";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#asinh(double)";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#acosh(double)";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#atanh(double)";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#log(double,double)";
  "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math.util$FastMath#main(java.lang.String[])";
  "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#storeTime(double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#tan(double)";
  "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#doCopy()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#copy()";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#copy()" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#setPrimaryState(double[])" -> "org.apache.commons.math.ode$AbstractIntegrator#integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])";
  "org.apache.commons.math.ode$EquationsMapper#extractEquationData(double[],double[])" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)";
  "org.apache.commons.math.ode$EquationsMapper#extractEquationData(double[],double[])" -> "org.apache.commons.math.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math.ode$EquationsMapper#extractEquationData(double[],double[])" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)";
  "org.apache.commons.math.ode$EquationsMapper#extractEquationData(double[],double[])" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()";
  "org.apache.commons.math.ode$EquationsMapper#extractEquationData(double[],double[])" -> "org.apache.commons.math.ode$ExpandableStatefulODE#setCompleteState(double[])";
  "org.apache.commons.math.ode$EquationsMapper#extractEquationData(double[],double[])" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracB()" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#main(java.lang.String[])";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.ode$AbstractIntegrator#setEquations(org.apache.commons.math.ode.ExpandableStatefulODE)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float,float)";
  "org.apache.commons.math.util$FastMath#sqrt(double)" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)";
  "org.apache.commons.math.util$FastMath#sqrt(double)" -> "org.apache.commons.math.util$FastMath#asinh(double)";
  "org.apache.commons.math.util$FastMath#sqrt(double)" -> "org.apache.commons.math.util$FastMath#asin(double)";
  "org.apache.commons.math.util$FastMath#sqrt(double)" -> "org.apache.commons.math.util$FastMath#acosh(double)";
  "org.apache.commons.math.util$FastMath#sqrt(double)" -> "org.apache.commons.math.util$FastMath#hypot(double,double)";
  "org.apache.commons.math.util$FastMath#sqrt(double)" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853Integrator#<clinit>()";
  "org.apache.commons.math.util$FastMath#sqrt(double)" -> "org.apache.commons.math.util$FastMath#acos(double)";
  "org.apache.commons.math.util$FastMath#sqrt(double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sqrt(double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#resetInternalState()";
  "org.apache.commons.math.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#doubleHighPart(double)" -> "org.apache.commons.math.util$FastMath#toDegrees(double)";
  "org.apache.commons.math.util$FastMath#doubleHighPart(double)" -> "org.apache.commons.math.util$FastMath#acos(double)";
  "org.apache.commons.math.util$FastMath#doubleHighPart(double)" -> "org.apache.commons.math.util$FastMath#toRadians(double)";
  "org.apache.commons.math.util$FastMath#doubleHighPart(double)" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.util$Incrementor#getCount()" -> "org.apache.commons.math.ode$AbstractIntegrator#getEvaluations()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#tanh(double)";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#expm1(double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#asin(double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#acos(double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#atan(double)";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntB()" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#main(java.lang.String[])";
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#setSoftCurrentTime(double)" -> "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$EquationsMapper#getDimension()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)";
  "org.apache.commons.math.ode$EquationsMapper#getDimension()" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$EquationsMapper#getDimension()" -> "org.apache.commons.math.ode$ExpandableStatefulODE#getTotalDimension()";
  "org.apache.commons.math.ode$EquationsMapper#getDimension()" -> "org.apache.commons.math.ode$ExpandableStatefulODE#addSecondaryEquations(org.apache.commons.math.ode.SecondaryEquations)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#readBaseExternal(java.io.ObjectInput)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math.ode.EquationsMapper,org.apache.commons.math.ode.EquationsMapper[])";
  "org.apache.commons.math.util$FastMath#abs(int)" -> "org.apache.commons.math.util$Precision#equals(float,float,int)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double,double)";
  "org.apache.commons.math.ode$EquationsMapper#getFirstIndex()" -> "org.apache.commons.math.ode$ExpandableStatefulODE#getTotalDimension()";
  "org.apache.commons.math.ode$EquationsMapper#getFirstIndex()" -> "org.apache.commons.math.ode$ExpandableStatefulODE#addSecondaryEquations(org.apache.commons.math.ode.SecondaryEquations)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getTotalDimension()" -> "org.apache.commons.math.ode$ExpandableStatefulODE#getCompleteState()";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getTotalDimension()" -> "org.apache.commons.math.ode$ExpandableStatefulODE#setCompleteState(double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#cosh(double)";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.util$FastMath#floor(double)" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$FastMath#floor(double)" -> "org.apache.commons.math.util$FastMath#round(float)";
  "org.apache.commons.math.util$FastMath#floor(double)" -> "org.apache.commons.math.util$FastMath#rint(double)";
  "org.apache.commons.math.util$FastMath#floor(double)" -> "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math.util$FastMath#floor(double)" -> "org.apache.commons.math.util$FastMath#round(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#tanh(double)";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#cosh(double)";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.util$Precision#round(float,int,int)" -> "org.apache.commons.math.util$Precision#round(float,int)";
  "org.apache.commons.math.util$Precision#equals(double,double,int)" -> "org.apache.commons.math.util$Precision#equals(double,double)";
  "org.apache.commons.math.util$Precision#equals(double,double,int)" -> "org.apache.commons.math.util$Precision#equals(double,double,double)";
  "org.apache.commons.math.util$Precision#equals(double,double,int)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math.util$Precision#equals(double,double,int)" -> "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math.util$Precision#equals(double,double,int)" -> "org.apache.commons.math.util$Precision#compareTo(double,double,int)";
  "org.apache.commons.math.util$Precision#equals(double,double,int)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(double,double,int)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.util$Precision#equals(double,double,double)" -> "org.apache.commons.math.util$Precision#compareTo(double,double,double)";
  "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#doCopy()";
  "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()";
  "org.apache.commons.math.util$FastMath#max(double,double)" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)";
  "org.apache.commons.math.util$FastMath#max(double,double)" -> "org.apache.commons.math.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#max(double,double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#max(double,double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math.ode$AbstractIntegrator#initIntegration(double,double[],double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$AbstractIntegrator#setStateInitialized(boolean)" -> "org.apache.commons.math.ode$AbstractIntegrator#initIntegration(double,double[],double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#tan(double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getPrimaryMapper()" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getPrimaryMapper()" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getCompleteState()" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#copy()";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#finalizeStep()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntA()" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])" -> "org.apache.commons.math.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getInterpolatedState()";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getInterpolatedState()" -> "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#resetInternalState()" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$Precision#round(float,int,int)";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math.util$Precision#round(float,int,int)";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadLnMant()" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math.ode.EquationsMapper,org.apache.commons.math.ode.EquationsMapper[])" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getPrimaryState()" -> "org.apache.commons.math.ode$AbstractIntegrator#integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])";
  "org.apache.commons.math.util$FastMath#nextAfter(float,double)" -> "org.apache.commons.math.util$FastMath#nextUp(float)";
  "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getSecondaryMappers()" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#getMinStep()" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode.nonstiff$DormandPrince853Integrator#getOrder()" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#setTime(double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#setTime(double)" -> "org.apache.commons.math.ode$AbstractIntegrator#integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])";
  "org.apache.commons.math.util$FastMath#polySine(double)" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#polySine(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#copySign(double,double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#copySign(double,double)" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.util$Incrementor#getMaximalCount()" -> "org.apache.commons.math.ode$AbstractIntegrator#getMaxEvaluations()";
  "org.apache.commons.math.util$FastMath#nextAfter(double,double)" -> "org.apache.commons.math.util$FastMath#nextUp(double)";
  "org.apache.commons.math.util$FastMath#nextAfter(double,double)" -> "org.apache.commons.math.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()" -> "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#shift()" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$Incrementor#setMaximalCount(int)" -> "org.apache.commons.math.ode$AbstractIntegrator#setMaxEvaluations(int)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getTime()" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getTime()" -> "org.apache.commons.math.ode$AbstractIntegrator#integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])";
  "org.apache.commons.math.ode$ExpandableStatefulODE#getTime()" -> "org.apache.commons.math.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#doFinalize()" -> "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#finalizeStep()";
  "org.apache.commons.math.ode$EquationsMapper#insertEquationData(double[],double[])" -> "org.apache.commons.math.ode$ExpandableStatefulODE#getCompleteState()";
  "org.apache.commons.math.ode$EquationsMapper#insertEquationData(double[],double[])" -> "org.apache.commons.math.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#shift()" -> "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#shift()";
  "org.apache.commons.math.util$FastMath#min(double,double)" -> "org.apache.commons.math.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math.ode.ExpandableStatefulODE,double)";
  "org.apache.commons.math.util$FastMath#min(double,double)" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#getMaxStep()" -> "org.apache.commons.math.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#polyCosine(double)" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#polyCosine(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)" -> "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)";
  "org.apache.commons.math.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)" -> "org.apache.commons.math.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracA()" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#scalb(double,int)" -> "org.apache.commons.math.util$FastMath#hypot(double,double)";
  "org.apache.commons.math.util$FastMath#abs(float)" -> "org.apache.commons.math.util$FastMath#ulp(float)";
  "org.apache.commons.math.util$FastMath#abs(float)" -> "org.apache.commons.math.util$Precision#equals(float,float,float)";
  "org.apache.commons.math.util$FastMath#abs(float)" -> "org.apache.commons.math.util$Precision#equalsIncludingNaN(float,float,float)";
  "org.apache.commons.math.util$Incrementor#resetCount()" -> "org.apache.commons.math.ode$AbstractIntegrator#initIntegration(double,double[],double)";
  "org.apache.commons.math.util$FastMath#abs(long)" -> "org.apache.commons.math.util$Precision#equals(double,double,int)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#isForward()" -> "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math.util$Precision#round(double,int,int)" -> "org.apache.commons.math.util$Precision#round(double,int)";
  "org.apache.commons.math.util$Incrementor$1#trigger(int)" -> "org.apache.commons.math.util$Incrementor#incrementCount()";
  "org.apache.commons.math.util$FastMath#getExponent(double)" -> "org.apache.commons.math.util$FastMath#hypot(double,double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#setSoftPreviousTime(double)" -> "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math.ode.sampling$AbstractStepInterpolator#getGlobalCurrentTime()" -> "org.apache.commons.math.ode$AbstractIntegrator#acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)";
  "org.apache.commons.math.util$FastMath#copySign(float,float)" -> "org.apache.commons.math.util$Precision#round(float,int,int)";
}
