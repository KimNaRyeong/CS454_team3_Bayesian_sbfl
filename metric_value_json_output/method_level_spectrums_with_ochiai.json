{
    "Chart-1": {
        "org.jfree.chart$ChartColor#<clinit>()": 0.0576390417704235,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 0.0576390417704235,
        "org.jfree.chart$LegendItem#<clinit>()": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart$LegendItem#characterIteratorToString(java.text.CharacterIterator)": 0.0,
        "org.jfree.chart$LegendItem#clone()": 0.0,
        "org.jfree.chart$LegendItem#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$LegendItem#getAttributedLabel()": 0,
        "org.jfree.chart$LegendItem#getDataset()": 0.0,
        "org.jfree.chart$LegendItem#getDatasetIndex()": 0.0,
        "org.jfree.chart$LegendItem#getDescription()": 0,
        "org.jfree.chart$LegendItem#getFillPaint()": 0.0,
        "org.jfree.chart$LegendItem#getFillPaintTransformer()": 0.0,
        "org.jfree.chart$LegendItem#getLabel()": 0.0,
        "org.jfree.chart$LegendItem#getLabelFont()": 0.0,
        "org.jfree.chart$LegendItem#getLabelPaint()": 0.0,
        "org.jfree.chart$LegendItem#getLine()": 0.0,
        "org.jfree.chart$LegendItem#getLinePaint()": 0.0,
        "org.jfree.chart$LegendItem#getLineStroke()": 0.0,
        "org.jfree.chart$LegendItem#getOutlinePaint()": 0.0,
        "org.jfree.chart$LegendItem#getOutlineStroke()": 0.0,
        "org.jfree.chart$LegendItem#getSeriesIndex()": 0.0,
        "org.jfree.chart$LegendItem#getSeriesKey()": 0.0,
        "org.jfree.chart$LegendItem#getShape()": 0.0,
        "org.jfree.chart$LegendItem#getToolTipText()": 0.0,
        "org.jfree.chart$LegendItem#getURLText()": 0.0,
        "org.jfree.chart$LegendItem#isLineVisible()": 0.0,
        "org.jfree.chart$LegendItem#isShapeFilled()": 0.0,
        "org.jfree.chart$LegendItem#isShapeOutlineVisible()": 0.0,
        "org.jfree.chart$LegendItem#isShapeVisible()": 0.0,
        "org.jfree.chart$LegendItem#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$LegendItem#setDataset(org.jfree.data.general.Dataset)": 0.0,
        "org.jfree.chart$LegendItem#setDatasetIndex(int)": 0.0,
        "org.jfree.chart$LegendItem#setDescription(java.lang.String)": 0,
        "org.jfree.chart$LegendItem#setFillPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0.0,
        "org.jfree.chart$LegendItem#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart$LegendItem#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#setLine(java.awt.Shape)": 0,
        "org.jfree.chart$LegendItem#setLinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#setLineVisible(boolean)": 0,
        "org.jfree.chart$LegendItem#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart$LegendItem#setSeriesIndex(int)": 0.0,
        "org.jfree.chart$LegendItem#setSeriesKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart$LegendItem#setShape(java.awt.Shape)": 0,
        "org.jfree.chart$LegendItem#setShapeVisible(boolean)": 0,
        "org.jfree.chart$LegendItem#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart$LegendItem#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart$LegendItem#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart$LegendItemCollection#LegendItemCollection()": 0.1125087900926024,
        "org.jfree.chart$LegendItemCollection#add(org.jfree.chart.LegendItem)": 0.0,
        "org.jfree.chart$LegendItemCollection#addAll(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart$LegendItemCollection#clone()": 0.0,
        "org.jfree.chart$LegendItemCollection#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$LegendItemCollection#get(int)": 0.0,
        "org.jfree.chart$LegendItemCollection#getItemCount()": 0.11785113019775793,
        "org.jfree.chart$LegendItemCollection#iterator()": 0,
        "org.jfree.chart.axis$Axis#<clinit>()": 0.0,
        "org.jfree.chart.axis$Axis#Axis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)": 0.0,
        "org.jfree.chart.axis$Axis#clone()": 0.0,
        "org.jfree.chart.axis$Axis#createAndAddEntity(double,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$Axis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$Axis#fireChangeEvent()": 0.0,
        "org.jfree.chart.axis$Axis#getAxisLinePaint()": 0.0,
        "org.jfree.chart.axis$Axis#getAxisLineStroke()": 0.0,
        "org.jfree.chart.axis$Axis#getFixedDimension()": 0.0,
        "org.jfree.chart.axis$Axis#getLabel()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelAngle()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$Axis#getLabelFont()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelInsets()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelToolTip()": 0,
        "org.jfree.chart.axis$Axis#getLabelURL()": 0,
        "org.jfree.chart.axis$Axis#getMinorTickMarkInsideLength()": 0,
        "org.jfree.chart.axis$Axis#getMinorTickMarkOutsideLength()": 0,
        "org.jfree.chart.axis$Axis#getPlot()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelFont()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelInsets()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkInsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkOutsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkStroke()": 0.0,
        "org.jfree.chart.axis$Axis#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.chart.axis$Axis#isAxisLineVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isMinorTickMarksVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isTickLabelsVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isTickMarksVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isVisible()": 0.0,
        "org.jfree.chart.axis$Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)": 0.0,
        "org.jfree.chart.axis$Axis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLineVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setFixedDimension(double)": 0.0,
        "org.jfree.chart.axis$Axis#setLabel(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelAngle(double)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets,boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelToolTip(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelURL(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setMinorTickMarkInsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setMinorTickMarkOutsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setMinorTickMarksVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setPlot(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelsVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkInsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkOutsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarksVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$AxisLocation#<clinit>()": 0.06551217820804184,
        "org.jfree.chart.axis$AxisLocation#AxisLocation(java.lang.String)": 0.06551217820804184,
        "org.jfree.chart.axis$AxisLocation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$AxisLocation#getOpposite()": 0,
        "org.jfree.chart.axis$AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)": 0,
        "org.jfree.chart.axis$AxisLocation#readResolve()": 0.0,
        "org.jfree.chart.axis$AxisLocation#toString()": 0.0,
        "org.jfree.chart.axis$CategoryAnchor#<clinit>()": 0.08703882797784893,
        "org.jfree.chart.axis$CategoryAnchor#CategoryAnchor(java.lang.String)": 0.08703882797784893,
        "org.jfree.chart.axis$CategoryAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$CategoryAnchor#readResolve()": 0.0,
        "org.jfree.chart.axis$CategoryAnchor#toString()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#clearCategoryLabelToolTips()": 0,
        "org.jfree.chart.axis$CategoryAxis#clone()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#configure()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#drawTickMarks(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositionOffset()": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositions()": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelToolTip(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(java.lang.Comparable,java.util.List,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(int,int,int,int,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getLowerMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelLines()": 0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelWidthRatio()": 0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelFont(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getUpperMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#readPaintMap(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)": 0,
        "org.jfree.chart.axis$CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositionOffset(int)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setLowerMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelLines(int)": 0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelWidthRatio(float)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setUpperMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$ValueAxis#<clinit>()": 0.0,
        "org.jfree.chart.axis$ValueAxis#ValueAxis(java.lang.String,org.jfree.chart.axis.TickUnitSource)": 0.0,
        "org.jfree.chart.axis$ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#centerRange(double)": 0,
        "org.jfree.chart.axis$ValueAxis#clone()": 0.0,
        "org.jfree.chart.axis$ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$ValueAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#getAutoRangeMinimumSize()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getAutoTickIndex()": 0,
        "org.jfree.chart.axis$ValueAxis#getDefaultAutoRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getDownArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getFixedAutoRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLeftArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getLowerBound()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLowerMargin()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getMinorTickCount()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getRightArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getStandardTickUnits()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getUpperBound()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpperMargin()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isAutoRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isAutoTickUnitSelection()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isInverted()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isNegativeArrowVisible()": 0,
        "org.jfree.chart.axis$ValueAxis#isPositiveArrowVisible()": 0,
        "org.jfree.chart.axis$ValueAxis#isVerticalTickLabels()": 0.0,
        "org.jfree.chart.axis$ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#pan(double)": 0,
        "org.jfree.chart.axis$ValueAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange2(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickIndex(int)": 0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setDefaultAutoRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setDownArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setFixedAutoRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setInverted(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLeftArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setLowerBound(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLowerMargin(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setMinorTickCount(int)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setNegativeArrowVisible(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setPositiveArrowVisible(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeAboutValue(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)": 0,
        "org.jfree.chart.axis$ValueAxis#setRightArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setUpperBound(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpperMargin(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setVerticalTickLabels(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$ValueAxis#zoomRange(double,double)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#CategoryItemEntity(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#getColumnKey()": 0,
        "org.jfree.chart.entity$CategoryItemEntity#getDataset()": 0,
        "org.jfree.chart.entity$CategoryItemEntity#getRowKey()": 0,
        "org.jfree.chart.entity$CategoryItemEntity#setColumnKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#setDataset(org.jfree.data.category.CategoryDataset)": 0,
        "org.jfree.chart.entity$CategoryItemEntity#setRowKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#toString()": 0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#clone()": 0.0,
        "org.jfree.chart.entity$ChartEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getArea()": 0,
        "org.jfree.chart.entity$ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)": 0,
        "org.jfree.chart.entity$ChartEntity#getPolyCoords(java.awt.Shape)": 0,
        "org.jfree.chart.entity$ChartEntity#getRectCoords(java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.entity$ChartEntity#getShapeCoords()": 0,
        "org.jfree.chart.entity$ChartEntity#getShapeType()": 0,
        "org.jfree.chart.entity$ChartEntity#getToolTipText()": 0,
        "org.jfree.chart.entity$ChartEntity#getURLText()": 0,
        "org.jfree.chart.entity$ChartEntity#hashCode()": 0,
        "org.jfree.chart.entity$ChartEntity#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setArea(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#toString()": 0,
        "org.jfree.chart.entity$ChartEntity#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot)": 0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String)": 0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$PlotEntity#clone()": 0,
        "org.jfree.chart.entity$PlotEntity#equals(java.lang.Object)": 0,
        "org.jfree.chart.entity$PlotEntity#getPlot()": 0,
        "org.jfree.chart.entity$PlotEntity#hashCode()": 0,
        "org.jfree.chart.entity$PlotEntity#readObject(java.io.ObjectInputStream)": 0,
        "org.jfree.chart.entity$PlotEntity#toString()": 0,
        "org.jfree.chart.entity$PlotEntity#writeObject(java.io.ObjectOutputStream)": 0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.039872611141445,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": 0.039872611141445,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": 0.06454972243679027,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.039872611141445,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": 0.039872611141445,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0,
        "org.jfree.chart.event$DatasetChangeInfo#DatasetChangeInfo()": 0.0409272754535029,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": 0.05933908290969266,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0,
        "org.jfree.chart.labels$ItemLabelAnchor#<clinit>()": 0.045083481733371615,
        "org.jfree.chart.labels$ItemLabelAnchor#ItemLabelAnchor(java.lang.String)": 0.045083481733371615,
        "org.jfree.chart.labels$ItemLabelAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$ItemLabelAnchor#readResolve()": 0.0,
        "org.jfree.chart.labels$ItemLabelAnchor#toString()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)": 0.045267873021259265,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": 0.045175395145262566,
        "org.jfree.chart.labels$ItemLabelPosition#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#getAngle()": 0,
        "org.jfree.chart.labels$ItemLabelPosition#getItemLabelAnchor()": 0,
        "org.jfree.chart.labels$ItemLabelPosition#getRotationAnchor()": 0,
        "org.jfree.chart.labels$ItemLabelPosition#getTextAnchor()": 0,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#StandardCategorySeriesLabelGenerator()": 0.06350006350009525,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#StandardCategorySeriesLabelGenerator(java.lang.String)": 0.0629940788348712,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#clone()": 0.0,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int)": 0.0,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int)": 0.0,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#hashCode()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#<clinit>()": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot()": 0.2581988897471611,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)": 0,
        "org.jfree.chart.plot$CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#canSelectByPoint()": 0,
        "org.jfree.chart.plot$CategoryPlot#canSelectByRegion()": 0,
        "org.jfree.chart.plot$CategoryPlot#checkAxisIndices(java.util.List)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#clearAnnotations()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainAxes()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeAxes()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearSelection()": 0,
        "org.jfree.chart.plot$CategoryPlot#clone()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#cloneMarkerMap(java.util.Map)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#configureDomainAxes()": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#configureRangeAxes()": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#datasetChanged(org.jfree.data.event.DatasetChangeEvent)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToRangeAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,int,java.lang.Comparable,java.lang.Comparable,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#findSelectionStateForDataset(org.jfree.data.category.CategoryDataset,java.lang.Object)": 0,
        "org.jfree.chart.plot$CategoryPlot#getAnchorValue()": 0,
        "org.jfree.chart.plot$CategoryPlot#getAnnotations()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAxisOffset()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCategories()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getColumnRenderingOrder()": 0,
        "org.jfree.chart.plot$CategoryPlot#getCrosshairDatasetIndex()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataset()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataset(int)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#getDatasetCount()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairColumnKey()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairPaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairRowKey()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePosition()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#getDrawSharedDomainAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedDomainAxisSpace()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedLegendItems()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedRangeAxisSpace()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.16222142113076254,
        "org.jfree.chart.plot$CategoryPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getOrientation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getPlotType()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis(int)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairPaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairValue()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMinorGridlinePaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMinorGridlineStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeZeroBaselinePaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeZeroBaselineStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRendererCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRowRenderingOrder()": 0,
        "org.jfree.chart.plot$CategoryPlot#getShadowGenerator()": 0,
        "org.jfree.chart.plot$CategoryPlot#getWeight()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$CategoryPlot#indexOf(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#integerise(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainPannable()": 0,
        "org.jfree.chart.plot$CategoryPlot#isDomainZoomable()": 0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeMinorGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangePannable()": 0,
        "org.jfree.chart.plot$CategoryPlot#isRangeZeroBaselineVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeZoomable()": 0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxes(int,java.util.List)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxis(int,int)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxes(int,java.util.List)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxis(int,int)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CategoryCrosshairState)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#select(double,double,java.awt.geom.Rectangle2D,org.jfree.chart.RenderingSource)": 0,
        "org.jfree.chart.plot$CategoryPlot#select(java.awt.geom.GeneralPath,java.awt.geom.Rectangle2D,org.jfree.chart.RenderingSource)": 0,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setCrosshairDatasetIndex(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setCrosshairDatasetIndex(int,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)": 0.20851441405707477,
        "org.jfree.chart.plot$CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)": 0.2581988897471611,
        "org.jfree.chart.plot$CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairColumnKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairColumnKey(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairRowKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairRowKey(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDrawSharedDomainAxis(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.09284766908852593,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangePannable(boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0.35355339059327373,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.4472135954999579,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setShadowGenerator(org.jfree.chart.util.ShadowGenerator)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setWeight(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoom(double)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$DatasetRenderingOrder#<clinit>()": 0.06651901052377393,
        "org.jfree.chart.plot$DatasetRenderingOrder#DatasetRenderingOrder(java.lang.String)": 0.06651901052377393,
        "org.jfree.chart.plot$DatasetRenderingOrder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#hashCode()": 0,
        "org.jfree.chart.plot$DatasetRenderingOrder#readResolve()": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#toString()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 0.0576390417704235,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 0.0576390417704235,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.0576390417704235,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 0.0576390417704235,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": 0.0576390417704235,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": 0.0576390417704235,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$Plot#<clinit>()": 0.0582222509739582,
        "org.jfree.chart.plot$Plot#Plot()": 0.0582222509739582,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.0,
        "org.jfree.chart.plot$Plot#annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)": 0,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#clone()": 0.0,
        "org.jfree.chart.plot$Plot#createAndAddEntity(java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.event.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#fireChangeEvent()": 0.06726727939963124,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": 0.0,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": 0.0,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getInsets()": 0.0,
        "org.jfree.chart.plot$Plot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": 0.0,
        "org.jfree.chart.plot$Plot#getParent()": 0.06388765649999399,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$Plot#isNotify()": 0.0,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": 0.0,
        "org.jfree.chart.plot$Plot#isSubplot()": 0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": 0.05933908290969266,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.0,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": 0.0,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier,boolean)": 0,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setNotify(boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$Plot#zoom(double)": 0,
        "org.jfree.chart.plot$PlotOrientation#<clinit>()": 0.06523280730534423,
        "org.jfree.chart.plot$PlotOrientation#PlotOrientation(java.lang.String)": 0.06523280730534423,
        "org.jfree.chart.plot$PlotOrientation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PlotOrientation#hashCode()": 0,
        "org.jfree.chart.plot$PlotOrientation#readResolve()": 0.0,
        "org.jfree.chart.plot$PlotOrientation#toString()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#<clinit>()": 0.04441155916843276,
        "org.jfree.chart.renderer$AbstractRenderer#AbstractRenderer()": 0.045267873021259265,
        "org.jfree.chart.renderer$AbstractRenderer#addChangeListener(org.jfree.chart.event.RendererChangeListener)": 0.07088812050083358,
        "org.jfree.chart.renderer$AbstractRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,double,double,org.jfree.chart.plot.PlotOrientation)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#clearSeriesPaints(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#clearSeriesStrokes(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#clone()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#fireChangeEvent()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesFillPaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesOutlinePaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesOutlineStroke()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesPaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesShape()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesStroke()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseCreateEntities()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseFillPaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelFont()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelPaint()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelsVisible()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendShape()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendTextFont()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendTextPaint()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseNegativeItemLabelPosition()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseOutlinePaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseOutlineStroke()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBasePaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBasePositiveItemLabelPosition()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseSeriesVisible()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseSeriesVisibleInLegend()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseShape()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseStroke()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getDataBoundsIncludesVisibleSeriesOnly()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getDefaultEntityRadius()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemCreateEntity(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemFillPaint(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelAnchorOffset()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelFont(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelPaint(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemOutlinePaint(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemOutlineStroke(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemPaint(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemShape(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemStroke(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemVisible(int,int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendShape(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendTextFont(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendTextPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getNegativeItemLabelPosition(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getPositiveItemLabelPosition(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSelectedItemAttributes()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesCreateEntities(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesFillPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelFont(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelPaint(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelsVisible(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesNegativeItemLabelPosition(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesOutlinePaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesOutlineStroke(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesPositiveItemLabelPosition(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesShape(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesStroke(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesVisible(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesVisibleInLegend(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getTreatLegendShapeAsLine()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#hashCode()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#isItemLabelVisible(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesItemLabelsVisible(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesVisible(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesVisibleInLegend(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendShape(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendTextFont(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendTextPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesFillPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesOutlinePaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesOutlineStroke(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesShape(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesStroke(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesFillPaint(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesOutlinePaint(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesOutlineStroke(boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesPaint(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesShape(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesStroke(boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseCreateEntities(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseCreateEntities(boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseFillPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelsVisible(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendTextFont(java.awt.Font)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendTextPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePaint(java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisible(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisible(boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisibleInLegend(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseShape(java.awt.Shape,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setDataBoundsIncludesVisibleSeriesOnly(boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#setDefaultEntityRadius(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setItemLabelAnchorOffset(double)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendShape(int,java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendTextFont(int,java.awt.Font)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendTextPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesShape(int,java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesStroke(int,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisible(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setTreatLegendShapeAsLine(boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#RenderAttributes()": 0.045267873021259265,
        "org.jfree.chart.renderer$RenderAttributes#RenderAttributes(boolean)": 0.045267873021259265,
        "org.jfree.chart.renderer$RenderAttributes#getAllowNull()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getCreateEntity(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultCreateEntity()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultFillPaint()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultLabelFont()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultLabelPaint()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultLabelVisible()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultOutlinePaint()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultOutlineStroke()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultPaint()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultShape()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultStroke()": 0,
        "org.jfree.chart.renderer$RenderAttributes#getItemFillPaint(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getItemLabelFont(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getItemLabelPaint(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getItemOutlinePaint(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getItemOutlineStroke(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getItemPaint(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getItemShape(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getItemStroke(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesCreateEntity(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesFillPaint(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesLabelFont(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesLabelPaint(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesLabelVisible(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesOutlinePaint(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesOutlineStroke(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesPaint(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesShape(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesStroke(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#isLabelVisible(int,int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesCreateEntity(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesFillPaint(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesLabelFont(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesLabelPaint(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesLabelVisible(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesOutlinePaint(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesOutlineStroke(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesPaint(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesShape(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesStroke(int)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultCreateEntity(java.lang.Boolean)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultFillPaint(java.awt.Paint)": 0.045267873021259265,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultLabelFont(java.awt.Font)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultLabelPaint(java.awt.Paint)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultLabelVisible(java.lang.Boolean)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultOutlinePaint(java.awt.Paint)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultOutlineStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultPaint(java.awt.Paint)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultShape(java.awt.Shape)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesCreateEntity(int,java.lang.Boolean)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesFillPaint(int,java.awt.Paint)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesLabelFont(int,java.awt.Font)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesLabelPaint(int,java.awt.Paint)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesLabelVisible(int,java.lang.Boolean)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesOutlinePaint(int,java.awt.Paint)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesOutlineStroke(int,java.awt.Stroke)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesPaint(int,java.awt.Paint)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesShape(int,java.awt.Shape)": 0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesStroke(int,java.awt.Stroke)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#AbstractCategoryItemRenderer()": 0.06375767130633382,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.category.CategoryDataset,int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.category.CategoryDataset,int,int,boolean,double,double)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#clone()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#createHotSpotBounds(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#createHotSpotShape(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.renderer.category.CategoryItemRendererState)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,boolean,double,double,boolean)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseItemLabelGenerator()": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseToolTipGenerator()": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseURLGenerator()": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getColumnCount()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getDomainAxis(org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getDrawingSupplier()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getItemLabelGenerator(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItem(int,int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemLabelGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemToolTipGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemURLGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItems()": 0.16222142113076254,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getPassCount()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getPlot()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getRangeAxis(org.jfree.chart.plot.CategoryPlot,int)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getRowCount()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesItemLabelGenerator(int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesURLGenerator(int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getToolTipGenerator(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getURLGenerator(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#hashCode()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#hitTest(double,double,java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.renderer.category.CategoryItemRendererState)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#removeAnnotations()": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setPlot(org.jfree.chart.plot.CategoryPlot)": 0.09853292781642932,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CategoryCrosshairState,java.lang.Comparable,java.lang.Comparable,double,int,double,double,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#<clinit>()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#BarRenderer()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarL0L1(double,double,double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.data.category.CategoryDataset,org.jfree.chart.renderer.category.CategoryItemRendererState)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#createHotSpotBounds(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,int)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#drawItemLabelForBar(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getBarPainter()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getBase()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getDefaultBarPainter()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getDefaultShadowsVisible()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getGradientPaintTransformer()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getIncludeBaseInRange()": 0,
        "org.jfree.chart.renderer.category$BarRenderer#getItemMargin()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getLegendItem(int,int)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getMaximumBarWidth()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getMinimumBarLength()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getNegativeItemLabelPositionFallback()": 0,
        "org.jfree.chart.renderer.category$BarRenderer#getPositiveItemLabelPositionFallback()": 0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowPaint()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowXOffset()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowYOffset()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowsVisible()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#isDrawBarOutline()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setBarPainter(org.jfree.chart.renderer.category.BarPainter)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setBase(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setDefaultBarPainter(org.jfree.chart.renderer.category.BarPainter)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#setDefaultShadowsVisible(boolean)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#setDrawBarOutline(boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setIncludeBaseInRange(boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setItemMargin(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setMaximumBarWidth(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setMinimumBarLength(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowXOffset(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowYOffset(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#LineAndShapeRenderer()": 0.1889822365046136,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#LineAndShapeRenderer(boolean,boolean)": 0.14002800840280097,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#clone()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,int)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getBaseLinesVisible()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getBaseShapesFilled()": 0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getBaseShapesVisible()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getDrawOutlines()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getItemLineVisible(int,int)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getItemMargin()": 0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getItemShapeFilled(int,int)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getItemShapeVisible(int,int)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getLegendItem(int,int)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getPassCount()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getSeriesLinesVisible(int)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getSeriesShapesFilled(int)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getSeriesShapesVisible(int)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getUseFillPaint()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getUseOutlinePaint()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getUseSeriesOffset()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setBaseLinesVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setBaseShapesFilled(boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setBaseShapesVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setDrawOutlines(boolean)": 0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setItemMargin(double)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesLinesVisible(int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesShapesFilled(int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesShapesVisible(int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setUseFillPaint(boolean)": 0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setUseOutlinePaint(boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setUseSeriesOffset(boolean)": 0.0,
        "org.jfree.chart.text$TextAnchor#<clinit>()": 0.040723148118768406,
        "org.jfree.chart.text$TextAnchor#TextAnchor(java.lang.String)": 0.040723148118768406,
        "org.jfree.chart.text$TextAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextAnchor#hashCode()": 0.0,
        "org.jfree.chart.text$TextAnchor#readResolve()": 0.0,
        "org.jfree.chart.text$TextAnchor#toString()": 0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.04116934847963091,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.04116934847963091,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": 0.04116934847963091,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#clone()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#get(int)": 0.060522753266880246,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": 0.0716114874039433,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": 0.06063390625908324,
        "org.jfree.chart.util$AbstractObjectList#size()": 0.046274481338274755,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$BooleanList#BooleanList()": 0.045083481733371615,
        "org.jfree.chart.util$BooleanList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$BooleanList#getBoolean(int)": 0.0,
        "org.jfree.chart.util$BooleanList#hashCode()": 0.0,
        "org.jfree.chart.util$BooleanList#setBoolean(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#DefaultShadowGenerator()": 0.08084520834544433,
        "org.jfree.chart.util$DefaultShadowGenerator#DefaultShadowGenerator(int,java.awt.Color,float,int,double)": 0.08058229640253803,
        "org.jfree.chart.util$DefaultShadowGenerator#applyShadow(java.awt.image.BufferedImage)": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#calculateOffsetX()": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#calculateOffsetY()": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#createDropShadow(java.awt.image.BufferedImage)": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#getAngle()": 0,
        "org.jfree.chart.util$DefaultShadowGenerator#getDistance()": 0,
        "org.jfree.chart.util$DefaultShadowGenerator#getShadowColor()": 0,
        "org.jfree.chart.util$DefaultShadowGenerator#getShadowOpacity()": 0,
        "org.jfree.chart.util$DefaultShadowGenerator#getShadowSize()": 0,
        "org.jfree.chart.util$DefaultShadowGenerator#hashCode()": 0,
        "org.jfree.chart.util$GradientPaintTransformType#<clinit>()": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#GradientPaintTransformType(java.lang.String)": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#hashCode()": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#readResolve()": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#toString()": 0,
        "org.jfree.chart.util$ObjectList#ObjectList()": 0.04192218081503185,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0,
        "org.jfree.chart.util$ObjectList#get(int)": 0.06495698024616309,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": 0.0716114874039433,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": 0.06482037235521644,
        "org.jfree.chart.util$PaintList#PaintList()": 0.04481107149482209,
        "org.jfree.chart.util$PaintList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$PaintList#getPaint(int)": 0.0,
        "org.jfree.chart.util$PaintList#hashCode()": 0.0,
        "org.jfree.chart.util$PaintList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$PaintList#setPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.util$PaintList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 0.04490132550669373,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 0.04647394123401731,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": 0.04490132550669373,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#getBottom()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getLeft()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getRight()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getTop()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": 0.0,
        "org.jfree.chart.util$ResourceBundleWrapper#ResourceBundleWrapper()": 0,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String)": 0.0563436169819011,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String,java.util.Locale)": 0,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)": 0,
        "org.jfree.chart.util$ResourceBundleWrapper#removeCodeBase(java.net.URL,java.net.URLClassLoader)": 0,
        "org.jfree.chart.util$ShapeList#ShapeList()": 0.04512936824065242,
        "org.jfree.chart.util$ShapeList#clone()": 0.0,
        "org.jfree.chart.util$ShapeList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ShapeList#getShape(int)": 0.0,
        "org.jfree.chart.util$ShapeList#hashCode()": 0,
        "org.jfree.chart.util$ShapeList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$ShapeList#setShape(int,java.awt.Shape)": 0.0,
        "org.jfree.chart.util$ShapeList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$SortOrder#<clinit>()": 0.08980265101338746,
        "org.jfree.chart.util$SortOrder#SortOrder(java.lang.String)": 0.08980265101338746,
        "org.jfree.chart.util$SortOrder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$SortOrder#hashCode()": 0,
        "org.jfree.chart.util$SortOrder#readResolve()": 0.0,
        "org.jfree.chart.util$SortOrder#toString()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#StandardGradientPaintTransformer()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#StandardGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformType)": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#clone()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#getType()": 0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#hashCode()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)": 0.0,
        "org.jfree.chart.util$StrokeList#StrokeList()": 0.04490132550669373,
        "org.jfree.chart.util$StrokeList#clone()": 0.0,
        "org.jfree.chart.util$StrokeList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$StrokeList#getStroke(int)": 0.0,
        "org.jfree.chart.util$StrokeList#hashCode()": 0.0,
        "org.jfree.chart.util$StrokeList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$StrokeList#setStroke(int,java.awt.Stroke)": 0.0,
        "org.jfree.chart.util$StrokeList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$UnitType#<clinit>()": 0.04458779620677098,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": 0.04458779620677098,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$UnitType#hashCode()": 0,
        "org.jfree.chart.util$UnitType#readResolve()": 0.0,
        "org.jfree.chart.util$UnitType#toString()": 0,
        "org.jfree.data$KeyedObject#KeyedObject(java.lang.Comparable,java.lang.Object)": 0.06454972243679027,
        "org.jfree.data$KeyedObject#clone()": 0.0,
        "org.jfree.data$KeyedObject#equals(java.lang.Object)": 0.0,
        "org.jfree.data$KeyedObject#getKey()": 0.0,
        "org.jfree.data$KeyedObject#getObject()": 0.0,
        "org.jfree.data$KeyedObject#setObject(java.lang.Object)": 0.0,
        "org.jfree.data$KeyedObjects#KeyedObjects()": 0.06415002990995841,
        "org.jfree.data$KeyedObjects#addObject(java.lang.Comparable,java.lang.Object)": 0.0,
        "org.jfree.data$KeyedObjects#clear()": 0.0,
        "org.jfree.data$KeyedObjects#clone()": 0.0,
        "org.jfree.data$KeyedObjects#equals(java.lang.Object)": 0.0,
        "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)": 0.06509445549041194,
        "org.jfree.data$KeyedObjects#getItemCount()": 0.0,
        "org.jfree.data$KeyedObjects#getKey(int)": 0.0,
        "org.jfree.data$KeyedObjects#getKeys()": 0.0,
        "org.jfree.data$KeyedObjects#getObject(int)": 0.0,
        "org.jfree.data$KeyedObjects#getObject(java.lang.Comparable)": 0.0,
        "org.jfree.data$KeyedObjects#hashCode()": 0,
        "org.jfree.data$KeyedObjects#insertValue(int,java.lang.Comparable,java.lang.Object)": 0,
        "org.jfree.data$KeyedObjects#removeValue(int)": 0.0,
        "org.jfree.data$KeyedObjects#removeValue(java.lang.Comparable)": 0.0,
        "org.jfree.data$KeyedObjects#setObject(java.lang.Comparable,java.lang.Object)": 0.06509445549041194,
        "org.jfree.data$KeyedObjects#sortByKeys(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.data$KeyedObjects#sortByObjects(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.data$KeyedObjects2D#KeyedObjects2D()": 0.06804138174397717,
        "org.jfree.data$KeyedObjects2D#addObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)": 0.07432941462471664,
        "org.jfree.data$KeyedObjects2D#clear()": 0.0,
        "org.jfree.data$KeyedObjects2D#clone()": 0.0,
        "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)": 0.0,
        "org.jfree.data$KeyedObjects2D#getColumnCount()": 0.0,
        "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data$KeyedObjects2D#getColumnKey(int)": 0.0,
        "org.jfree.data$KeyedObjects2D#getColumnKeys()": 0.0,
        "org.jfree.data$KeyedObjects2D#getObject(int,int)": 0.0,
        "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data$KeyedObjects2D#getRowCount()": 0.0,
        "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data$KeyedObjects2D#getRowKey(int)": 0.0,
        "org.jfree.data$KeyedObjects2D#getRowKeys()": 0.0,
        "org.jfree.data$KeyedObjects2D#hashCode()": 0,
        "org.jfree.data$KeyedObjects2D#removeColumn(int)": 0.0,
        "org.jfree.data$KeyedObjects2D#removeColumn(java.lang.Comparable)": 0.0,
        "org.jfree.data$KeyedObjects2D#removeObject(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data$KeyedObjects2D#removeRow(int)": 0.0,
        "org.jfree.data$KeyedObjects2D#removeRow(java.lang.Comparable)": 0.0,
        "org.jfree.data$KeyedObjects2D#setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)": 0.07142857142857142,
        "org.jfree.data$SelectableValue#SelectableValue(java.lang.Number)": 0.07715167498104596,
        "org.jfree.data$SelectableValue#SelectableValue(java.lang.Number,boolean)": 0.07715167498104596,
        "org.jfree.data$SelectableValue#getValue()": 0.0,
        "org.jfree.data$SelectableValue#isSelected()": 0.0,
        "org.jfree.data$SelectableValue#setSelected(boolean)": 0,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": 0.0,
        "org.jfree.data.category$AbstractCategoryDataset#AbstractCategoryDataset()": 0.079555728417573,
        "org.jfree.data.category$AbstractCategoryDataset#getSelectionState()": 0.0,
        "org.jfree.data.category$AbstractCategoryDataset#setSelectionState(org.jfree.data.category.CategoryDatasetSelectionState)": 0.079555728417573,
        "org.jfree.data.category$DefaultCategoryDataset#DefaultCategoryDataset()": 0.079555728417573,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)": 0.10369516947304253,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.086710996952412,
        "org.jfree.data.category$DefaultCategoryDataset#clear()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#clearSelection()": 0,
        "org.jfree.data.category$DefaultCategoryDataset#clone()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#equals(java.lang.Object)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#fireSelectionEvent()": 0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnCount()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKey(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKeys()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowCount()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKey(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKeys()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(int,int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#hashCode()": 0,
        "org.jfree.data.category$DefaultCategoryDataset#incrementValue(double,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#isSelected(int,int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(int)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(int)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#setSelected(int,int,boolean)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#setSelected(int,int,boolean,boolean)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.event$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset,org.jfree.chart.event.DatasetChangeInfo)": 0.0409272754535029,
        "org.jfree.data.event$DatasetChangeEvent#getDataset()": 0,
        "org.jfree.data.event$DatasetChangeEvent#getInfo()": 0,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.040723148118768406,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.event.DatasetChangeListener)": 0.05965499862718936,
        "org.jfree.data.general$AbstractDataset#clone()": 0.0,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged(org.jfree.chart.event.DatasetChangeInfo)": 0.04360207201969474,
        "org.jfree.data.general$AbstractDataset#getGroup()": 0.0,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.event.DatasetChangeEvent)": 0.04360207201969474,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.event.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0,
        "org.jfree.data.general$AbstractDataset#validateObject()": 0.0,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": 0.04068942293855797,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0,
        "org.jfree.data.general$DatasetGroup#clone()": 0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$DatasetGroup#getID()": 0
    },
    "Chart-10": {},
    "Chart-11": {
        "org.jfree.chart.util$ShapeUtilities#<clinit>()": 0.06154574548966636,
        "org.jfree.chart.util$ShapeUtilities#ShapeUtilities()": 0,
        "org.jfree.chart.util$ShapeUtilities#clone(java.awt.Shape)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$ShapeUtilities#createDiagonalCross(float,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createDiamond(float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createDownTriangle(float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createLineRegion(java.awt.geom.Line2D,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createRegularCross(float,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,double,double)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createUpTriangle(float)": 0,
        "org.jfree.chart.util$ShapeUtilities#drawRotatedShape(java.awt.Graphics2D,java.awt.Shape,double,float,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Polygon,java.awt.Polygon)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)": 0.25,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Line2D,java.awt.geom.Line2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#getPointInRectangle(double,double,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$ShapeUtilities#intersects(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#rotateShape(java.awt.Shape,double,float,float)": 0.0
    },
    "Chart-12": {
        "org.jfree.chart$ChartColor#<clinit>()": 0.06108472217815261,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 0.06108472217815261,
        "org.jfree.chart$JFreeChart#<clinit>()": 0.07692307692307693,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)": 0.07881104062391006,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,org.jfree.chart.plot.Plot)": 0,
        "org.jfree.chart$JFreeChart#JFreeChart(org.jfree.chart.plot.Plot)": 0.13483997249264842,
        "org.jfree.chart$JFreeChart#addChangeListener(org.jfree.chart.event.ChartChangeListener)": 0.0,
        "org.jfree.chart$JFreeChart#addLegend(org.jfree.chart.title.LegendTitle)": 0,
        "org.jfree.chart$JFreeChart#addProgressListener(org.jfree.chart.event.ChartProgressListener)": 0.0,
        "org.jfree.chart$JFreeChart#addSubtitle(int,org.jfree.chart.title.Title)": 0.0,
        "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)": 0.0,
        "org.jfree.chart$JFreeChart#clearSubtitles()": 0,
        "org.jfree.chart$JFreeChart#clone()": 0,
        "org.jfree.chart$JFreeChart#createAlignedRectangle2D(org.jfree.chart.util.Size2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,double,double,org.jfree.chart.ChartRenderingInfo)": 0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)": 0,
        "org.jfree.chart$JFreeChart#drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart$JFreeChart#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$JFreeChart#fireChartChanged()": 0.3779644730092272,
        "org.jfree.chart$JFreeChart#getAntiAlias()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundImage()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlignment()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlpha()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundPaint()": 0,
        "org.jfree.chart$JFreeChart#getBorderPaint()": 0,
        "org.jfree.chart$JFreeChart#getBorderStroke()": 0,
        "org.jfree.chart$JFreeChart#getCategoryPlot()": 0,
        "org.jfree.chart$JFreeChart#getLegend()": 0.4082482904638631,
        "org.jfree.chart$JFreeChart#getLegend(int)": 0.4082482904638631,
        "org.jfree.chart$JFreeChart#getPadding()": 0,
        "org.jfree.chart$JFreeChart#getPlot()": 0.0,
        "org.jfree.chart$JFreeChart#getRenderingHints()": 0,
        "org.jfree.chart$JFreeChart#getSubtitle(int)": 0.0,
        "org.jfree.chart$JFreeChart#getSubtitleCount()": 0.0,
        "org.jfree.chart$JFreeChart#getSubtitles()": 0.0,
        "org.jfree.chart$JFreeChart#getTextAntiAlias()": 0,
        "org.jfree.chart$JFreeChart#getTitle()": 0.0,
        "org.jfree.chart$JFreeChart#getXYPlot()": 0,
        "org.jfree.chart$JFreeChart#handleClick(int,int,org.jfree.chart.ChartRenderingInfo)": 0,
        "org.jfree.chart$JFreeChart#isBorderVisible()": 0.0,
        "org.jfree.chart$JFreeChart#isNotify()": 0,
        "org.jfree.chart$JFreeChart#main(java.lang.String[])": 0,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)": 0.11180339887498948,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartProgressEvent)": 0.0,
        "org.jfree.chart$JFreeChart#plotChanged(org.jfree.chart.event.PlotChangeEvent)": 0.0,
        "org.jfree.chart$JFreeChart#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$JFreeChart#removeChangeListener(org.jfree.chart.event.ChartChangeListener)": 0.0,
        "org.jfree.chart$JFreeChart#removeLegend()": 0.5,
        "org.jfree.chart$JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)": 0.0,
        "org.jfree.chart$JFreeChart#removeSubtitle(org.jfree.chart.title.Title)": 0.5,
        "org.jfree.chart$JFreeChart#setAntiAlias(boolean)": 0,
        "org.jfree.chart$JFreeChart#setBackgroundImage(java.awt.Image)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlignment(int)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlpha(float)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundPaint(java.awt.Paint)": 0.4472135954999579,
        "org.jfree.chart$JFreeChart#setBorderPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$JFreeChart#setBorderStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart$JFreeChart#setBorderVisible(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setNotify(boolean)": 0,
        "org.jfree.chart$JFreeChart#setPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart$JFreeChart#setRenderingHints(java.awt.RenderingHints)": 0.0,
        "org.jfree.chart$JFreeChart#setSubtitles(java.util.List)": 0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(boolean)": 0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(java.lang.Object)": 0,
        "org.jfree.chart$JFreeChart#setTitle(java.lang.String)": 0.0,
        "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)": 0.4472135954999579,
        "org.jfree.chart$JFreeChart#titleChanged(org.jfree.chart.event.TitleChangeEvent)": 0.0,
        "org.jfree.chart$JFreeChart#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart$PaintMap#PaintMap()": 0.15075567228888181,
        "org.jfree.chart$PaintMap#clear()": 0,
        "org.jfree.chart$PaintMap#clone()": 0.0,
        "org.jfree.chart$PaintMap#containsKey(java.lang.Comparable)": 0,
        "org.jfree.chart$PaintMap#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart$PaintMap#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$PaintMap#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart$StrokeMap#StrokeMap()": 0.15249857033260467,
        "org.jfree.chart$StrokeMap#clear()": 0,
        "org.jfree.chart$StrokeMap#clone()": 0.0,
        "org.jfree.chart$StrokeMap#containsKey(java.lang.Comparable)": 0,
        "org.jfree.chart$StrokeMap#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)": 0.0,
        "org.jfree.chart$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)": 0.0,
        "org.jfree.chart$StrokeMap#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$StrokeMap#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$AbstractBlock#AbstractBlock()": 0.06868028197434452,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$AbstractBlock#calculateTotalHeight(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#calculateTotalWidth(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#clone()": 0.0,
        "org.jfree.chart.block$AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$AbstractBlock#getBounds()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getContentXOffset()": 0,
        "org.jfree.chart.block$AbstractBlock#getContentYOffset()": 0,
        "org.jfree.chart.block$AbstractBlock#getFrame()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getHeight()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getID()": 0,
        "org.jfree.chart.block$AbstractBlock#getMargin()": 0,
        "org.jfree.chart.block$AbstractBlock#getPadding()": 0,
        "org.jfree.chart.block$AbstractBlock#getWidth()": 0.0,
        "org.jfree.chart.block$AbstractBlock#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setBounds(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setFrame(org.jfree.chart.block.BlockFrame)": 0.08333333333333333,
        "org.jfree.chart.block$AbstractBlock#setHeight(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setID(java.lang.String)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setMargin(double,double,double,double)": 0,
        "org.jfree.chart.block$AbstractBlock#setMargin(org.jfree.chart.util.RectangleInsets)": 0.08333333333333333,
        "org.jfree.chart.block$AbstractBlock#setPadding(double,double,double,double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)": 0.07198157507486945,
        "org.jfree.chart.block$AbstractBlock#setWidth(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimBorder(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimMargin(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimPadding(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$AbstractBlock#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$BlockBorder#<clinit>()": 0.06819943394704735,
        "org.jfree.chart.block$BlockBorder#BlockBorder()": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double)": 0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double,java.awt.Paint)": 0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(java.awt.Paint)": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(org.jfree.chart.util.RectangleInsets,java.awt.Paint)": 0.06819943394704735,
        "org.jfree.chart.block$BlockBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$BlockBorder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockBorder#getInsets()": 0.0,
        "org.jfree.chart.block$BlockBorder#getPaint()": 0,
        "org.jfree.chart.block$BlockBorder#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$BlockBorder#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$BlockContainer#BlockContainer()": 0.0,
        "org.jfree.chart.block$BlockContainer#BlockContainer(org.jfree.chart.block.Arrangement)": 0.07980868844676221,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block)": 0.0,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$BlockContainer#clear()": 0.0,
        "org.jfree.chart.block$BlockContainer#clone()": 0.0,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockContainer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockContainer#getArrangement()": 0,
        "org.jfree.chart.block$BlockContainer#getBlocks()": 0.0,
        "org.jfree.chart.block$BlockContainer#isEmpty()": 0.0,
        "org.jfree.chart.block$BlockContainer#setArrangement(org.jfree.chart.block.Arrangement)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement()": 0.08247860988423225,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#clear()": 0,
        "org.jfree.chart.block$ColumnArrangement#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement()": 0.08164965809277261,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": 0.08084520834544433,
        "org.jfree.chart.block$FlowArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#clear()": 0.0,
        "org.jfree.chart.block$FlowArrangement#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$LineBorder#LineBorder()": 0.08362420100070908,
        "org.jfree.chart.block$LineBorder#LineBorder(java.awt.Paint,java.awt.Stroke,org.jfree.chart.util.RectangleInsets)": 0.08304547985373997,
        "org.jfree.chart.block$LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$LineBorder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$LineBorder#getInsets()": 0.0,
        "org.jfree.chart.block$LineBorder#getPaint()": 0.0,
        "org.jfree.chart.block$LineBorder#getStroke()": 0.0,
        "org.jfree.chart.block$LineBorder#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$LineBorder#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#clone()": 0.0,
        "org.jfree.chart.entity$ChartEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getArea()": 0,
        "org.jfree.chart.entity$ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)": 0,
        "org.jfree.chart.entity$ChartEntity#getPolyCoords(java.awt.Shape)": 0,
        "org.jfree.chart.entity$ChartEntity#getRectCoords(java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.entity$ChartEntity#getShapeCoords()": 0,
        "org.jfree.chart.entity$ChartEntity#getShapeType()": 0,
        "org.jfree.chart.entity$ChartEntity#getToolTipText()": 0,
        "org.jfree.chart.entity$ChartEntity#getURLText()": 0,
        "org.jfree.chart.entity$ChartEntity#hashCode()": 0,
        "org.jfree.chart.entity$ChartEntity#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setArea(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#toString()": 0,
        "org.jfree.chart.entity$ChartEntity#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#PieSectionEntity(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getDataset()": 0,
        "org.jfree.chart.entity$PieSectionEntity#getPieIndex()": 0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionIndex()": 0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionKey()": 0,
        "org.jfree.chart.entity$PieSectionEntity#setDataset(org.jfree.data.general.PieDataset)": 0,
        "org.jfree.chart.entity$PieSectionEntity#setPieIndex(int)": 0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionIndex(int)": 0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionKey(java.lang.Comparable)": 0,
        "org.jfree.chart.entity$PieSectionEntity#toString()": 0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.04397994971335425,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": 0.04397994971335425,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.04397994971335425,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": 0.04397994971335425,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0,
        "org.jfree.chart.event$TitleChangeEvent#TitleChangeEvent(org.jfree.chart.title.Title)": 0.08219949365267865,
        "org.jfree.chart.event$TitleChangeEvent#getTitle()": 0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#AbstractPieItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.15249857033260467,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#clone()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getLabelFormat()": 0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getNumberFormat()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getPercentFormat()": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator()": 0.15811388300841897,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.15811388300841897,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.util.Locale)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.util.Locale)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#clone()": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#getAttributedLabel(int)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#setAttributedLabel(int,java.text.AttributedString)": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#AbstractPieLabelDistributor()": 0.1643989873053573,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#clear()": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getItemCount()": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getPieLabelRecord(int)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 0.06108472217815261,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 0.06108472217815261,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.06108472217815261,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 0.06108472217815261,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": 0.06108472217815261,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": 0.06108472217815261,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot()": 0.5773502691896258,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot(org.jfree.data.category.CategoryDataset)": 0.5,
        "org.jfree.chart.plot$MultiplePiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$MultiplePiePlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsKey()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsPaint()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataExtractOrder()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataset()": 1.0,
        "org.jfree.chart.plot$MultiplePiePlot#getLegendItems()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getLimit()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getPieChart()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getPlotType()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#prefetchSectionPaints()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setDataset(org.jfree.data.category.CategoryDataset)": 0,
        "org.jfree.chart.plot$MultiplePiePlot#setLimit(double)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setPieChart(org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#PieLabelDistributor(int)": 0.1643989873053573,
        "org.jfree.chart.plot$PieLabelDistributor#adjustDownwards(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#adjustInwards()": 0,
        "org.jfree.chart.plot$PieLabelDistributor#adjustUpwards(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#distributeLabels(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#isOverlap()": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#sort()": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#spreadEvenly(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#toString()": 0,
        "org.jfree.chart.plot$PieLabelLinkStyle#<clinit>()": 0.1643989873053573,
        "org.jfree.chart.plot$PieLabelLinkStyle#PieLabelLinkStyle(java.lang.String)": 0.1643989873053573,
        "org.jfree.chart.plot$PieLabelLinkStyle#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PieLabelLinkStyle#hashCode()": 0,
        "org.jfree.chart.plot$PieLabelLinkStyle#readResolve()": 0.0,
        "org.jfree.chart.plot$PieLabelLinkStyle#toString()": 0.0,
        "org.jfree.chart.plot$PiePlot#<clinit>()": 0.1643989873053573,
        "org.jfree.chart.plot$PiePlot#PiePlot()": 0.0,
        "org.jfree.chart.plot$PiePlot#PiePlot(org.jfree.data.general.PieDataset)": 0.1643989873053573,
        "org.jfree.chart.plot$PiePlot#clone()": 0.0,
        "org.jfree.chart.plot$PiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": 0,
        "org.jfree.chart.plot$PiePlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PiePlot#getArcBounds(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double,double)": 0.0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlinePaint()": 0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlineStroke()": 0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getDataset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getDirection()": 0.0,
        "org.jfree.chart.plot$PiePlot#getExplodePercent(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getIgnoreNullValues()": 0,
        "org.jfree.chart.plot$PiePlot#getIgnoreZeroValues()": 0,
        "org.jfree.chart.plot$PiePlot#getInteriorGap()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelBackgroundPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelDistributor()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelFont()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelGap()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkMargin()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStroke()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStyle()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinksVisible()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlinePaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlineStroke()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelPadding()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelShadowPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLegendItemShape()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelGenerator()": 0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelToolTipGenerator()": 0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelURLGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getMaximumExplodePercent()": 0.0,
        "org.jfree.chart.plot$PiePlot#getMaximumLabelWidth()": 0.0,
        "org.jfree.chart.plot$PiePlot#getMinimumArcAngleToDraw()": 0.0,
        "org.jfree.chart.plot$PiePlot#getPieIndex()": 0,
        "org.jfree.chart.plot$PiePlot#getPlotType()": 0,
        "org.jfree.chart.plot$PiePlot#getSectionKey(int)": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinePaint(java.lang.Comparable)": 0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlineStroke(java.lang.Comparable)": 0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinesVisible()": 0,
        "org.jfree.chart.plot$PiePlot#getSectionPaint(java.lang.Comparable)": 0,
        "org.jfree.chart.plot$PiePlot#getShadowPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getShadowXOffset()": 0,
        "org.jfree.chart.plot$PiePlot#getShadowYOffset()": 0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabelOffset()": 0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabels()": 0.0,
        "org.jfree.chart.plot$PiePlot#getStartAngle()": 0.0,
        "org.jfree.chart.plot$PiePlot#getToolTipGenerator()": 0,
        "org.jfree.chart.plot$PiePlot#getURLGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PiePlot#isCircular()": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setBaseSectionPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setDataset(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.chart.plot$PiePlot#setDirection(org.jfree.chart.util.Rotation)": 0.0,
        "org.jfree.chart.plot$PiePlot#setExplodePercent(java.lang.Comparable,double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setIgnoreNullValues(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setIgnoreZeroValues(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setInteriorGap(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)": 0,
        "org.jfree.chart.plot$PiePlot#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelGap(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinkMargin(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinkPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)": 0,
        "org.jfree.chart.plot$PiePlot#setLabelLinksVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelPadding(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.plot$PiePlot#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelShadowPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendItemShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setMaximumLabelWidth(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setMinimumArcAngleToDraw(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setPieIndex(int)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionPaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setShadowPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setShadowXOffset(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setShadowYOffset(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.plot$PiePlot#setSimpleLabels(boolean)": 0,
        "org.jfree.chart.plot$PiePlot#setStartAngle(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setURLGenerator(org.jfree.chart.urls.PieURLGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$Plot#<clinit>()": 0.06142951168339512,
        "org.jfree.chart.plot$Plot#Plot()": 0.06142951168339512,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.07372097807744857,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#clone()": 0.0,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#fireChangeEvent()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": 0.0,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": 0.0,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getInsets()": 0.0,
        "org.jfree.chart.plot$Plot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": 0.0,
        "org.jfree.chart.plot$Plot#getParent()": 0.0,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": 0,
        "org.jfree.chart.plot$Plot#isSubplot()": 0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.0,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": 0.0,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$Plot#zoom(double)": 0,
        "org.jfree.chart.resources$JFreeChartResources#<clinit>()": 0.07692307692307693,
        "org.jfree.chart.resources$JFreeChartResources#JFreeChartResources()": 0.07692307692307693,
        "org.jfree.chart.resources$JFreeChartResources#getContents()": 0.07692307692307693,
        "org.jfree.chart.title$LegendTitle#<clinit>()": 0.0827605888602368,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource)": 0.0827605888602368,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)": 0.0827605888602368,
        "org.jfree.chart.title$LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.title$LegendTitle#createLegendItemBlock(org.jfree.chart.LegendItem)": 0.0,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.title$LegendTitle#equals(java.lang.Object)": 0.25,
        "org.jfree.chart.title$LegendTitle#fetchLegendItems()": 0.0,
        "org.jfree.chart.title$LegendTitle#getBackgroundPaint()": 0,
        "org.jfree.chart.title$LegendTitle#getItemContainer()": 0,
        "org.jfree.chart.title$LegendTitle#getItemFont()": 0,
        "org.jfree.chart.title$LegendTitle#getItemLabelPadding()": 0,
        "org.jfree.chart.title$LegendTitle#getItemPaint()": 0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicAnchor()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicEdge()": 0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicLocation()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicPadding()": 0,
        "org.jfree.chart.title$LegendTitle#getSources()": 0.0,
        "org.jfree.chart.title$LegendTitle#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$LegendTitle#setBackgroundPaint(java.awt.Paint)": 0.08333333333333333,
        "org.jfree.chart.title$LegendTitle#setItemFont(java.awt.Font)": 0.0,
        "org.jfree.chart.title$LegendTitle#setItemLabelPadding(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.title$LegendTitle#setItemPaint(java.awt.Paint)": 0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicAnchor(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicLocation(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.title$LegendTitle#setSources(org.jfree.chart.LegendItemSource[])": 0,
        "org.jfree.chart.title$LegendTitle#setWrapper(org.jfree.chart.block.BlockContainer)": 0,
        "org.jfree.chart.title$LegendTitle#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.title$TextTitle#<clinit>()": 0.08980265101338746,
        "org.jfree.chart.title$TextTitle#TextTitle()": 0.0,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font)": 0.09534625892455924,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 0.08980265101338746,
        "org.jfree.chart.title$TextTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.title$TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)": 0.0,
        "org.jfree.chart.title$TextTitle#clone()": 0.0,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.title$TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$TextTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$TextTitle#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$TextTitle#getBackgroundPaint()": 0,
        "org.jfree.chart.title$TextTitle#getExpandToFitSpace()": 0,
        "org.jfree.chart.title$TextTitle#getFont()": 0,
        "org.jfree.chart.title$TextTitle#getPaint()": 0,
        "org.jfree.chart.title$TextTitle#getText()": 0,
        "org.jfree.chart.title$TextTitle#getTextAlignment()": 0,
        "org.jfree.chart.title$TextTitle#getToolTipText()": 0,
        "org.jfree.chart.title$TextTitle#getURLText()": 0,
        "org.jfree.chart.title$TextTitle#hashCode()": 0.0,
        "org.jfree.chart.title$TextTitle#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$TextTitle#setBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$TextTitle#setExpandToFitSpace(boolean)": 0,
        "org.jfree.chart.title$TextTitle#setFont(java.awt.Font)": 0.0,
        "org.jfree.chart.title$TextTitle#setPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$TextTitle#setText(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#setTextAlignment(org.jfree.chart.util.HorizontalAlignment)": 0.0,
        "org.jfree.chart.title$TextTitle#setToolTipText(java.lang.String)": 0,
        "org.jfree.chart.title$TextTitle#setURLText(java.lang.String)": 0,
        "org.jfree.chart.title$TextTitle#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.title$Title#<clinit>()": 0.07312724241271307,
        "org.jfree.chart.title$Title#Title()": 0.08058229640253803,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 0,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 0.07312724241271307,
        "org.jfree.chart.title$Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)": 0.07881104062391006,
        "org.jfree.chart.title$Title#clone()": 0.0,
        "org.jfree.chart.title$Title#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$Title#getHorizontalAlignment()": 0.0,
        "org.jfree.chart.title$Title#getNotify()": 0,
        "org.jfree.chart.title$Title#getPosition()": 0.0,
        "org.jfree.chart.title$Title#getVerticalAlignment()": 0,
        "org.jfree.chart.title$Title#hashCode()": 0.0,
        "org.jfree.chart.title$Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)": 0.08219949365267865,
        "org.jfree.chart.title$Title#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)": 0.0,
        "org.jfree.chart.title$Title#setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)": 0.0,
        "org.jfree.chart.title$Title#setNotify(boolean)": 0,
        "org.jfree.chart.title$Title#setPosition(org.jfree.chart.util.RectangleEdge)": 0.08362420100070908,
        "org.jfree.chart.title$Title#setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)": 0.0,
        "org.jfree.chart.title$Title#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo()": 0.07692307692307693,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#addLibrary(org.jfree.chart.ui.Library)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(java.lang.String)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(org.jfree.chart.ui.Library)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#getCopyright()": 0,
        "org.jfree.chart.ui$BasicProjectInfo#getLibraries()": 0,
        "org.jfree.chart.ui$BasicProjectInfo#getOptionalLibraries()": 0,
        "org.jfree.chart.ui$BasicProjectInfo#setCopyright(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$BasicProjectInfo#setInfo(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$BasicProjectInfo#setLicenceName(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$BasicProjectInfo#setName(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$BasicProjectInfo#setVersion(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$Contributor#Contributor(java.lang.String,java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$Contributor#getEmail()": 0,
        "org.jfree.chart.ui$Contributor#getName()": 0,
        "org.jfree.chart.ui$Library#Library()": 0.07692307692307693,
        "org.jfree.chart.ui$Library#Library(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$Library#equals(java.lang.Object)": 0,
        "org.jfree.chart.ui$Library#getInfo()": 0,
        "org.jfree.chart.ui$Library#getLicenceName()": 0,
        "org.jfree.chart.ui$Library#getName()": 0,
        "org.jfree.chart.ui$Library#getVersion()": 0,
        "org.jfree.chart.ui$Library#hashCode()": 0,
        "org.jfree.chart.ui$Library#setInfo(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$Library#setLicenceName(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$Library#setName(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$Library#setVersion(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$Licences#Licences()": 0.07692307692307693,
        "org.jfree.chart.ui$Licences#getGPL()": 0,
        "org.jfree.chart.ui$Licences#getInstance()": 0.07692307692307693,
        "org.jfree.chart.ui$Licences#getLGPL()": 0.07692307692307693,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo()": 0.07692307692307693,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$ProjectInfo#getContributors()": 0,
        "org.jfree.chart.ui$ProjectInfo#getLicenceText()": 0,
        "org.jfree.chart.ui$ProjectInfo#getLogo()": 0.0,
        "org.jfree.chart.ui$ProjectInfo#setContributors(java.util.List)": 0.07692307692307693,
        "org.jfree.chart.ui$ProjectInfo#setLicenceText(java.lang.String)": 0.07692307692307693,
        "org.jfree.chart.ui$ProjectInfo#setLogo(java.awt.Image)": 0.07692307692307693,
        "org.jfree.chart.ui$ProjectInfo#toString()": 0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.044946657497549475,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.044946657497549475,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": 0.044946657497549475,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0,
        "org.jfree.chart.util$AbstractObjectList#clone()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#get(int)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#size()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#<clinit>()": 0.06984302957695782,
        "org.jfree.chart.util$HorizontalAlignment#HorizontalAlignment(java.lang.String)": 0.06984302957695782,
        "org.jfree.chart.util$HorizontalAlignment#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#hashCode()": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#readResolve()": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#toString()": 0,
        "org.jfree.chart.util$ObjectList#ObjectList()": 0.045738935374634825,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0,
        "org.jfree.chart.util$ObjectList#get(int)": 0.0,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#<clinit>()": 0.06237828615518053,
        "org.jfree.chart.util$RectangleAnchor#RectangleAnchor(java.lang.String)": 0.06237828615518053,
        "org.jfree.chart.util$RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleAnchor#readResolve()": 0.0,
        "org.jfree.chart.util$RectangleAnchor#toString()": 0,
        "org.jfree.chart.util$RectangleEdge#<clinit>()": 0.0716114874039433,
        "org.jfree.chart.util$RectangleEdge#RectangleEdge(java.lang.String)": 0.0716114874039433,
        "org.jfree.chart.util$RectangleEdge#coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.util$RectangleEdge#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleEdge#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#opposite(org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.util$RectangleEdge#readResolve()": 0.0,
        "org.jfree.chart.util$RectangleEdge#toString()": 0,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 0.048112522432468816,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 0.04920678313051229,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": 0.048112522432468816,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#getBottom()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getLeft()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getRight()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getTop()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": 0.0,
        "org.jfree.chart.util$Rotation#<clinit>()": 0.15617376188860607,
        "org.jfree.chart.util$Rotation#Rotation(java.lang.String,double)": 0.15617376188860607,
        "org.jfree.chart.util$Rotation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$Rotation#getFactor()": 0.0,
        "org.jfree.chart.util$Rotation#hashCode()": 0,
        "org.jfree.chart.util$Rotation#readResolve()": 0.0,
        "org.jfree.chart.util$Rotation#toString()": 0,
        "org.jfree.chart.util$TableOrder#<clinit>()": 0.2672612419124244,
        "org.jfree.chart.util$TableOrder#TableOrder(java.lang.String)": 0.2672612419124244,
        "org.jfree.chart.util$TableOrder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$TableOrder#hashCode()": 0,
        "org.jfree.chart.util$TableOrder#readResolve()": 0.0,
        "org.jfree.chart.util$TableOrder#toString()": 0,
        "org.jfree.chart.util$UnitType#<clinit>()": 0.04778184825674966,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": 0.04778184825674966,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$UnitType#hashCode()": 0,
        "org.jfree.chart.util$UnitType#readResolve()": 0.0,
        "org.jfree.chart.util$UnitType#toString()": 0,
        "org.jfree.chart.util$VerticalAlignment#<clinit>()": 0.0716114874039433,
        "org.jfree.chart.util$VerticalAlignment#VerticalAlignment(java.lang.String)": 0.0716114874039433,
        "org.jfree.chart.util$VerticalAlignment#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$VerticalAlignment#hashCode()": 0.0,
        "org.jfree.chart.util$VerticalAlignment#readResolve()": 0.0,
        "org.jfree.chart.util$VerticalAlignment#toString()": 0,
        "org.jfree.data$DefaultKeyedValues2D#DefaultKeyedValues2D()": 0.08391813582966891,
        "org.jfree.data$DefaultKeyedValues2D#DefaultKeyedValues2D(boolean)": 0.08111071056538127,
        "org.jfree.data$DefaultKeyedValues2D#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#clear()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#clone()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getColumnCount()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getColumnKeys()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getRowCount()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getRowKeys()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#hashCode()": 0,
        "org.jfree.data$DefaultKeyedValues2D#removeColumn(int)": 0,
        "org.jfree.data$DefaultKeyedValues2D#removeColumn(java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#removeRow(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#removeRow(java.lang.Comparable)": 0,
        "org.jfree.data$DefaultKeyedValues2D#removeValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#DefaultCategoryDataset()": 0.0890870806374748,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#clear()": 0,
        "org.jfree.data.category$DefaultCategoryDataset#clone()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#equals(java.lang.Object)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnCount()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKey(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKeys()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowCount()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowIndex(java.lang.Comparable)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKey(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKeys()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(int,int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#hashCode()": 0,
        "org.jfree.data.category$DefaultCategoryDataset#incrementValue(double,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(int)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(int)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(java.lang.Comparable)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#removeValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.045267873021259265,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#clone()": 0.0,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged()": 0.0,
        "org.jfree.data.general$AbstractDataset#getGroup()": 0.0,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": 0.5773502691896258,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0,
        "org.jfree.data.general$AbstractDataset#validateObject()": 0.0,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": 0.0,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": 0.045221563164613454,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0,
        "org.jfree.data.general$DatasetGroup#clone()": 0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$DatasetGroup#getID()": 0
    },
    "Chart-14": {
        "org.jfree.chart$ChartColor#<clinit>()": 0.12239801227242092,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 0.12239801227242092,
        "org.jfree.chart.axis$Axis#<clinit>()": 0.0,
        "org.jfree.chart.axis$Axis#Axis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)": 0.0,
        "org.jfree.chart.axis$Axis#clone()": 0.0,
        "org.jfree.chart.axis$Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$Axis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$Axis#getAxisLinePaint()": 0.0,
        "org.jfree.chart.axis$Axis#getAxisLineStroke()": 0.0,
        "org.jfree.chart.axis$Axis#getFixedDimension()": 0.0,
        "org.jfree.chart.axis$Axis#getLabel()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelAngle()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$Axis#getLabelFont()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelInsets()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelToolTip()": 0,
        "org.jfree.chart.axis$Axis#getLabelURL()": 0,
        "org.jfree.chart.axis$Axis#getPlot()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelFont()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelInsets()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkInsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkOutsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkStroke()": 0.0,
        "org.jfree.chart.axis$Axis#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.chart.axis$Axis#isAxisLineVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isTickLabelsVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isTickMarksVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isVisible()": 0.0,
        "org.jfree.chart.axis$Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)": 0.0,
        "org.jfree.chart.axis$Axis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLineVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setFixedDimension(double)": 0.0,
        "org.jfree.chart.axis$Axis#setLabel(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelAngle(double)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelToolTip(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelURL(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setPlot(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelsVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkInsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkOutsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarksVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$AxisLocation#<clinit>()": 0.13968605915391563,
        "org.jfree.chart.axis$AxisLocation#AxisLocation(java.lang.String)": 0.13968605915391563,
        "org.jfree.chart.axis$AxisLocation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$AxisLocation#getOpposite()": 0,
        "org.jfree.chart.axis$AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)": 0,
        "org.jfree.chart.axis$AxisLocation#readResolve()": 0.0,
        "org.jfree.chart.axis$AxisLocation#toString()": 0.0,
        "org.jfree.chart.axis$CategoryAnchor#<clinit>()": 0.09090909090909091,
        "org.jfree.chart.axis$CategoryAnchor#CategoryAnchor(java.lang.String)": 0.09090909090909091,
        "org.jfree.chart.axis$CategoryAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$CategoryAnchor#readResolve()": 0.0,
        "org.jfree.chart.axis$CategoryAnchor#toString()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#clearCategoryLabelToolTips()": 0,
        "org.jfree.chart.axis$CategoryAxis#clone()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#configure()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositionOffset()": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositions()": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelToolTip(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getLowerMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelLines()": 0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelWidthRatio()": 0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelFont(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getUpperMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#readPaintMap(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)": 0,
        "org.jfree.chart.axis$CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositionOffset(int)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setLowerMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelLines(int)": 0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelWidthRatio(float)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setUpperMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$DateAxis#<clinit>()": 0.0,
        "org.jfree.chart.axis$DateAxis#DateAxis()": 0.0,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String,java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateAxis#autoAdjustRange()": 0.0,
        "org.jfree.chart.axis$DateAxis#calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)": 0.0,
        "org.jfree.chart.axis$DateAxis#calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": 0,
        "org.jfree.chart.axis$DateAxis#calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#clone()": 0.0,
        "org.jfree.chart.axis$DateAxis#configure()": 0.0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits()": 0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits(java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateAxis#dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$DateAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": 0,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#getDateFormatOverride()": 0.0,
        "org.jfree.chart.axis$DateAxis#getMaximumDate()": 0.0,
        "org.jfree.chart.axis$DateAxis#getMinimumDate()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTickMarkPosition()": 0,
        "org.jfree.chart.axis$DateAxis#getTickUnit()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTimeZone()": 0,
        "org.jfree.chart.axis$DateAxis#getTimeline()": 0,
        "org.jfree.chart.axis$DateAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$DateAxis#isHiddenValue(long)": 0.0,
        "org.jfree.chart.axis$DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#setDateFormatOverride(java.text.DateFormat)": 0.0,
        "org.jfree.chart.axis$DateAxis#setMaximumDate(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis#setMinimumDate(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(double,double)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(java.util.Date,java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTimeZone(java.util.TimeZone)": 0,
        "org.jfree.chart.axis$DateAxis#setTimeline(org.jfree.chart.axis.Timeline)": 0.0,
        "org.jfree.chart.axis$DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#zoomRange(double,double)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#DateAxis$DefaultTimeline()": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(java.util.Date,java.util.Date)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(long,long)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(long)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toMillisecond(long)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(long)": 0.0,
        "org.jfree.chart.axis$NumberAxis#<clinit>()": 0.0,
        "org.jfree.chart.axis$NumberAxis#NumberAxis()": 0.0,
        "org.jfree.chart.axis$NumberAxis#NumberAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$NumberAxis#autoAdjustRange()": 0.0,
        "org.jfree.chart.axis$NumberAxis#calculateHighestVisibleTickValue()": 0,
        "org.jfree.chart.axis$NumberAxis#calculateLowestVisibleTickValue()": 0.0,
        "org.jfree.chart.axis$NumberAxis#calculateVisibleTickCount()": 0.0,
        "org.jfree.chart.axis$NumberAxis#clone()": 0.0,
        "org.jfree.chart.axis$NumberAxis#configure()": 0.0,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits()": 0.0,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits(java.util.Locale)": 0,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits()": 0.0,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits(java.util.Locale)": 0,
        "org.jfree.chart.axis$NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$NumberAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)": 0.0,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeIncludesZero()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeStickyZero()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getMarkerBand()": 0,
        "org.jfree.chart.axis$NumberAxis#getNumberFormatOverride()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getRangeType()": 0,
        "org.jfree.chart.axis$NumberAxis#getTickUnit()": 0.0,
        "org.jfree.chart.axis$NumberAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeIncludesZero(boolean)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeStickyZero(boolean)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)": 0,
        "org.jfree.chart.axis$NumberAxis#setNumberFormatOverride(java.text.NumberFormat)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setRangeType(org.jfree.data.RangeType)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#<clinit>()": 0.0,
        "org.jfree.chart.axis$ValueAxis#ValueAxis(java.lang.String,org.jfree.chart.axis.TickUnitSource)": 0.0,
        "org.jfree.chart.axis$ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#centerRange(double)": 0,
        "org.jfree.chart.axis$ValueAxis#clone()": 0.0,
        "org.jfree.chart.axis$ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$ValueAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#getAutoRangeMinimumSize()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getAutoTickIndex()": 0,
        "org.jfree.chart.axis$ValueAxis#getDefaultAutoRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getDownArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getFixedAutoRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLeftArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getLowerBound()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLowerMargin()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getRightArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getStandardTickUnits()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getUpperBound()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpperMargin()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isAutoRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isAutoTickUnitSelection()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isInverted()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isNegativeArrowVisible()": 0,
        "org.jfree.chart.axis$ValueAxis#isPositiveArrowVisible()": 0,
        "org.jfree.chart.axis$ValueAxis#isVerticalTickLabels()": 0.0,
        "org.jfree.chart.axis$ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double)": 0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickIndex(int)": 0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setDefaultAutoRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setDownArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setFixedAutoRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setInverted(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLeftArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setLowerBound(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLowerMargin(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setNegativeArrowVisible(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setPositiveArrowVisible(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeAboutValue(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)": 0,
        "org.jfree.chart.axis$ValueAxis#setRightArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setUpperBound(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpperMargin(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setVerticalTickLabels(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$ValueAxis#zoomRange(double,double)": 0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.08813052984784635,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": 0.08813052984784635,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": 0.13900960937138318,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.08813052984784635,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": 0.08813052984784635,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0,
        "org.jfree.chart.event$MarkerChangeEvent#MarkerChangeEvent(org.jfree.chart.plot.Marker)": 0.08703882797784893,
        "org.jfree.chart.event$MarkerChangeEvent#getMarker()": 0.0,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": 0.1259881576697424,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0,
        "org.jfree.chart.plot$CategoryMarker#CategoryMarker(java.lang.Comparable)": 0.20412414523193154,
        "org.jfree.chart.plot$CategoryMarker#CategoryMarker(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)": 0.17677669529663687,
        "org.jfree.chart.plot$CategoryMarker#CategoryMarker(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.17677669529663687,
        "org.jfree.chart.plot$CategoryMarker#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$CategoryMarker#getDrawAsLine()": 0.0,
        "org.jfree.chart.plot$CategoryMarker#getKey()": 0.0,
        "org.jfree.chart.plot$CategoryMarker#setDrawAsLine(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryMarker#setKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#<clinit>()": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot()": 0.30151134457776363,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearAnnotations()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainAxes()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeAxes()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clone()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#configureDomainAxes()": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#configureRangeAxes()": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToRangeAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAnchorValue()": 0,
        "org.jfree.chart.plot$CategoryPlot#getAnnotations()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAxisOffset()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCategories()": 0,
        "org.jfree.chart.plot$CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getColumnRenderingOrder()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataset()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDataset(int)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#getDatasetCount()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisCount()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePosition()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlineStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#getDrawSharedDomainAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedDomainAxisSpace()": 0,
        "org.jfree.chart.plot$CategoryPlot#getFixedLegendItems()": 0,
        "org.jfree.chart.plot$CategoryPlot#getFixedRangeAxisSpace()": 0,
        "org.jfree.chart.plot$CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getOrientation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getPlotType()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis(int)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisCount()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairPaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairValue()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRowRenderingOrder()": 0,
        "org.jfree.chart.plot$CategoryPlot#getWeight()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$CategoryPlot#isDomainGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainZoomable()": 0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairLockedOnData()": 0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeZoomable()": 0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxis(int,int)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxis(int,int)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.5,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.5,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0.5,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.5,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.5,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.5,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0.5,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.5,
        "org.jfree.chart.plot$CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDrawSharedDomainAxis(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.09667364890456635,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setWeight(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoom(double)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$DatasetRenderingOrder#<clinit>()": 0.1421338109037403,
        "org.jfree.chart.plot$DatasetRenderingOrder#DatasetRenderingOrder(java.lang.String)": 0.1421338109037403,
        "org.jfree.chart.plot$DatasetRenderingOrder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#hashCode()": 0,
        "org.jfree.chart.plot$DatasetRenderingOrder#readResolve()": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#toString()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 0.12239801227242092,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 0.12239801227242092,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.12239801227242092,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 0.12239801227242092,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": 0.12239801227242092,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": 0.12239801227242092,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#clone()": 0.0,
        "org.jfree.chart.plot$IntervalMarker#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#getEndValue()": 0.0,
        "org.jfree.chart.plot$IntervalMarker#getGradientPaintTransformer()": 0,
        "org.jfree.chart.plot$IntervalMarker#getStartValue()": 0.0,
        "org.jfree.chart.plot$IntervalMarker#setEndValue(double)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#setStartValue(double)": 0.0,
        "org.jfree.chart.plot$Marker#Marker()": 0.2651650429449553,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint)": 0.2651650429449553,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.16783627165933782,
        "org.jfree.chart.plot$Marker#addChangeListener(org.jfree.chart.event.MarkerChangeListener)": 0.08804509063256238,
        "org.jfree.chart.plot$Marker#clone()": 0.0,
        "org.jfree.chart.plot$Marker#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$Marker#getAlpha()": 0.0,
        "org.jfree.chart.plot$Marker#getLabel()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelAnchor()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelFont()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelOffset()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelOffsetType()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelPaint()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelTextAnchor()": 0.0,
        "org.jfree.chart.plot$Marker#getListeners(java.lang.Class)": 0.0,
        "org.jfree.chart.plot$Marker#getOutlinePaint()": 0.0,
        "org.jfree.chart.plot$Marker#getOutlineStroke()": 0.0,
        "org.jfree.chart.plot$Marker#getPaint()": 0.0,
        "org.jfree.chart.plot$Marker#getStroke()": 0.0,
        "org.jfree.chart.plot$Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)": 0.08703882797784893,
        "org.jfree.chart.plot$Marker#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)": 0.0,
        "org.jfree.chart.plot$Marker#setAlpha(float)": 0.0,
        "org.jfree.chart.plot$Marker#setLabel(java.lang.String)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelAnchor(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)": 0.12126781251816648,
        "org.jfree.chart.plot$Marker#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelTextAnchor(org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.plot$Marker#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Marker#setPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#setStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Marker#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$Plot#<clinit>()": 0.12309149097933272,
        "org.jfree.chart.plot$Plot#Plot()": 0.12309149097933272,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.0,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#clone()": 0.0,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#fireChangeEvent()": 0.06772854614785964,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": 0.0,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": 0.0,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getInsets()": 0.0,
        "org.jfree.chart.plot$Plot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": 0.0,
        "org.jfree.chart.plot$Plot#getParent()": 0.14071950894605836,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": 0,
        "org.jfree.chart.plot$Plot#isSubplot()": 0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": 0.1259881576697424,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.0,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": 0.0,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$Plot#zoom(double)": 0,
        "org.jfree.chart.plot$PlotOrientation#<clinit>()": 0.13900960937138318,
        "org.jfree.chart.plot$PlotOrientation#PlotOrientation(java.lang.String)": 0.13900960937138318,
        "org.jfree.chart.plot$PlotOrientation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PlotOrientation#hashCode()": 0,
        "org.jfree.chart.plot$PlotOrientation#readResolve()": 0.0,
        "org.jfree.chart.plot$PlotOrientation#toString()": 0.0,
        "org.jfree.chart.plot$SeriesRenderingOrder#<clinit>()": 0.10482848367219183,
        "org.jfree.chart.plot$SeriesRenderingOrder#SeriesRenderingOrder(java.lang.String)": 0.10482848367219183,
        "org.jfree.chart.plot$SeriesRenderingOrder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$SeriesRenderingOrder#hashCode()": 0,
        "org.jfree.chart.plot$SeriesRenderingOrder#readResolve()": 0.0,
        "org.jfree.chart.plot$SeriesRenderingOrder#toString()": 0.0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double)": 0.2651650429449553,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke)": 0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.09622504486493763,
        "org.jfree.chart.plot$ValueMarker#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$ValueMarker#getValue()": 0.0,
        "org.jfree.chart.plot$ValueMarker#setValue(double)": 0.0,
        "org.jfree.chart.plot$XYPlot#<clinit>()": 0.10482848367219183,
        "org.jfree.chart.plot$XYPlot#XYPlot()": 0.22360679774997896,
        "org.jfree.chart.plot$XYPlot#XYPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)": 0.10482848367219183,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0.0,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#clearAnnotations()": 0,
        "org.jfree.chart.plot$XYPlot#clearDomainAxes()": 0,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#clearRangeAxes()": 0,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#clone()": 0.0,
        "org.jfree.chart.plot$XYPlot#configureDomainAxes()": 0.10482848367219183,
        "org.jfree.chart.plot$XYPlot#configureRangeAxes()": 0.10482848367219183,
        "org.jfree.chart.plot$XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.10482848367219183,
        "org.jfree.chart.plot$XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$XYPlot#getAnnotations()": 0.0,
        "org.jfree.chart.plot$XYPlot#getAxisOffset()": 0,
        "org.jfree.chart.plot$XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDataset()": 0,
        "org.jfree.chart.plot$XYPlot#getDataset(int)": 0.10482848367219183,
        "org.jfree.chart.plot$XYPlot#getDatasetCount()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDatasetRenderingOrder()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToRangeAxis(java.lang.Integer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxis()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisCount()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairPaint()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairValue()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainGridlinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainGridlineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#getDomainTickBandPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselinePaint()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselineStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getFixedDomainAxisSpace()": 0,
        "org.jfree.chart.plot$XYPlot#getFixedLegendItems()": 0,
        "org.jfree.chart.plot$XYPlot#getFixedRangeAxisSpace()": 0,
        "org.jfree.chart.plot$XYPlot#getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)": 0,
        "org.jfree.chart.plot$XYPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$XYPlot#getOrientation()": 0.0,
        "org.jfree.chart.plot$XYPlot#getPlotType()": 0,
        "org.jfree.chart.plot$XYPlot#getQuadrantOrigin()": 0.0,
        "org.jfree.chart.plot$XYPlot#getQuadrantPaint(int)": 0,
        "org.jfree.chart.plot$XYPlot#getRangeAxis()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxis(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisCount()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairPaint()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairValue()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeGridlinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeGridlineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#getRangeTickBandPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselinePaint()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselineStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getRenderer()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRenderer(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRendererForDataset(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#getSeriesCount()": 0,
        "org.jfree.chart.plot$XYPlot#getSeriesRenderingOrder()": 0.0,
        "org.jfree.chart.plot$XYPlot#getWeight()": 0.0,
        "org.jfree.chart.plot$XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$XYPlot#indexOf(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainZeroBaselineVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainZoomable()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeZeroBaselineVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeZoomable()": 0.0,
        "org.jfree.chart.plot$XYPlot#mapDatasetToDomainAxis(int,int)": 0.10482848367219183,
        "org.jfree.chart.plot$XYPlot#mapDatasetToRangeAxis(int,int)": 0.10482848367219183,
        "org.jfree.chart.plot$XYPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.5,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.5,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0.5,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.5,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.5,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.5,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0.5,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.5,
        "org.jfree.chart.plot$XYPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)": 0.0,
        "org.jfree.chart.plot$XYPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.0,
        "org.jfree.chart.plot$XYPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDataset(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairLockedOnData(boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairPaint(java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainTickBandPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselinePaint(java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineVisible(boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setQuadrantOrigin(java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#setQuadrantPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeTickBandPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])": 0,
        "org.jfree.chart.plot$XYPlot#setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)": 0,
        "org.jfree.chart.plot$XYPlot#setWeight(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.text$TextAnchor#<clinit>()": 0.08821621827824618,
        "org.jfree.chart.text$TextAnchor#TextAnchor(java.lang.String)": 0.08821621827824618,
        "org.jfree.chart.text$TextAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextAnchor#hashCode()": 0.0,
        "org.jfree.chart.text$TextAnchor#readResolve()": 0.0,
        "org.jfree.chart.text$TextAnchor#toString()": 0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.09007546982220899,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.09007546982220899,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": 0.09007546982220899,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0,
        "org.jfree.chart.util$AbstractObjectList#clone()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#get(int)": 0.13018891098082389,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": 0.12936924547063017,
        "org.jfree.chart.util$AbstractObjectList#size()": 0.09667364890456635,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$Layer#<clinit>()": 0.16963778593599418,
        "org.jfree.chart.util$Layer#Layer(java.lang.String)": 0.16963778593599418,
        "org.jfree.chart.util$Layer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$Layer#hashCode()": 0,
        "org.jfree.chart.util$Layer#readResolve()": 0,
        "org.jfree.chart.util$Layer#toString()": 0,
        "org.jfree.chart.util$LengthAdjustmentType#<clinit>()": 0.16783627165933782,
        "org.jfree.chart.util$LengthAdjustmentType#LengthAdjustmentType(java.lang.String)": 0.16783627165933782,
        "org.jfree.chart.util$LengthAdjustmentType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#hashCode()": 0,
        "org.jfree.chart.util$LengthAdjustmentType#readResolve()": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#toString()": 0,
        "org.jfree.chart.util$ObjectList#ObjectList()": 0.09166984970282113,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0,
        "org.jfree.chart.util$ObjectList#get(int)": 0.13834289277321493,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": 0.13801311186847084,
        "org.jfree.chart.util$RectangleAnchor#<clinit>()": 0.125,
        "org.jfree.chart.util$RectangleAnchor#RectangleAnchor(java.lang.String)": 0.125,
        "org.jfree.chart.util$RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleAnchor#readResolve()": 0.0,
        "org.jfree.chart.util$RectangleAnchor#toString()": 0,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 0.0963366101718176,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 0.09853292781642932,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": 0.0963366101718176,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#getBottom()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getLeft()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getRight()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getTop()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": 0.0,
        "org.jfree.chart.util$SortOrder#<clinit>()": 0.0949157995752499,
        "org.jfree.chart.util$SortOrder#SortOrder(java.lang.String)": 0.0949157995752499,
        "org.jfree.chart.util$SortOrder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$SortOrder#hashCode()": 0,
        "org.jfree.chart.util$SortOrder#readResolve()": 0.0,
        "org.jfree.chart.util$SortOrder#toString()": 0.0,
        "org.jfree.chart.util$UnitType#<clinit>()": 0.09567297464698797,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": 0.09567297464698797,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$UnitType#hashCode()": 0,
        "org.jfree.chart.util$UnitType#readResolve()": 0.0,
        "org.jfree.chart.util$UnitType#toString()": 0,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": 0.09254896267654951,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0,
        "org.jfree.data.time$Day#<clinit>()": 0.0,
        "org.jfree.data.time$Day#Day()": 0.0,
        "org.jfree.data.time$Day#Day(int,int,int)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#getDayOfMonth()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#getMonth()": 0.0,
        "org.jfree.data.time$Day#getSerialDate()": 0.0,
        "org.jfree.data.time$Day#getSerialIndex()": 0.0,
        "org.jfree.data.time$Day#getYear()": 0.0,
        "org.jfree.data.time$Day#hashCode()": 0.0,
        "org.jfree.data.time$Day#next()": 0.0,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#previous()": 0.0,
        "org.jfree.data.time$Day#toString()": 0,
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getStart()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0
    },
    "Chart-15": {
        "org.jfree.chart$ChartColor#<clinit>()": 0.061898446059017294,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 0.061898446059017294,
        "org.jfree.chart$ChartFactory#ChartFactory()": 0,
        "org.jfree.chart$ChartFactory#createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)": 0,
        "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)": 0,
        "org.jfree.chart$ChartFactory#createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)": 0,
        "org.jfree.chart$ChartFactory#createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)": 0,
        "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)": 0,
        "org.jfree.chart$ChartFactory#createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 0.5,
        "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0,
        "org.jfree.chart$ChartFactory#createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0,
        "org.jfree.chart$ChartFactory#createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$JFreeChart#<clinit>()": 0.07715167498104596,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)": 0.07905694150420949,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,org.jfree.chart.plot.Plot)": 0,
        "org.jfree.chart$JFreeChart#JFreeChart(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart$JFreeChart#addChangeListener(org.jfree.chart.event.ChartChangeListener)": 0.0,
        "org.jfree.chart$JFreeChart#addLegend(org.jfree.chart.title.LegendTitle)": 0,
        "org.jfree.chart$JFreeChart#addProgressListener(org.jfree.chart.event.ChartProgressListener)": 0.0,
        "org.jfree.chart$JFreeChart#addSubtitle(int,org.jfree.chart.title.Title)": 0.0,
        "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)": 0.0,
        "org.jfree.chart$JFreeChart#clearSubtitles()": 0,
        "org.jfree.chart$JFreeChart#clone()": 0,
        "org.jfree.chart$JFreeChart#createAlignedRectangle2D(org.jfree.chart.util.Size2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 0.125,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,double,double,org.jfree.chart.ChartRenderingInfo)": 0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)": 0.125,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)": 0,
        "org.jfree.chart$JFreeChart#drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.125,
        "org.jfree.chart$JFreeChart#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$JFreeChart#fireChartChanged()": 0.0,
        "org.jfree.chart$JFreeChart#getAntiAlias()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundImage()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlignment()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlpha()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundPaint()": 0,
        "org.jfree.chart$JFreeChart#getBorderPaint()": 0,
        "org.jfree.chart$JFreeChart#getBorderStroke()": 0,
        "org.jfree.chart$JFreeChart#getCategoryPlot()": 0,
        "org.jfree.chart$JFreeChart#getLegend()": 0.0,
        "org.jfree.chart$JFreeChart#getLegend(int)": 0.0,
        "org.jfree.chart$JFreeChart#getPadding()": 0,
        "org.jfree.chart$JFreeChart#getPlot()": 0.0,
        "org.jfree.chart$JFreeChart#getRenderingHints()": 0,
        "org.jfree.chart$JFreeChart#getSubtitle(int)": 0.0,
        "org.jfree.chart$JFreeChart#getSubtitleCount()": 0.0,
        "org.jfree.chart$JFreeChart#getSubtitles()": 0.0,
        "org.jfree.chart$JFreeChart#getTextAntiAlias()": 0,
        "org.jfree.chart$JFreeChart#getTitle()": 0.0,
        "org.jfree.chart$JFreeChart#getXYPlot()": 0,
        "org.jfree.chart$JFreeChart#handleClick(int,int,org.jfree.chart.ChartRenderingInfo)": 0,
        "org.jfree.chart$JFreeChart#isBorderVisible()": 0.125,
        "org.jfree.chart$JFreeChart#isNotify()": 0,
        "org.jfree.chart$JFreeChart#main(java.lang.String[])": 0,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)": 0.0,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartProgressEvent)": 0.125,
        "org.jfree.chart$JFreeChart#plotChanged(org.jfree.chart.event.PlotChangeEvent)": 0.0,
        "org.jfree.chart$JFreeChart#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$JFreeChart#removeChangeListener(org.jfree.chart.event.ChartChangeListener)": 0.0,
        "org.jfree.chart$JFreeChart#removeLegend()": 0.0,
        "org.jfree.chart$JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)": 0.0,
        "org.jfree.chart$JFreeChart#removeSubtitle(org.jfree.chart.title.Title)": 0.0,
        "org.jfree.chart$JFreeChart#setAntiAlias(boolean)": 0,
        "org.jfree.chart$JFreeChart#setBackgroundImage(java.awt.Image)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlignment(int)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlpha(float)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$JFreeChart#setBorderPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$JFreeChart#setBorderStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart$JFreeChart#setBorderVisible(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setNotify(boolean)": 0,
        "org.jfree.chart$JFreeChart#setPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart$JFreeChart#setRenderingHints(java.awt.RenderingHints)": 0.0,
        "org.jfree.chart$JFreeChart#setSubtitles(java.util.List)": 0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(boolean)": 0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(java.lang.Object)": 0,
        "org.jfree.chart$JFreeChart#setTitle(java.lang.String)": 0.0,
        "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)": 0.0,
        "org.jfree.chart$JFreeChart#titleChanged(org.jfree.chart.event.TitleChangeEvent)": 0.0,
        "org.jfree.chart$JFreeChart#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart$LegendItemCollection#LegendItemCollection()": 0.12216944435630522,
        "org.jfree.chart$LegendItemCollection#add(org.jfree.chart.LegendItem)": 0.0,
        "org.jfree.chart$LegendItemCollection#addAll(org.jfree.chart.LegendItemCollection)": 0,
        "org.jfree.chart$LegendItemCollection#clone()": 0.0,
        "org.jfree.chart$LegendItemCollection#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$LegendItemCollection#get(int)": 0.0,
        "org.jfree.chart$LegendItemCollection#getItemCount()": 0.125,
        "org.jfree.chart$LegendItemCollection#iterator()": 0,
        "org.jfree.chart$PaintMap#PaintMap()": 0.15249857033260467,
        "org.jfree.chart$PaintMap#clear()": 0,
        "org.jfree.chart$PaintMap#clone()": 0.0,
        "org.jfree.chart$PaintMap#containsKey(java.lang.Comparable)": 0,
        "org.jfree.chart$PaintMap#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart$PaintMap#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$PaintMap#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart$StrokeMap#StrokeMap()": 0.1543033499620919,
        "org.jfree.chart$StrokeMap#clear()": 0,
        "org.jfree.chart$StrokeMap#clone()": 0.0,
        "org.jfree.chart$StrokeMap#containsKey(java.lang.Comparable)": 0,
        "org.jfree.chart$StrokeMap#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)": 0.0,
        "org.jfree.chart$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)": 0.0,
        "org.jfree.chart$StrokeMap#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$StrokeMap#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$Axis#<clinit>()": 0.0,
        "org.jfree.chart.axis$Axis#Axis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)": 0.0,
        "org.jfree.chart.axis$Axis#clone()": 0.0,
        "org.jfree.chart.axis$Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$Axis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$Axis#getAxisLinePaint()": 0.0,
        "org.jfree.chart.axis$Axis#getAxisLineStroke()": 0.0,
        "org.jfree.chart.axis$Axis#getFixedDimension()": 0.0,
        "org.jfree.chart.axis$Axis#getLabel()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelAngle()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$Axis#getLabelFont()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelInsets()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelToolTip()": 0,
        "org.jfree.chart.axis$Axis#getLabelURL()": 0,
        "org.jfree.chart.axis$Axis#getPlot()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelFont()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelInsets()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkInsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkOutsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkStroke()": 0.0,
        "org.jfree.chart.axis$Axis#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.chart.axis$Axis#isAxisLineVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isTickLabelsVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isTickMarksVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isVisible()": 0.0,
        "org.jfree.chart.axis$Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)": 0.0,
        "org.jfree.chart.axis$Axis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLineVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setFixedDimension(double)": 0.0,
        "org.jfree.chart.axis$Axis#setLabel(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelAngle(double)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelToolTip(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelURL(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setPlot(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelsVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkInsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkOutsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarksVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#clearCategoryLabelToolTips()": 0,
        "org.jfree.chart.axis$CategoryAxis#clone()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#configure()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositionOffset()": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositions()": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelToolTip(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getLowerMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelLines()": 0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelWidthRatio()": 0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelFont(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getUpperMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#readPaintMap(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)": 0,
        "org.jfree.chart.axis$CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositionOffset(int)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setLowerMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelLines(int)": 0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelWidthRatio(float)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setUpperMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#CategoryAxis3D()": 0,
        "org.jfree.chart.axis$CategoryAxis3D#CategoryAxis3D(java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#clone()": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#<clinit>()": 0.0,
        "org.jfree.chart.axis$DateAxis#DateAxis()": 0.0,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String,java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateAxis#autoAdjustRange()": 0.0,
        "org.jfree.chart.axis$DateAxis#calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)": 0.0,
        "org.jfree.chart.axis$DateAxis#calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": 0,
        "org.jfree.chart.axis$DateAxis#calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#clone()": 0.0,
        "org.jfree.chart.axis$DateAxis#configure()": 0.0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits()": 0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits(java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateAxis#dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$DateAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": 0,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#getDateFormatOverride()": 0.0,
        "org.jfree.chart.axis$DateAxis#getMaximumDate()": 0.0,
        "org.jfree.chart.axis$DateAxis#getMinimumDate()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTickMarkPosition()": 0,
        "org.jfree.chart.axis$DateAxis#getTickUnit()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTimeZone()": 0,
        "org.jfree.chart.axis$DateAxis#getTimeline()": 0,
        "org.jfree.chart.axis$DateAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$DateAxis#isHiddenValue(long)": 0.0,
        "org.jfree.chart.axis$DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#setDateFormatOverride(java.text.DateFormat)": 0.0,
        "org.jfree.chart.axis$DateAxis#setMaximumDate(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis#setMinimumDate(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(double,double)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(java.util.Date,java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTimeZone(java.util.TimeZone)": 0,
        "org.jfree.chart.axis$DateAxis#setTimeline(org.jfree.chart.axis.Timeline)": 0.0,
        "org.jfree.chart.axis$DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#zoomRange(double,double)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#DateAxis$DefaultTimeline()": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(java.util.Date,java.util.Date)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(long,long)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(long)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toMillisecond(long)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(long)": 0.0,
        "org.jfree.chart.axis$NumberAxis#<clinit>()": 0.0,
        "org.jfree.chart.axis$NumberAxis#NumberAxis()": 0.0,
        "org.jfree.chart.axis$NumberAxis#NumberAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$NumberAxis#autoAdjustRange()": 0.0,
        "org.jfree.chart.axis$NumberAxis#calculateHighestVisibleTickValue()": 0,
        "org.jfree.chart.axis$NumberAxis#calculateLowestVisibleTickValue()": 0.0,
        "org.jfree.chart.axis$NumberAxis#calculateVisibleTickCount()": 0.0,
        "org.jfree.chart.axis$NumberAxis#clone()": 0.0,
        "org.jfree.chart.axis$NumberAxis#configure()": 0.0,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits()": 0.0,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits(java.util.Locale)": 0,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits()": 0.0,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits(java.util.Locale)": 0,
        "org.jfree.chart.axis$NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$NumberAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)": 0.0,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeIncludesZero()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeStickyZero()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getMarkerBand()": 0,
        "org.jfree.chart.axis$NumberAxis#getNumberFormatOverride()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getRangeType()": 0,
        "org.jfree.chart.axis$NumberAxis#getTickUnit()": 0.0,
        "org.jfree.chart.axis$NumberAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeIncludesZero(boolean)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeStickyZero(boolean)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)": 0,
        "org.jfree.chart.axis$NumberAxis#setNumberFormatOverride(java.text.NumberFormat)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setRangeType(org.jfree.data.RangeType)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis3D#NumberAxis3D()": 0,
        "org.jfree.chart.axis$NumberAxis3D#NumberAxis3D(java.lang.String)": 0.0,
        "org.jfree.chart.axis$NumberAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$ValueAxis#<clinit>()": 0.0,
        "org.jfree.chart.axis$ValueAxis#ValueAxis(java.lang.String,org.jfree.chart.axis.TickUnitSource)": 0.0,
        "org.jfree.chart.axis$ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#centerRange(double)": 0,
        "org.jfree.chart.axis$ValueAxis#clone()": 0.0,
        "org.jfree.chart.axis$ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$ValueAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#getAutoRangeMinimumSize()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getAutoTickIndex()": 0,
        "org.jfree.chart.axis$ValueAxis#getDefaultAutoRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getDownArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getFixedAutoRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLeftArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getLowerBound()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLowerMargin()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getRightArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getStandardTickUnits()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getUpperBound()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpperMargin()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isAutoRange()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isAutoTickUnitSelection()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isInverted()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isNegativeArrowVisible()": 0,
        "org.jfree.chart.axis$ValueAxis#isPositiveArrowVisible()": 0,
        "org.jfree.chart.axis$ValueAxis#isVerticalTickLabels()": 0.0,
        "org.jfree.chart.axis$ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double)": 0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickIndex(int)": 0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setDefaultAutoRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setDownArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setFixedAutoRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setInverted(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLeftArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setLowerBound(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLowerMargin(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setNegativeArrowVisible(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setPositiveArrowVisible(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeAboutValue(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)": 0,
        "org.jfree.chart.axis$ValueAxis#setRightArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setUpperBound(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpperMargin(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setVerticalTickLabels(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$ValueAxis#zoomRange(double,double)": 0,
        "org.jfree.chart.block$AbstractBlock#AbstractBlock()": 0.06884283908215143,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$AbstractBlock#calculateTotalHeight(double)": 0.12403473458920847,
        "org.jfree.chart.block$AbstractBlock#calculateTotalWidth(double)": 0.12403473458920847,
        "org.jfree.chart.block$AbstractBlock#clone()": 0.0,
        "org.jfree.chart.block$AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.125,
        "org.jfree.chart.block$AbstractBlock#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$AbstractBlock#getBounds()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getContentXOffset()": 0,
        "org.jfree.chart.block$AbstractBlock#getContentYOffset()": 0,
        "org.jfree.chart.block$AbstractBlock#getFrame()": 0.1259881576697424,
        "org.jfree.chart.block$AbstractBlock#getHeight()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getID()": 0,
        "org.jfree.chart.block$AbstractBlock#getMargin()": 0,
        "org.jfree.chart.block$AbstractBlock#getPadding()": 0,
        "org.jfree.chart.block$AbstractBlock#getWidth()": 0.0,
        "org.jfree.chart.block$AbstractBlock#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setBounds(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setFrame(org.jfree.chart.block.BlockFrame)": 0.08362420100070908,
        "org.jfree.chart.block$AbstractBlock#setHeight(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setID(java.lang.String)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setMargin(double,double,double,double)": 0,
        "org.jfree.chart.block$AbstractBlock#setMargin(org.jfree.chart.util.RectangleInsets)": 0.08362420100070908,
        "org.jfree.chart.block$AbstractBlock#setPadding(double,double,double,double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)": 0.07216878364870323,
        "org.jfree.chart.block$AbstractBlock#setWidth(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)": 0.12403473458920847,
        "org.jfree.chart.block$AbstractBlock#trimBorder(java.awt.geom.Rectangle2D)": 0.125,
        "org.jfree.chart.block$AbstractBlock#trimMargin(java.awt.geom.Rectangle2D)": 0.125,
        "org.jfree.chart.block$AbstractBlock#trimPadding(java.awt.geom.Rectangle2D)": 0.125,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(double)": 0.125,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(org.jfree.data.Range)": 0.125,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(double)": 0.125,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(org.jfree.data.Range)": 0.125,
        "org.jfree.chart.block$AbstractBlock#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$BlockBorder#<clinit>()": 0.06835859270246633,
        "org.jfree.chart.block$BlockBorder#BlockBorder()": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double)": 0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double,java.awt.Paint)": 0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(java.awt.Paint)": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(org.jfree.chart.util.RectangleInsets,java.awt.Paint)": 0.06835859270246633,
        "org.jfree.chart.block$BlockBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.125,
        "org.jfree.chart.block$BlockBorder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockBorder#getInsets()": 0.12309149097933272,
        "org.jfree.chart.block$BlockBorder#getPaint()": 0,
        "org.jfree.chart.block$BlockBorder#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$BlockBorder#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$BlockContainer#BlockContainer()": 0.0,
        "org.jfree.chart.block$BlockContainer#BlockContainer(org.jfree.chart.block.Arrangement)": 0.08006407690254357,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block)": 0.0,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$BlockContainer#clear()": 0.12403473458920847,
        "org.jfree.chart.block$BlockContainer#clone()": 0.0,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.1259881576697424,
        "org.jfree.chart.block$BlockContainer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockContainer#getArrangement()": 0,
        "org.jfree.chart.block$BlockContainer#getBlocks()": 0.0,
        "org.jfree.chart.block$BlockContainer#isEmpty()": 0.1259881576697424,
        "org.jfree.chart.block$BlockContainer#setArrangement(org.jfree.chart.block.Arrangement)": 0.125,
        "org.jfree.chart.block$BlockParams#BlockParams()": 0.125,
        "org.jfree.chart.block$BlockParams#getGenerateEntities()": 0.125,
        "org.jfree.chart.block$BlockParams#getTranslateX()": 0,
        "org.jfree.chart.block$BlockParams#getTranslateY()": 0,
        "org.jfree.chart.block$BlockParams#setGenerateEntities(boolean)": 0.125,
        "org.jfree.chart.block$BlockParams#setTranslateX(double)": 0,
        "org.jfree.chart.block$BlockParams#setTranslateY(double)": 0,
        "org.jfree.chart.block$BlockResult#BlockResult()": 0.1259881576697424,
        "org.jfree.chart.block$BlockResult#getEntityCollection()": 0.15617376188860607,
        "org.jfree.chart.block$BlockResult#setEntityCollection(org.jfree.chart.entity.EntityCollection)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement()": 0.0827605888602368,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#clear()": 0,
        "org.jfree.chart.block$ColumnArrangement#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement()": 0.08192319205190406,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": 0.08111071056538127,
        "org.jfree.chart.block$FlowArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#clear()": 0.1259881576697424,
        "org.jfree.chart.block$FlowArrangement#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$LengthConstraintType#<clinit>()": 0.1203858530857692,
        "org.jfree.chart.block$LengthConstraintType#LengthConstraintType(java.lang.String)": 0.1203858530857692,
        "org.jfree.chart.block$LengthConstraintType#equals(java.lang.Object)": 0,
        "org.jfree.chart.block$LengthConstraintType#hashCode()": 0,
        "org.jfree.chart.block$LengthConstraintType#readResolve()": 0,
        "org.jfree.chart.block$LengthConstraintType#toString()": 0,
        "org.jfree.chart.block$LineBorder#LineBorder()": 0.08391813582966891,
        "org.jfree.chart.block$LineBorder#LineBorder(java.awt.Paint,java.awt.Stroke,org.jfree.chart.util.RectangleInsets)": 0.08333333333333333,
        "org.jfree.chart.block$LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.1259881576697424,
        "org.jfree.chart.block$LineBorder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$LineBorder#getInsets()": 0.1259881576697424,
        "org.jfree.chart.block$LineBorder#getPaint()": 0.0,
        "org.jfree.chart.block$LineBorder#getStroke()": 0.0,
        "org.jfree.chart.block$LineBorder#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$LineBorder#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#<clinit>()": 0.1203858530857692,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,double)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,org.jfree.data.Range)": 0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)": 0.1203858530857692,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(org.jfree.data.Range,double)": 0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(org.jfree.data.Range,org.jfree.data.Range)": 0,
        "org.jfree.chart.block$RectangleConstraint#calculateConstrainedSize(org.jfree.chart.util.Size2D)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#getHeight()": 0.12309149097933272,
        "org.jfree.chart.block$RectangleConstraint#getHeightConstraintType()": 0.12216944435630522,
        "org.jfree.chart.block$RectangleConstraint#getHeightRange()": 0.125,
        "org.jfree.chart.block$RectangleConstraint#getWidth()": 0.12309149097933272,
        "org.jfree.chart.block$RectangleConstraint#getWidthConstraintType()": 0.12216944435630522,
        "org.jfree.chart.block$RectangleConstraint#getWidthRange()": 0.125,
        "org.jfree.chart.block$RectangleConstraint#toFixedHeight(double)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toFixedWidth(double)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toRangeHeight(org.jfree.data.Range)": 0,
        "org.jfree.chart.block$RectangleConstraint#toRangeWidth(org.jfree.data.Range)": 0,
        "org.jfree.chart.block$RectangleConstraint#toString()": 0,
        "org.jfree.chart.block$RectangleConstraint#toUnconstrainedHeight()": 0,
        "org.jfree.chart.block$RectangleConstraint#toUnconstrainedWidth()": 0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#clone()": 0.0,
        "org.jfree.chart.entity$ChartEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getArea()": 0,
        "org.jfree.chart.entity$ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)": 0,
        "org.jfree.chart.entity$ChartEntity#getPolyCoords(java.awt.Shape)": 0,
        "org.jfree.chart.entity$ChartEntity#getRectCoords(java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.entity$ChartEntity#getShapeCoords()": 0,
        "org.jfree.chart.entity$ChartEntity#getShapeType()": 0,
        "org.jfree.chart.entity$ChartEntity#getToolTipText()": 0,
        "org.jfree.chart.entity$ChartEntity#getURLText()": 0,
        "org.jfree.chart.entity$ChartEntity#hashCode()": 0,
        "org.jfree.chart.entity$ChartEntity#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setArea(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#toString()": 0,
        "org.jfree.chart.entity$ChartEntity#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#PieSectionEntity(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getDataset()": 0,
        "org.jfree.chart.entity$PieSectionEntity#getPieIndex()": 0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionIndex()": 0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionKey()": 0,
        "org.jfree.chart.entity$PieSectionEntity#setDataset(org.jfree.data.general.PieDataset)": 0,
        "org.jfree.chart.entity$PieSectionEntity#setPieIndex(int)": 0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionIndex(int)": 0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionKey(java.lang.Comparable)": 0,
        "org.jfree.chart.entity$PieSectionEntity#toString()": 0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.04428074427700476,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": 0.04428074427700476,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.04428074427700476,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": 0.04428074427700476,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0,
        "org.jfree.chart.event$ChartProgressEvent#ChartProgressEvent(java.lang.Object,org.jfree.chart.JFreeChart,int,int)": 0.125,
        "org.jfree.chart.event$ChartProgressEvent#getChart()": 0,
        "org.jfree.chart.event$ChartProgressEvent#getPercent()": 0,
        "org.jfree.chart.event$ChartProgressEvent#getType()": 0,
        "org.jfree.chart.event$ChartProgressEvent#setChart(org.jfree.chart.JFreeChart)": 0,
        "org.jfree.chart.event$ChartProgressEvent#setPercent(int)": 0,
        "org.jfree.chart.event$ChartProgressEvent#setType(int)": 0,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": 0.06375767130633382,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0,
        "org.jfree.chart.event$TitleChangeEvent#TitleChangeEvent(org.jfree.chart.title.Title)": 0.08247860988423225,
        "org.jfree.chart.event$TitleChangeEvent#getTitle()": 0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#AbstractPieItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.1543033499620919,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#clone()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getLabelFormat()": 0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getNumberFormat()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getPercentFormat()": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator()": 0.16012815380508713,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.16012815380508713,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.util.Locale)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.util.Locale)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#clone()": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#getAttributedLabel(int)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#setAttributedLabel(int,java.text.AttributedString)": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#AbstractPieLabelDistributor()": 0.16666666666666666,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#clear()": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getItemCount()": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getPieLabelRecord(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#<clinit>()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearAnnotations()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainAxes()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeAxes()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clone()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#configureDomainAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#configureRangeAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToRangeAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAnchorValue()": 0,
        "org.jfree.chart.plot$CategoryPlot#getAnnotations()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAxisOffset()": 0,
        "org.jfree.chart.plot$CategoryPlot#getCategories()": 0,
        "org.jfree.chart.plot$CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getColumnRenderingOrder()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataset()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetCount()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisCount()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePosition()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlineStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#getDrawSharedDomainAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedDomainAxisSpace()": 0,
        "org.jfree.chart.plot$CategoryPlot#getFixedLegendItems()": 0,
        "org.jfree.chart.plot$CategoryPlot#getFixedRangeAxisSpace()": 0,
        "org.jfree.chart.plot$CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getOrientation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getPlotType()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisCount()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairPaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairValue()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRowRenderingOrder()": 0,
        "org.jfree.chart.plot$CategoryPlot#getWeight()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$CategoryPlot#isDomainGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainZoomable()": 0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairLockedOnData()": 0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeZoomable()": 0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxis(int,int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxis(int,int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDrawSharedDomainAxis(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setWeight(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoom(double)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 0.061898446059017294,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 0.061898446059017294,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.061898446059017294,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 0.061898446059017294,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": 0.061898446059017294,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": 0.061898446059017294,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$Marker#Marker()": 0.0,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.0,
        "org.jfree.chart.plot$Marker#addChangeListener(org.jfree.chart.event.MarkerChangeListener)": 0.0,
        "org.jfree.chart.plot$Marker#clone()": 0.0,
        "org.jfree.chart.plot$Marker#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$Marker#getAlpha()": 0.0,
        "org.jfree.chart.plot$Marker#getLabel()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelAnchor()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelFont()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelOffset()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelOffsetType()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelPaint()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelTextAnchor()": 0.0,
        "org.jfree.chart.plot$Marker#getListeners(java.lang.Class)": 0.0,
        "org.jfree.chart.plot$Marker#getOutlinePaint()": 0.0,
        "org.jfree.chart.plot$Marker#getOutlineStroke()": 0.0,
        "org.jfree.chart.plot$Marker#getPaint()": 0.0,
        "org.jfree.chart.plot$Marker#getStroke()": 0.0,
        "org.jfree.chart.plot$Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)": 0.0,
        "org.jfree.chart.plot$Marker#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)": 0.0,
        "org.jfree.chart.plot$Marker#setAlpha(float)": 0.0,
        "org.jfree.chart.plot$Marker#setLabel(java.lang.String)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelAnchor(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelTextAnchor(org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.plot$Marker#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Marker#setPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#setStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Marker#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$MultiplePiePlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsKey()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsPaint()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataExtractOrder()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataset()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getLegendItems()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getLimit()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getPieChart()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getPlotType()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#prefetchSectionPaints()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setDataset(org.jfree.data.category.CategoryDataset)": 0,
        "org.jfree.chart.plot$MultiplePiePlot#setLimit(double)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setPieChart(org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#PieLabelDistributor(int)": 0.16666666666666666,
        "org.jfree.chart.plot$PieLabelDistributor#adjustDownwards(double,double)": 0,
        "org.jfree.chart.plot$PieLabelDistributor#adjustInwards()": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#adjustUpwards(double,double)": 0,
        "org.jfree.chart.plot$PieLabelDistributor#distributeLabels(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#isOverlap()": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#sort()": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#spreadEvenly(double,double)": 0,
        "org.jfree.chart.plot$PieLabelDistributor#toString()": 0,
        "org.jfree.chart.plot$PiePlot#<clinit>()": 0.16666666666666666,
        "org.jfree.chart.plot$PiePlot#PiePlot()": 0.0,
        "org.jfree.chart.plot$PiePlot#PiePlot(org.jfree.data.general.PieDataset)": 0.16666666666666666,
        "org.jfree.chart.plot$PiePlot#clone()": 0.0,
        "org.jfree.chart.plot$PiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": 0,
        "org.jfree.chart.plot$PiePlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PiePlot#getArcBounds(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double,double)": 0.0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlinePaint()": 0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlineStroke()": 0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getDataset()": 0.4082482904638631,
        "org.jfree.chart.plot$PiePlot#getDirection()": 0.0,
        "org.jfree.chart.plot$PiePlot#getExplodePercent(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getIgnoreNullValues()": 0,
        "org.jfree.chart.plot$PiePlot#getIgnoreZeroValues()": 0,
        "org.jfree.chart.plot$PiePlot#getInteriorGap()": 0.7071067811865475,
        "org.jfree.chart.plot$PiePlot#getLabelBackgroundPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelDistributor()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelFont()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelGap()": 0.7071067811865475,
        "org.jfree.chart.plot$PiePlot#getLabelGenerator()": 0.7071067811865475,
        "org.jfree.chart.plot$PiePlot#getLabelLinkMargin()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStroke()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelLinksVisible()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlinePaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlineStroke()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelPadding()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelShadowPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLegendItemShape()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendItems()": 0.5,
        "org.jfree.chart.plot$PiePlot#getLegendLabelGenerator()": 0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelToolTipGenerator()": 0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelURLGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getMaximumExplodePercent()": 0.0,
        "org.jfree.chart.plot$PiePlot#getMaximumLabelWidth()": 0.7071067811865475,
        "org.jfree.chart.plot$PiePlot#getMinimumArcAngleToDraw()": 0.0,
        "org.jfree.chart.plot$PiePlot#getPieIndex()": 0,
        "org.jfree.chart.plot$PiePlot#getPlotType()": 0,
        "org.jfree.chart.plot$PiePlot#getSectionKey(int)": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinePaint(java.lang.Comparable)": 0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlineStroke(java.lang.Comparable)": 0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinesVisible()": 0,
        "org.jfree.chart.plot$PiePlot#getSectionPaint(java.lang.Comparable)": 0,
        "org.jfree.chart.plot$PiePlot#getShadowPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getShadowXOffset()": 0,
        "org.jfree.chart.plot$PiePlot#getShadowYOffset()": 0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabelOffset()": 0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabels()": 0.0,
        "org.jfree.chart.plot$PiePlot#getStartAngle()": 0.0,
        "org.jfree.chart.plot$PiePlot#getToolTipGenerator()": 0,
        "org.jfree.chart.plot$PiePlot#getURLGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": 0.5773502691896258,
        "org.jfree.chart.plot$PiePlot#isCircular()": 0.5773502691896258,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setBaseSectionPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean,boolean)": 0.3779644730092272,
        "org.jfree.chart.plot$PiePlot#setDataset(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.chart.plot$PiePlot#setDirection(org.jfree.chart.util.Rotation)": 0.0,
        "org.jfree.chart.plot$PiePlot#setExplodePercent(java.lang.Comparable,double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setIgnoreNullValues(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setIgnoreZeroValues(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setInteriorGap(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)": 0,
        "org.jfree.chart.plot$PiePlot#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelGap(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinkMargin(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinkPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinksVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelPadding(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.plot$PiePlot#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelShadowPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendItemShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setMaximumLabelWidth(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setMinimumArcAngleToDraw(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setPieIndex(int)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionPaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setShadowPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setShadowXOffset(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setShadowYOffset(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.plot$PiePlot#setSimpleLabels(boolean)": 0,
        "org.jfree.chart.plot$PiePlot#setStartAngle(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setURLGenerator(org.jfree.chart.urls.PieURLGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#PiePlot3D()": 0.0,
        "org.jfree.chart.plot$PiePlot3D#PiePlot3D(org.jfree.data.general.PieDataset)": 0.4082482904638631,
        "org.jfree.chart.plot$PiePlot3D#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.7071067811865475,
        "org.jfree.chart.plot$PiePlot3D#drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#getDarkerSides()": 0.0,
        "org.jfree.chart.plot$PiePlot3D#getDepthFactor()": 0,
        "org.jfree.chart.plot$PiePlot3D#getPlotType()": 0,
        "org.jfree.chart.plot$PiePlot3D#isAngleAtBack(double)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#isAngleAtFront(double)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#setDarkerSides(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#setDepthFactor(double)": 0.0,
        "org.jfree.chart.plot$PiePlotState#PiePlotState(org.jfree.chart.plot.PlotRenderingInfo)": 0.5773502691896258,
        "org.jfree.chart.plot$PiePlotState#getExplodedPieArea()": 0.0,
        "org.jfree.chart.plot$PiePlotState#getLatestAngle()": 0.0,
        "org.jfree.chart.plot$PiePlotState#getLinkArea()": 0.0,
        "org.jfree.chart.plot$PiePlotState#getPassesRequired()": 0.0,
        "org.jfree.chart.plot$PiePlotState#getPieArea()": 0.0,
        "org.jfree.chart.plot$PiePlotState#getPieCenterX()": 0.0,
        "org.jfree.chart.plot$PiePlotState#getPieCenterY()": 0.0,
        "org.jfree.chart.plot$PiePlotState#getPieHRadius()": 0.0,
        "org.jfree.chart.plot$PiePlotState#getPieWRadius()": 0.0,
        "org.jfree.chart.plot$PiePlotState#getTotal()": 0.0,
        "org.jfree.chart.plot$PiePlotState#setExplodedPieArea(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PiePlotState#setLatestAngle(double)": 0.0,
        "org.jfree.chart.plot$PiePlotState#setLinkArea(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PiePlotState#setPassesRequired(int)": 0.5773502691896258,
        "org.jfree.chart.plot$PiePlotState#setPieArea(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PiePlotState#setPieCenterX(double)": 0.0,
        "org.jfree.chart.plot$PiePlotState#setPieCenterY(double)": 0.0,
        "org.jfree.chart.plot$PiePlotState#setPieHRadius(double)": 0.0,
        "org.jfree.chart.plot$PiePlotState#setPieWRadius(double)": 0.0,
        "org.jfree.chart.plot$PiePlotState#setTotal(double)": 0.0,
        "org.jfree.chart.plot$Plot#<clinit>()": 0.062257280636469035,
        "org.jfree.chart.plot$Plot#Plot()": 0.062257280636469035,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.07392212709545729,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#clone()": 0.0,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.4472135954999579,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.12909944487358055,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.4472135954999579,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0.12909944487358055,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": 0.0,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": 0.0,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getInsets()": 0.125,
        "org.jfree.chart.plot$Plot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": 0.0,
        "org.jfree.chart.plot$Plot#getParent()": 0.0,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": 0,
        "org.jfree.chart.plot$Plot#isSubplot()": 0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": 0.06375767130633382,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.0,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": 0.0,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": 0.1796053020267749,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": 0.1690308509457033,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$Plot#zoom(double)": 0,
        "org.jfree.chart.plot$PlotOrientation#<clinit>()": 0.07053456158585983,
        "org.jfree.chart.plot$PlotOrientation#PlotOrientation(java.lang.String)": 0.07053456158585983,
        "org.jfree.chart.plot$PlotOrientation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PlotOrientation#hashCode()": 0,
        "org.jfree.chart.plot$PlotOrientation#readResolve()": 0.0,
        "org.jfree.chart.plot$PlotOrientation#toString()": 0.0,
        "org.jfree.chart.plot$PolarPlot#<clinit>()": 0.0,
        "org.jfree.chart.plot$PolarPlot#PolarPlot()": 0.0,
        "org.jfree.chart.plot$PolarPlot#PolarPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)": 0.0,
        "org.jfree.chart.plot$PolarPlot#addCornerTextItem(java.lang.String)": 0.0,
        "org.jfree.chart.plot$PolarPlot#clearCornerTextItems()": 0,
        "org.jfree.chart.plot$PolarPlot#clone()": 0.0,
        "org.jfree.chart.plot$PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0,
        "org.jfree.chart.plot$PolarPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$PolarPlot#drawAxis(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.plot$PolarPlot#drawCornerTextItems(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.plot$PolarPlot#drawGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List,java.util.List)": 0,
        "org.jfree.chart.plot$PolarPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleGridlinePaint()": 0,
        "org.jfree.chart.plot$PolarPlot#getAngleGridlineStroke()": 0,
        "org.jfree.chart.plot$PolarPlot#getAngleLabelFont()": 0,
        "org.jfree.chart.plot$PolarPlot#getAngleLabelPaint()": 0,
        "org.jfree.chart.plot$PolarPlot#getAngleTickUnit()": 0,
        "org.jfree.chart.plot$PolarPlot#getAxis()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$PolarPlot#getDataset()": 0,
        "org.jfree.chart.plot$PolarPlot#getLegendItems()": 0,
        "org.jfree.chart.plot$PolarPlot#getMaxRadius()": 0,
        "org.jfree.chart.plot$PolarPlot#getOrientation()": 0,
        "org.jfree.chart.plot$PolarPlot#getPlotType()": 0,
        "org.jfree.chart.plot$PolarPlot#getRadiusGridlinePaint()": 0,
        "org.jfree.chart.plot$PolarPlot#getRadiusGridlineStroke()": 0,
        "org.jfree.chart.plot$PolarPlot#getRenderer()": 0,
        "org.jfree.chart.plot$PolarPlot#getSeriesCount()": 0,
        "org.jfree.chart.plot$PolarPlot#isAngleGridlinesVisible()": 0,
        "org.jfree.chart.plot$PolarPlot#isAngleLabelsVisible()": 0,
        "org.jfree.chart.plot$PolarPlot#isDomainZoomable()": 0,
        "org.jfree.chart.plot$PolarPlot#isRadiusGridlinesVisible()": 0,
        "org.jfree.chart.plot$PolarPlot#isRangeZoomable()": 0,
        "org.jfree.chart.plot$PolarPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$PolarPlot#refreshAngleTicks()": 0,
        "org.jfree.chart.plot$PolarPlot#removeCornerTextItem(java.lang.String)": 0,
        "org.jfree.chart.plot$PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$PolarPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelsVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleTickUnit(org.jfree.chart.axis.TickUnit)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setDataset(org.jfree.data.xy.XYDataset)": 0,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setRenderer(org.jfree.chart.renderer.PolarItemRenderer)": 0,
        "org.jfree.chart.plot$PolarPlot#translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.plot$PolarPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoom(double)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$RingPlot#RingPlot()": 0.0,
        "org.jfree.chart.plot$RingPlot#RingPlot(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.chart.plot$RingPlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": 0,
        "org.jfree.chart.plot$RingPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$RingPlot#extendLine(java.awt.geom.Line2D,double,double)": 0,
        "org.jfree.chart.plot$RingPlot#getInnerSeparatorExtension()": 0,
        "org.jfree.chart.plot$RingPlot#getOuterSeparatorExtension()": 0,
        "org.jfree.chart.plot$RingPlot#getSectionDepth()": 0,
        "org.jfree.chart.plot$RingPlot#getSeparatorPaint()": 0,
        "org.jfree.chart.plot$RingPlot#getSeparatorStroke()": 0,
        "org.jfree.chart.plot$RingPlot#getSeparatorsVisible()": 0,
        "org.jfree.chart.plot$RingPlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$RingPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$RingPlot#setInnerSeparatorExtension(double)": 0.0,
        "org.jfree.chart.plot$RingPlot#setOuterSeparatorExtension(double)": 0.0,
        "org.jfree.chart.plot$RingPlot#setSectionDepth(double)": 0.0,
        "org.jfree.chart.plot$RingPlot#setSeparatorPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$RingPlot#setSeparatorStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$RingPlot#setSeparatorsVisible(boolean)": 0.0,
        "org.jfree.chart.plot$RingPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double)": 0.0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke)": 0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.0,
        "org.jfree.chart.plot$ValueMarker#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$ValueMarker#getValue()": 0.0,
        "org.jfree.chart.plot$ValueMarker#setValue(double)": 0.0,
        "org.jfree.chart.plot$XYPlot#<clinit>()": 0.0,
        "org.jfree.chart.plot$XYPlot#XYPlot()": 0.0,
        "org.jfree.chart.plot$XYPlot#XYPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#clearAnnotations()": 0,
        "org.jfree.chart.plot$XYPlot#clearDomainAxes()": 0,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#clearRangeAxes()": 0,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#clone()": 0.0,
        "org.jfree.chart.plot$XYPlot#configureDomainAxes()": 0.0,
        "org.jfree.chart.plot$XYPlot#configureRangeAxes()": 0.0,
        "org.jfree.chart.plot$XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$XYPlot#getAnnotations()": 0.0,
        "org.jfree.chart.plot$XYPlot#getAxisOffset()": 0,
        "org.jfree.chart.plot$XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDataset()": 0,
        "org.jfree.chart.plot$XYPlot#getDataset(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDatasetCount()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDatasetRenderingOrder()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToRangeAxis(java.lang.Integer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxis()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisCount()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairPaint()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairValue()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainGridlinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainGridlineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#getDomainTickBandPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselinePaint()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselineStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getFixedDomainAxisSpace()": 0,
        "org.jfree.chart.plot$XYPlot#getFixedLegendItems()": 0,
        "org.jfree.chart.plot$XYPlot#getFixedRangeAxisSpace()": 0,
        "org.jfree.chart.plot$XYPlot#getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)": 0,
        "org.jfree.chart.plot$XYPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$XYPlot#getOrientation()": 0.0,
        "org.jfree.chart.plot$XYPlot#getPlotType()": 0,
        "org.jfree.chart.plot$XYPlot#getQuadrantOrigin()": 0.0,
        "org.jfree.chart.plot$XYPlot#getQuadrantPaint(int)": 0,
        "org.jfree.chart.plot$XYPlot#getRangeAxis()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxis(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisCount()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairPaint()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairValue()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeGridlinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeGridlineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#getRangeTickBandPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselinePaint()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselineStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getRenderer()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRenderer(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRendererForDataset(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#getSeriesCount()": 0,
        "org.jfree.chart.plot$XYPlot#getSeriesRenderingOrder()": 0.0,
        "org.jfree.chart.plot$XYPlot#getWeight()": 0.0,
        "org.jfree.chart.plot$XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$XYPlot#indexOf(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainZeroBaselineVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainZoomable()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeZeroBaselineVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeZoomable()": 0.0,
        "org.jfree.chart.plot$XYPlot#mapDatasetToDomainAxis(int,int)": 0.0,
        "org.jfree.chart.plot$XYPlot#mapDatasetToRangeAxis(int,int)": 0.0,
        "org.jfree.chart.plot$XYPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)": 0.0,
        "org.jfree.chart.plot$XYPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.0,
        "org.jfree.chart.plot$XYPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDataset(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairLockedOnData(boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairPaint(java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainTickBandPaint(java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselinePaint(java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineVisible(boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setQuadrantOrigin(java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#setQuadrantPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeTickBandPaint(java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])": 0,
        "org.jfree.chart.plot$XYPlot#setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)": 0,
        "org.jfree.chart.plot$XYPlot#setWeight(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.renderer$RendererState#RendererState(org.jfree.chart.plot.PlotRenderingInfo)": 0.14002800840280097,
        "org.jfree.chart.renderer$RendererState#getEntityCollection()": 0.0,
        "org.jfree.chart.renderer$RendererState#getInfo()": 0.0,
        "org.jfree.chart.resources$JFreeChartResources#<clinit>()": 0.07715167498104596,
        "org.jfree.chart.resources$JFreeChartResources#JFreeChartResources()": 0.07715167498104596,
        "org.jfree.chart.resources$JFreeChartResources#getContents()": 0.07715167498104596,
        "org.jfree.chart.text$G2TextMeasurer#G2TextMeasurer(java.awt.Graphics2D)": 0.13736056394868904,
        "org.jfree.chart.text$G2TextMeasurer#getStringWidth(java.lang.String,int,int)": 0.13736056394868904,
        "org.jfree.chart.text$TextAnchor#<clinit>()": 0.04428074427700476,
        "org.jfree.chart.text$TextAnchor#TextAnchor(java.lang.String)": 0.04428074427700476,
        "org.jfree.chart.text$TextAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextAnchor#hashCode()": 0.0,
        "org.jfree.chart.text$TextAnchor#readResolve()": 0.0,
        "org.jfree.chart.text$TextAnchor#toString()": 0,
        "org.jfree.chart.text$TextBlock#TextBlock()": 0.11704114719613057,
        "org.jfree.chart.text$TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)": 0.1203858530857692,
        "org.jfree.chart.text$TextBlock#addLine(org.jfree.chart.text.TextLine)": 0.11867816581938533,
        "org.jfree.chart.text$TextBlock#calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)": 0.0,
        "org.jfree.chart.text$TextBlock#calculateDimensions(java.awt.Graphics2D)": 0.1259881576697424,
        "org.jfree.chart.text$TextBlock#calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)": 0.1259881576697424,
        "org.jfree.chart.text$TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)": 0.1259881576697424,
        "org.jfree.chart.text$TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)": 0.1259881576697424,
        "org.jfree.chart.text$TextBlock#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextBlock#getLastLine()": 0.0,
        "org.jfree.chart.text$TextBlock#getLineAlignment()": 0,
        "org.jfree.chart.text$TextBlock#getLines()": 0,
        "org.jfree.chart.text$TextBlock#hashCode()": 0.0,
        "org.jfree.chart.text$TextBlock#setLineAlignment(org.jfree.chart.util.HorizontalAlignment)": 0.1796053020267749,
        "org.jfree.chart.text$TextBlockAnchor#<clinit>()": 0.08111071056538127,
        "org.jfree.chart.text$TextBlockAnchor#TextBlockAnchor(java.lang.String)": 0.08111071056538127,
        "org.jfree.chart.text$TextBlockAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextBlockAnchor#hashCode()": 0.0,
        "org.jfree.chart.text$TextBlockAnchor#readResolve()": 0.0,
        "org.jfree.chart.text$TextBlockAnchor#toString()": 0,
        "org.jfree.chart.text$TextFragment#<clinit>()": 0.11867816581938533,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String)": 0,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font)": 0.0,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font,java.awt.Paint)": 0.11867816581938533,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font,java.awt.Paint,float)": 0.11867816581938533,
        "org.jfree.chart.text$TextFragment#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)": 0.1259881576697424,
        "org.jfree.chart.text$TextFragment#calculateDimensions(java.awt.Graphics2D)": 0.1259881576697424,
        "org.jfree.chart.text$TextFragment#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)": 0.1259881576697424,
        "org.jfree.chart.text$TextFragment#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextFragment#getBaselineOffset()": 0,
        "org.jfree.chart.text$TextFragment#getFont()": 0.0,
        "org.jfree.chart.text$TextFragment#getPaint()": 0.0,
        "org.jfree.chart.text$TextFragment#getText()": 0.0,
        "org.jfree.chart.text$TextFragment#hashCode()": 0.0,
        "org.jfree.chart.text$TextFragment#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.text$TextFragment#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.text$TextLine#TextLine()": 0,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String)": 0.0,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String,java.awt.Font)": 0.0,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String,java.awt.Font,java.awt.Paint)": 0.1203858530857692,
        "org.jfree.chart.text$TextLine#addFragment(org.jfree.chart.text.TextFragment)": 0.0,
        "org.jfree.chart.text$TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)": 0.1259881576697424,
        "org.jfree.chart.text$TextLine#calculateDimensions(java.awt.Graphics2D)": 0.1259881576697424,
        "org.jfree.chart.text$TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)": 0.1259881576697424,
        "org.jfree.chart.text$TextLine#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextLine#getFirstTextFragment()": 0,
        "org.jfree.chart.text$TextLine#getLastTextFragment()": 0.0,
        "org.jfree.chart.text$TextLine#hashCode()": 0.0,
        "org.jfree.chart.text$TextLine#removeFragment(org.jfree.chart.text.TextFragment)": 0.0,
        "org.jfree.chart.text$TextUtilities#<clinit>()": 0.12216944435630522,
        "org.jfree.chart.text$TextUtilities#TextUtilities()": 0,
        "org.jfree.chart.text$TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)": 0,
        "org.jfree.chart.text$TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)": 0,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)": 0.0,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)": 0.13736056394868904,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)": 0.1796053020267749,
        "org.jfree.chart.text$TextUtilities#deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)": 0.125,
        "org.jfree.chart.text$TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.text$TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)": 0,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)": 0.125,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)": 0.1259881576697424,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextUtilities#getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)": 0.125,
        "org.jfree.chart.text$TextUtilities#getUseFontMetricsGetStringBounds()": 0,
        "org.jfree.chart.text$TextUtilities#isUseDrawRotatedStringWorkaround()": 0,
        "org.jfree.chart.text$TextUtilities#nextLineBreak(java.lang.String,int,float,java.text.BreakIterator,org.jfree.chart.text.TextMeasurer)": 0.13736056394868904,
        "org.jfree.chart.text$TextUtilities#setUseDrawRotatedStringWorkaround(boolean)": 0,
        "org.jfree.chart.text$TextUtilities#setUseFontMetricsGetStringBounds(boolean)": 0,
        "org.jfree.chart.title$LegendTitle#<clinit>()": 0.08304547985373997,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource)": 0.08304547985373997,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)": 0.08304547985373997,
        "org.jfree.chart.title$LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.1259881576697424,
        "org.jfree.chart.title$LegendTitle#createLegendItemBlock(org.jfree.chart.LegendItem)": 0.0,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.1259881576697424,
        "org.jfree.chart.title$LegendTitle#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$LegendTitle#fetchLegendItems()": 0.1259881576697424,
        "org.jfree.chart.title$LegendTitle#getBackgroundPaint()": 0,
        "org.jfree.chart.title$LegendTitle#getItemContainer()": 0,
        "org.jfree.chart.title$LegendTitle#getItemFont()": 0,
        "org.jfree.chart.title$LegendTitle#getItemLabelPadding()": 0,
        "org.jfree.chart.title$LegendTitle#getItemPaint()": 0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicAnchor()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicEdge()": 0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicLocation()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicPadding()": 0,
        "org.jfree.chart.title$LegendTitle#getSources()": 0.0,
        "org.jfree.chart.title$LegendTitle#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$LegendTitle#setBackgroundPaint(java.awt.Paint)": 0.08362420100070908,
        "org.jfree.chart.title$LegendTitle#setItemFont(java.awt.Font)": 0.0,
        "org.jfree.chart.title$LegendTitle#setItemLabelPadding(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.title$LegendTitle#setItemPaint(java.awt.Paint)": 0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicAnchor(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicLocation(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.title$LegendTitle#setSources(org.jfree.chart.LegendItemSource[])": 0,
        "org.jfree.chart.title$LegendTitle#setWrapper(org.jfree.chart.block.BlockContainer)": 0,
        "org.jfree.chart.title$LegendTitle#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.title$TextTitle#<clinit>()": 0.09016696346674323,
        "org.jfree.chart.title$TextTitle#TextTitle()": 0.0,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font)": 0.09578262852211514,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 0.09016696346674323,
        "org.jfree.chart.title$TextTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.1796053020267749,
        "org.jfree.chart.title$TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)": 0.1796053020267749,
        "org.jfree.chart.title$TextTitle#clone()": 0.0,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.1796053020267749,
        "org.jfree.chart.title$TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.1796053020267749,
        "org.jfree.chart.title$TextTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$TextTitle#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$TextTitle#getBackgroundPaint()": 0,
        "org.jfree.chart.title$TextTitle#getExpandToFitSpace()": 0,
        "org.jfree.chart.title$TextTitle#getFont()": 0,
        "org.jfree.chart.title$TextTitle#getPaint()": 0,
        "org.jfree.chart.title$TextTitle#getText()": 0,
        "org.jfree.chart.title$TextTitle#getTextAlignment()": 0,
        "org.jfree.chart.title$TextTitle#getToolTipText()": 0,
        "org.jfree.chart.title$TextTitle#getURLText()": 0,
        "org.jfree.chart.title$TextTitle#hashCode()": 0.0,
        "org.jfree.chart.title$TextTitle#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$TextTitle#setBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$TextTitle#setExpandToFitSpace(boolean)": 0,
        "org.jfree.chart.title$TextTitle#setFont(java.awt.Font)": 0.0,
        "org.jfree.chart.title$TextTitle#setPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$TextTitle#setText(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#setTextAlignment(org.jfree.chart.util.HorizontalAlignment)": 0.0,
        "org.jfree.chart.title$TextTitle#setToolTipText(java.lang.String)": 0,
        "org.jfree.chart.title$TextTitle#setURLText(java.lang.String)": 0,
        "org.jfree.chart.title$TextTitle#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.title$Title#<clinit>()": 0.07332355751067665,
        "org.jfree.chart.title$Title#Title()": 0.08084520834544433,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 0,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 0.07332355751067665,
        "org.jfree.chart.title$Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)": 0.07905694150420949,
        "org.jfree.chart.title$Title#clone()": 0.0,
        "org.jfree.chart.title$Title#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$Title#getHorizontalAlignment()": 0.125,
        "org.jfree.chart.title$Title#getNotify()": 0,
        "org.jfree.chart.title$Title#getPosition()": 0.125,
        "org.jfree.chart.title$Title#getVerticalAlignment()": 0,
        "org.jfree.chart.title$Title#hashCode()": 0.0,
        "org.jfree.chart.title$Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)": 0.08247860988423225,
        "org.jfree.chart.title$Title#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)": 0.0,
        "org.jfree.chart.title$Title#setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)": 0.0,
        "org.jfree.chart.title$Title#setNotify(boolean)": 0,
        "org.jfree.chart.title$Title#setPosition(org.jfree.chart.util.RectangleEdge)": 0.08391813582966891,
        "org.jfree.chart.title$Title#setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)": 0.0,
        "org.jfree.chart.title$Title#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo()": 0.07715167498104596,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#addLibrary(org.jfree.chart.ui.Library)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(java.lang.String)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(org.jfree.chart.ui.Library)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#getCopyright()": 0,
        "org.jfree.chart.ui$BasicProjectInfo#getLibraries()": 0,
        "org.jfree.chart.ui$BasicProjectInfo#getOptionalLibraries()": 0,
        "org.jfree.chart.ui$BasicProjectInfo#setCopyright(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$BasicProjectInfo#setInfo(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$BasicProjectInfo#setLicenceName(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$BasicProjectInfo#setName(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$BasicProjectInfo#setVersion(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$Contributor#Contributor(java.lang.String,java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$Contributor#getEmail()": 0,
        "org.jfree.chart.ui$Contributor#getName()": 0,
        "org.jfree.chart.ui$Library#Library()": 0.07715167498104596,
        "org.jfree.chart.ui$Library#Library(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$Library#equals(java.lang.Object)": 0,
        "org.jfree.chart.ui$Library#getInfo()": 0,
        "org.jfree.chart.ui$Library#getLicenceName()": 0,
        "org.jfree.chart.ui$Library#getName()": 0,
        "org.jfree.chart.ui$Library#getVersion()": 0,
        "org.jfree.chart.ui$Library#hashCode()": 0,
        "org.jfree.chart.ui$Library#setInfo(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$Library#setLicenceName(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$Library#setName(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$Library#setVersion(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$Licences#Licences()": 0.07715167498104596,
        "org.jfree.chart.ui$Licences#getGPL()": 0,
        "org.jfree.chart.ui$Licences#getInstance()": 0.07715167498104596,
        "org.jfree.chart.ui$Licences#getLGPL()": 0.07715167498104596,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo()": 0.07715167498104596,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$ProjectInfo#getContributors()": 0,
        "org.jfree.chart.ui$ProjectInfo#getLicenceText()": 0,
        "org.jfree.chart.ui$ProjectInfo#getLogo()": 0.0,
        "org.jfree.chart.ui$ProjectInfo#setContributors(java.util.List)": 0.07715167498104596,
        "org.jfree.chart.ui$ProjectInfo#setLicenceText(java.lang.String)": 0.07715167498104596,
        "org.jfree.chart.ui$ProjectInfo#setLogo(java.awt.Image)": 0.07715167498104596,
        "org.jfree.chart.ui$ProjectInfo#toString()": 0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.045221563164613454,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.045221563164613454,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": 0.045221563164613454,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0,
        "org.jfree.chart.util$AbstractObjectList#clone()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#get(int)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#size()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#<clinit>()": 0.07001400420140048,
        "org.jfree.chart.util$HorizontalAlignment#HorizontalAlignment(java.lang.String)": 0.07001400420140048,
        "org.jfree.chart.util$HorizontalAlignment#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#hashCode()": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#readResolve()": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#toString()": 0,
        "org.jfree.chart.util$ObjectList#ObjectList()": 0.04602873089491617,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0,
        "org.jfree.chart.util$ObjectList#get(int)": 0.0,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#<clinit>()": 0.036760731104690386,
        "org.jfree.chart.util$ObjectUtilities#ObjectUtilities()": 0,
        "org.jfree.chart.util$ObjectUtilities#clone(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#convertName(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#deepClone(java.util.Collection)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#equal(java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader()": 0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader(java.lang.Class)": 0.12216944435630522,
        "org.jfree.chart.util$ObjectUtilities#getClassLoaderSource()": 0,
        "org.jfree.chart.util$ObjectUtilities#getResource(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#hashCode(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#isJDK14()": 0.12216944435630522,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#parseVersions(java.lang.String)": 0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoader(java.lang.ClassLoader)": 0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoaderSource(java.lang.String)": 0,
        "org.jfree.chart.util$RectangleAnchor#<clinit>()": 0.06311944030978031,
        "org.jfree.chart.util$RectangleAnchor#RectangleAnchor(java.lang.String)": 0.06311944030978031,
        "org.jfree.chart.util$RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleAnchor#readResolve()": 0.0,
        "org.jfree.chart.util$RectangleAnchor#toString()": 0,
        "org.jfree.chart.util$RectangleEdge#<clinit>()": 0.07179581586177382,
        "org.jfree.chart.util$RectangleEdge#RectangleEdge(java.lang.String)": 0.07179581586177382,
        "org.jfree.chart.util$RectangleEdge#coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.util$RectangleEdge#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleEdge#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)": 0.1203858530857692,
        "org.jfree.chart.util$RectangleEdge#opposite(org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.util$RectangleEdge#readResolve()": 0.0,
        "org.jfree.chart.util$RectangleEdge#toString()": 0,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 0.048507125007266595,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 0.04962916669854651,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": 0.048507125007266595,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": 0.12403473458920847,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": 0.12309149097933272,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": 0.12403473458920847,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": 0.12309149097933272,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": 0.12403473458920847,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": 0.12309149097933272,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": 0.12403473458920847,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": 0.12309149097933272,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": 0.08111071056538127,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": 0.12403473458920847,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": 0.12403473458920847,
        "org.jfree.chart.util$RectangleInsets#getBottom()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getLeft()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getRight()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getTop()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": 0.125,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": 0.125,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": 0.125,
        "org.jfree.chart.util$Rotation#<clinit>()": 0.15811388300841897,
        "org.jfree.chart.util$Rotation#Rotation(java.lang.String,double)": 0.15811388300841897,
        "org.jfree.chart.util$Rotation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$Rotation#getFactor()": 0.0,
        "org.jfree.chart.util$Rotation#hashCode()": 0,
        "org.jfree.chart.util$Rotation#readResolve()": 0.0,
        "org.jfree.chart.util$Rotation#toString()": 0,
        "org.jfree.chart.util$Size2D#Size2D()": 0.12126781251816648,
        "org.jfree.chart.util$Size2D#Size2D(double,double)": 0.1203858530857692,
        "org.jfree.chart.util$Size2D#clone()": 0,
        "org.jfree.chart.util$Size2D#equals(java.lang.Object)": 0,
        "org.jfree.chart.util$Size2D#getHeight()": 0.12309149097933272,
        "org.jfree.chart.util$Size2D#getWidth()": 0.12403473458920847,
        "org.jfree.chart.util$Size2D#setHeight(double)": 0,
        "org.jfree.chart.util$Size2D#setWidth(double)": 0,
        "org.jfree.chart.util$Size2D#toString()": 0,
        "org.jfree.chart.util$UnitType#<clinit>()": 0.0481683050859088,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": 0.0481683050859088,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$UnitType#hashCode()": 0,
        "org.jfree.chart.util$UnitType#readResolve()": 0.0,
        "org.jfree.chart.util$UnitType#toString()": 0,
        "org.jfree.chart.util$VerticalAlignment#<clinit>()": 0.07179581586177382,
        "org.jfree.chart.util$VerticalAlignment#VerticalAlignment(java.lang.String)": 0.07179581586177382,
        "org.jfree.chart.util$VerticalAlignment#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$VerticalAlignment#hashCode()": 0.0,
        "org.jfree.chart.util$VerticalAlignment#readResolve()": 0.0,
        "org.jfree.chart.util$VerticalAlignment#toString()": 0,
        "org.jfree.data$Range#Range(double,double)": 0.05783149319662402,
        "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)": 0.0,
        "org.jfree.data$Range#constrain(double)": 0.0,
        "org.jfree.data$Range#contains(double)": 0.0,
        "org.jfree.data$Range#equals(java.lang.Object)": 0.0,
        "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)": 0.0,
        "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)": 0.0,
        "org.jfree.data$Range#getCentralValue()": 0,
        "org.jfree.data$Range#getLength()": 0.0,
        "org.jfree.data$Range#getLowerBound()": 0.06819943394704735,
        "org.jfree.data$Range#getUpperBound()": 0.06819943394704735,
        "org.jfree.data$Range#hashCode()": 0,
        "org.jfree.data$Range#intersects(double,double)": 0.0,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double)": 0,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)": 0,
        "org.jfree.data$Range#shiftWithNoZeroCrossing(double,double)": 0,
        "org.jfree.data$Range#toString()": 0,
        "org.jfree.data.general$DatasetUtilities#DatasetUtilities()": 0,
        "org.jfree.data.general$DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)": 0.4082482904638631,
        "org.jfree.data.general$DatasetUtilities#calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)": 0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)": 0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,double[][])": 0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])": 0.0,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)": 0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)": 0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0,
        "org.jfree.data.general$DatasetUtilities#findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumDomainValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumDomainValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)": 0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)": 0.0,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateXYRangeBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": 0
    },
    "Chart-16": {
        "org.jfree.data$DataUtilities#DataUtilities()": 0,
        "org.jfree.data$DataUtilities#calculateColumnTotal(org.jfree.data.Values2D,int)": 0.0,
        "org.jfree.data$DataUtilities#calculateRowTotal(org.jfree.data.Values2D,int)": 0.0,
        "org.jfree.data$DataUtilities#createNumberArray(double[])": 0.0,
        "org.jfree.data$DataUtilities#createNumberArray2D(double[][])": 0.6030226891555273,
        "org.jfree.data$DataUtilities#getCumulativePercentages(org.jfree.data.KeyedValues)": 0,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#DefaultIntervalCategoryDataset(double[][],double[][])": 0.6172133998483676,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])": 0.6172133998483676,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#DefaultIntervalCategoryDataset(java.lang.Number[][],java.lang.Number[][])": 0.6172133998483676,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#DefaultIntervalCategoryDataset(java.lang.String[],java.lang.Number[][],java.lang.Number[][])": 0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#clone()": 0.25,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#clone(java.lang.Number[][])": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#equal(java.lang.Number[][],java.lang.Number[][])": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#equals(java.lang.Object)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#generateKeys(int,java.lang.String)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getCategoryCount()": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getCategoryIndex(java.lang.Comparable)": 0.2886751345948129,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getColumnCount()": 0.35355339059327373,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)": 0.17677669529663687,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getColumnKey(int)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getColumnKeys()": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getEndValue(int,int)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getEndValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getRowCount()": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getRowIndex(java.lang.Comparable)": 0.35355339059327373,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getRowKey(int)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getRowKeys()": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getSeriesCount()": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getSeriesIndex(java.lang.Comparable)": 0.31622776601683794,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getSeriesKey(int)": 0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getStartValue(int,int)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getStartValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getValue(int,int)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#setCategoryKeys(java.lang.Comparable[])": 0.35355339059327373,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#setEndValue(int,java.lang.Comparable,java.lang.Number)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#setSeriesKeys(java.lang.Comparable[])": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#setStartValue(int,java.lang.Comparable,java.lang.Number)": 0.0,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.1281682672224003,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#clone()": 0.05976143046671968,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged()": 0.0,
        "org.jfree.data.general$AbstractDataset#getGroup()": 0.0,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0,
        "org.jfree.data.general$AbstractDataset#validateObject()": 0.0,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.data.general$AbstractSeriesDataset#AbstractSeriesDataset()": 0.17118419700436516,
        "org.jfree.data.general$AbstractSeriesDataset#indexOf(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)": 0.0,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": 0.0,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": 0.12803687993289598,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0,
        "org.jfree.data.general$DatasetGroup#clone()": 0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$DatasetGroup#getID()": 0,
        "org.jfree.data.resources$DataPackageResources#<clinit>()": 0.6172133998483676,
        "org.jfree.data.resources$DataPackageResources#DataPackageResources()": 0.6172133998483676,
        "org.jfree.data.resources$DataPackageResources#getContents()": 0.0
    },
    "Chart-17": {
        "org.jfree.chart.util$ObjectUtilities#<clinit>()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#ObjectUtilities()": 0,
        "org.jfree.chart.util$ObjectUtilities#clone(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#convertName(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#deepClone(java.util.Collection)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#equal(java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader()": 0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader(java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoaderSource()": 0,
        "org.jfree.chart.util$ObjectUtilities#getResource(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#hashCode(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#isJDK14()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#parseVersions(java.lang.String)": 0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoader(java.lang.ClassLoader)": 0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoaderSource(java.lang.String)": 0,
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.06119900613621046,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": 0.06119900613621046,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#clone()": 0.0,
        "org.jfree.data.general$Series#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.06362847629757777,
        "org.jfree.data.general$Series#getDescription()": 0.0,
        "org.jfree.data.general$Series#getKey()": 0.0,
        "org.jfree.data.general$Series#getNotify()": 0,
        "org.jfree.data.general$Series#hashCode()": 0.0,
        "org.jfree.data.general$Series#isEmpty()": 0,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": 0.06362847629757777,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$Series#setNotify(boolean)": 0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 0.06362847629757777,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#<clinit>()": 0.08362420100070908,
        "org.jfree.data.time$Day#Day()": 0.0,
        "org.jfree.data.time$Day#Day(int,int,int)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#getDayOfMonth()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#getMonth()": 0.0,
        "org.jfree.data.time$Day#getSerialDate()": 0.0,
        "org.jfree.data.time$Day#getSerialIndex()": 0.0,
        "org.jfree.data.time$Day#getYear()": 0.0,
        "org.jfree.data.time$Day#hashCode()": 0.0,
        "org.jfree.data.time$Day#next()": 0.0,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#previous()": 0.0,
        "org.jfree.data.time$Day#toString()": 0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(java.util.Date)": 0.0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(long)": 0.0,
        "org.jfree.data.time$FixedMillisecond#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$FixedMillisecond#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond()": 0,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond()": 0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond()": 0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#getSerialIndex()": 0,
        "org.jfree.data.time$FixedMillisecond#getTime()": 0.0,
        "org.jfree.data.time$FixedMillisecond#hashCode()": 0.0,
        "org.jfree.data.time$FixedMillisecond#next()": 0,
        "org.jfree.data.time$FixedMillisecond#peg(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#previous()": 0,
        "org.jfree.data.time$Month#Month()": 0.0,
        "org.jfree.data.time$Month#Month(int,int)": 0.0,
        "org.jfree.data.time$Month#Month(int,org.jfree.data.time.Year)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Month#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Month#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Month#evaluateAsYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#findSeparator(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Month#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Month#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#getMonth()": 0.0,
        "org.jfree.data.time$Month#getSerialIndex()": 0.0,
        "org.jfree.data.time$Month#getYear()": 0.0,
        "org.jfree.data.time$Month#getYearValue()": 0.0,
        "org.jfree.data.time$Month#hashCode()": 0.0,
        "org.jfree.data.time$Month#next()": 0.0,
        "org.jfree.data.time$Month#parseMonth(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#previous()": 0.0,
        "org.jfree.data.time$Month#toString()": 0,
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": 0.05976143046671968,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": 0.06063390625908324,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getStart()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0,
        "org.jfree.data.time$SerialDate#<clinit>()": 0.0,
        "org.jfree.data.time$SerialDate#SerialDate()": 0.0,
        "org.jfree.data.time$SerialDate#addDays(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#addMonths(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#addYears(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#createInstance(int)": 0.0,
        "org.jfree.data.time$SerialDate#createInstance(int,int,int)": 0.0,
        "org.jfree.data.time$SerialDate#createInstance(java.util.Date)": 0,
        "org.jfree.data.time$SerialDate#getDescription()": 0,
        "org.jfree.data.time$SerialDate#getEndOfCurrentMonth(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int)": 0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#getMonths()": 0,
        "org.jfree.data.time$SerialDate#getMonths(boolean)": 0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int)": 0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int)": 0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#isLeapYear(int)": 0.0,
        "org.jfree.data.time$SerialDate#isValidMonthCode(int)": 0,
        "org.jfree.data.time$SerialDate#isValidWeekInMonthCode(int)": 0,
        "org.jfree.data.time$SerialDate#isValidWeekdayCode(int)": 0,
        "org.jfree.data.time$SerialDate#lastDayOfMonth(int,int)": 0.0,
        "org.jfree.data.time$SerialDate#leapYearCount(int)": 0.0,
        "org.jfree.data.time$SerialDate#monthCodeToQuarter(int)": 0.0,
        "org.jfree.data.time$SerialDate#monthCodeToString(int)": 0,
        "org.jfree.data.time$SerialDate#monthCodeToString(int,boolean)": 0,
        "org.jfree.data.time$SerialDate#relativeToString(int)": 0,
        "org.jfree.data.time$SerialDate#setDescription(java.lang.String)": 0,
        "org.jfree.data.time$SerialDate#stringToMonthCode(java.lang.String)": 0.0,
        "org.jfree.data.time$SerialDate#stringToWeekdayCode(java.lang.String)": 0,
        "org.jfree.data.time$SerialDate#toString()": 0,
        "org.jfree.data.time$SerialDate#weekInMonthToString(int)": 0,
        "org.jfree.data.time$SerialDate#weekdayCodeToString(int)": 0,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int,int,int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#calcSerial(int,int,int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#compare(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#compareTo(java.lang.Object)": 0,
        "org.jfree.data.time$SpreadsheetDate#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#getDayOfMonth()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#getDayOfWeek()": 0,
        "org.jfree.data.time$SpreadsheetDate#getMonth()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#getYYYY()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#hashCode()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isAfter(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isBefore(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)": 0,
        "org.jfree.data.time$SpreadsheetDate#isOn(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrAfter(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrBefore(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#toDate()": 0,
        "org.jfree.data.time$SpreadsheetDate#toSerial()": 0.0,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable)": 0.30151134457776363,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.Class)": 0.20412414523193154,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)": 0.18257418583505536,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)": 0.0,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)": 0.0,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.21320071635561041,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)": 0.21320071635561041,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)": 0.0,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)": 0.19611613513818404,
        "org.jfree.data.time$TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#clear()": 0,
        "org.jfree.data.time$TimeSeries#clone()": 0.5773502691896258,
        "org.jfree.data.time$TimeSeries#createCopy(int,int)": 0.4472135954999579,
        "org.jfree.data.time$TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#delete(int,int)": 0.0,
        "org.jfree.data.time$TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeries#getDataItem(int)": 0.19611613513818404,
        "org.jfree.data.time$TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#getDomainDescription()": 0.0,
        "org.jfree.data.time$TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#getItemCount()": 0.19245008972987526,
        "org.jfree.data.time$TimeSeries#getItems()": 0,
        "org.jfree.data.time$TimeSeries#getMaximumItemAge()": 0.0,
        "org.jfree.data.time$TimeSeries#getMaximumItemCount()": 0.0,
        "org.jfree.data.time$TimeSeries#getNextTimePeriod()": 0,
        "org.jfree.data.time$TimeSeries#getRangeDescription()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriod(int)": 0.19611613513818404,
        "org.jfree.data.time$TimeSeries#getTimePeriodClass()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriods()": 0,
        "org.jfree.data.time$TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)": 0,
        "org.jfree.data.time$TimeSeries#getValue(int)": 0.0,
        "org.jfree.data.time$TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#hashCode()": 0.0,
        "org.jfree.data.time$TimeSeries#removeAgedItems(boolean)": 0.19611613513818404,
        "org.jfree.data.time$TimeSeries#removeAgedItems(long,boolean)": 0.0,
        "org.jfree.data.time$TimeSeries#setDomainDescription(java.lang.String)": 0,
        "org.jfree.data.time$TimeSeries#setMaximumItemAge(long)": 0.0,
        "org.jfree.data.time$TimeSeries#setMaximumItemCount(int)": 0.0,
        "org.jfree.data.time$TimeSeries#setRangeDescription(java.lang.String)": 0,
        "org.jfree.data.time$TimeSeries#update(int,java.lang.Number)": 0,
        "org.jfree.data.time$TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,double)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.18569533817705186,
        "org.jfree.data.time$TimeSeriesDataItem#clone()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#getPeriod()": 0.19611613513818404,
        "org.jfree.data.time$TimeSeriesDataItem#getValue()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#hashCode()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#setValue(java.lang.Number)": 0.0,
        "org.jfree.data.time$Year#Year()": 0.0,
        "org.jfree.data.time$Year#Year(int)": 0.11470786693528087,
        "org.jfree.data.time$Year#Year(java.util.Date)": 0.0,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": 0.1796053020267749,
        "org.jfree.data.time$Year#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Year#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": 0.1125087900926024,
        "org.jfree.data.time$Year#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": 0.1125087900926024,
        "org.jfree.data.time$Year#getSerialIndex()": 0.21320071635561041,
        "org.jfree.data.time$Year#getYear()": 0.13130643285972254,
        "org.jfree.data.time$Year#hashCode()": 0.0,
        "org.jfree.data.time$Year#next()": 0.0,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": 0.1125087900926024,
        "org.jfree.data.time$Year#previous()": 0.0,
        "org.jfree.data.time$Year#toString()": 0
    },
    "Chart-18": {
        "org.jfree.data$DefaultKeyedValues#DefaultKeyedValues()": 0.14547859349066158,
        "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,double)": 0.22360679774997896,
        "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)": 0.23570226039551587,
        "org.jfree.data$DefaultKeyedValues#clear()": 0.0,
        "org.jfree.data$DefaultKeyedValues#clone()": 0.0,
        "org.jfree.data$DefaultKeyedValues#equals(java.lang.Object)": 0.0,
        "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)": 0.14907119849998599,
        "org.jfree.data$DefaultKeyedValues#getItemCount()": 0.0,
        "org.jfree.data$DefaultKeyedValues#getKey(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues#getKeys()": 0.0,
        "org.jfree.data$DefaultKeyedValues#getValue(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues#getValue(java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues#hashCode()": 0,
        "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,double)": 0.0,
        "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,java.lang.Number)": 0.0,
        "org.jfree.data$DefaultKeyedValues#rebuildIndex()": 0.35355339059327373,
        "org.jfree.data$DefaultKeyedValues#removeValue(int)": 1.0,
        "org.jfree.data$DefaultKeyedValues#removeValue(java.lang.Comparable)": 1.0,
        "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,double)": 0,
        "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)": 0.14948701855038718,
        "org.jfree.data$DefaultKeyedValues#sortByKeys(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.data$DefaultKeyedValues#sortByValues(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#DefaultKeyedValues2D()": 0.0842151921066519,
        "org.jfree.data$DefaultKeyedValues2D#DefaultKeyedValues2D(boolean)": 0.08137884587711594,
        "org.jfree.data$DefaultKeyedValues2D#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.08873565094161139,
        "org.jfree.data$DefaultKeyedValues2D#clear()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#clone()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getColumnCount()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getColumnKeys()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getRowCount()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)": 0.0854357657716761,
        "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getRowKeys()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#getValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#hashCode()": 0,
        "org.jfree.data$DefaultKeyedValues2D#removeColumn(int)": 0,
        "org.jfree.data$DefaultKeyedValues2D#removeColumn(java.lang.Comparable)": 0.7071067811865475,
        "org.jfree.data$DefaultKeyedValues2D#removeRow(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#removeRow(java.lang.Comparable)": 0,
        "org.jfree.data$DefaultKeyedValues2D#removeValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.0854357657716761,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#DefaultCategoryDataset()": 0.044721359549995794,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)": 0.0629940788348712,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.04926646390821466,
        "org.jfree.data.category$DefaultCategoryDataset#clear()": 0,
        "org.jfree.data.category$DefaultCategoryDataset#clone()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#equals(java.lang.Object)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnCount()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKey(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKeys()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowCount()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowIndex(java.lang.Comparable)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKey(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKeys()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(int,int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#hashCode()": 0,
        "org.jfree.data.category$DefaultCategoryDataset#incrementValue(double,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(int)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(java.lang.Comparable)": 0.5,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(int)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(java.lang.Comparable)": 0,
        "org.jfree.data.category$DefaultCategoryDataset#removeValue(java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.023014365447458086,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#clone()": 0.0,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged()": 0.026919095102908276,
        "org.jfree.data.general$AbstractDataset#getGroup()": 0.0,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)": 0.025449329927964382,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0,
        "org.jfree.data.general$AbstractDataset#validateObject()": 0.0,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": 0.02341464528954235,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": 0.022990024493585143,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0,
        "org.jfree.data.general$DatasetGroup#clone()": 0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$DatasetGroup#getID()": 0
    },
    "Chart-19": {},
    "Chart-2": {
        "org.jfree.chart.event$DatasetChangeInfo#DatasetChangeInfo()": 0.057977103565244846,
        "org.jfree.data$ComparableObjectItem#ComparableObjectItem(java.lang.Comparable,java.lang.Object)": 0.13736056394868904,
        "org.jfree.data$ComparableObjectItem#clone()": 0.0,
        "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)": 0.0,
        "org.jfree.data$ComparableObjectItem#getComparable()": 0.0,
        "org.jfree.data$ComparableObjectItem#getObject()": 0.31622776601683794,
        "org.jfree.data$ComparableObjectItem#hashCode()": 0.0,
        "org.jfree.data$ComparableObjectItem#setObject(java.lang.Object)": 0,
        "org.jfree.data$ComparableObjectSeries#ComparableObjectSeries(java.lang.Comparable)": 0.0,
        "org.jfree.data$ComparableObjectSeries#ComparableObjectSeries(java.lang.Comparable,boolean,boolean)": 0.1466471150213533,
        "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)": 0.0,
        "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)": 0.0,
        "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)": 0.15713484026367722,
        "org.jfree.data$ComparableObjectSeries#clear()": 0.0,
        "org.jfree.data$ComparableObjectSeries#delete(int,int)": 0,
        "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)": 0.0,
        "org.jfree.data$ComparableObjectSeries#getAllowDuplicateXValues()": 0.0,
        "org.jfree.data$ComparableObjectSeries#getAutoSort()": 0.0,
        "org.jfree.data$ComparableObjectSeries#getDataItem(int)": 0.23570226039551587,
        "org.jfree.data$ComparableObjectSeries#getItemCount()": 0.15617376188860607,
        "org.jfree.data$ComparableObjectSeries#getMaximumItemCount()": 0.0,
        "org.jfree.data$ComparableObjectSeries#hashCode()": 0.0,
        "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)": 0.0,
        "org.jfree.data$ComparableObjectSeries#remove(int)": 0.0,
        "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)": 0.0,
        "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)": 0.0,
        "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)": 0,
        "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)": 0,
        "org.jfree.data$Range#Range(double,double)": 0.0,
        "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)": 0.0,
        "org.jfree.data$Range#constrain(double)": 0.0,
        "org.jfree.data$Range#contains(double)": 0.0,
        "org.jfree.data$Range#equals(java.lang.Object)": 0.0,
        "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)": 0.0,
        "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)": 0.0,
        "org.jfree.data$Range#getCentralValue()": 0.0,
        "org.jfree.data$Range#getLength()": 0.0,
        "org.jfree.data$Range#getLowerBound()": 0.0,
        "org.jfree.data$Range#getUpperBound()": 0.0,
        "org.jfree.data$Range#hashCode()": 0.0,
        "org.jfree.data$Range#intersects(double,double)": 0.0,
        "org.jfree.data$Range#intersects(org.jfree.data.Range)": 0,
        "org.jfree.data$Range#scale(org.jfree.data.Range,double)": 0.0,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double)": 0.0,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)": 0.0,
        "org.jfree.data$Range#shiftWithNoZeroCrossing(double,double)": 0.0,
        "org.jfree.data$Range#toString()": 0,
        "org.jfree.data.event$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset,org.jfree.chart.event.DatasetChangeInfo)": 0.057977103565244846,
        "org.jfree.data.event$DatasetChangeEvent#getDataset()": 0,
        "org.jfree.data.event$DatasetChangeEvent#getInfo()": 0,
        "org.jfree.data.event$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 0.07993607669774315,
        "org.jfree.data.event$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object,org.jfree.data.general.SeriesChangeInfo)": 0.07993607669774315,
        "org.jfree.data.event$SeriesChangeEvent#getSummary()": 0,
        "org.jfree.data.event$SeriesChangeEvent#setSummary(org.jfree.data.general.SeriesChangeInfo)": 0,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.0576390417704235,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.event.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#clone()": 0.0,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged(org.jfree.chart.event.DatasetChangeInfo)": 0.06172133998483677,
        "org.jfree.data.general$AbstractDataset#getGroup()": 0.0,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.event.DatasetChangeEvent)": 0.06172133998483677,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.event.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0,
        "org.jfree.data.general$AbstractDataset#validateObject()": 0.0,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.data.general$AbstractSeriesDataset#AbstractSeriesDataset()": 0.07559289460184544,
        "org.jfree.data.general$AbstractSeriesDataset#indexOf(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$AbstractSeriesDataset#seriesChanged(org.jfree.data.event.SeriesChangeEvent)": 0.0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": 0.05759122837209068,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0,
        "org.jfree.data.general$DatasetGroup#clone()": 0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$DatasetGroup#getID()": 0,
        "org.jfree.data.general$DatasetUtilities#DatasetUtilities()": 0,
        "org.jfree.data.general$DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.pie.PieDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)": 0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)": 0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,double[][])": 0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])": 0.0,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)": 0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)": 0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0,
        "org.jfree.data.general$DatasetUtilities#findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumDomainValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumDomainValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)": 0.0,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.pie.PieDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset)": 0.4082482904638631,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.17677669529663687,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset)": 0,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset)": 0.31622776601683794,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)": 0.17149858514250882,
        "org.jfree.data.general$DatasetUtilities#iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateXYRangeBounds(org.jfree.data.xy.XYDataset)": 0,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.07658395810674835,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": 0.07658395810674835,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.event.SeriesChangeListener)": 0.10153461651336192,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#clone()": 0.0,
        "org.jfree.data.general$Series#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.07993607669774315,
        "org.jfree.data.general$Series#getDescription()": 0.0,
        "org.jfree.data.general$Series#getKey()": 0.0,
        "org.jfree.data.general$Series#getNotify()": 0,
        "org.jfree.data.general$Series#hashCode()": 0.0,
        "org.jfree.data.general$Series#isEmpty()": 0.0,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.event.SeriesChangeEvent)": 0.07993607669774315,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.event.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$Series#setNotify(boolean)": 0,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": 0.0,
        "org.jfree.data.xy$AbstractIntervalXYDataset#AbstractIntervalXYDataset()": 0.09667364890456635,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getEndXValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getEndYValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getStartXValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getStartYValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#AbstractXYDataset()": 0.08164965809277261,
        "org.jfree.data.xy$AbstractXYDataset#getDomainOrder()": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#getSelectionState()": 0,
        "org.jfree.data.xy$AbstractXYDataset#getXValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#getYValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#setSelectionState(org.jfree.data.xy.XYDatasetSelectionState)": 0.0,
        "org.jfree.data.xy$XYInterval#XYInterval(double,double,double,double,double)": 0.2886751345948129,
        "org.jfree.data.xy$XYInterval#equals(java.lang.Object)": 0.0,
        "org.jfree.data.xy$XYInterval#getXHigh()": 0.4082482904638631,
        "org.jfree.data.xy$XYInterval#getXLow()": 0.4082482904638631,
        "org.jfree.data.xy$XYInterval#getY()": 0.0,
        "org.jfree.data.xy$XYInterval#getYHigh()": 0.4082482904638631,
        "org.jfree.data.xy$XYInterval#getYLow()": 0.4082482904638631,
        "org.jfree.data.xy$XYIntervalDataItem#XYIntervalDataItem(double,double,double,double,double,double)": 0.3086066999241838,
        "org.jfree.data.xy$XYIntervalDataItem#getX()": 0.0,
        "org.jfree.data.xy$XYIntervalDataItem#getXHighValue()": 0.4082482904638631,
        "org.jfree.data.xy$XYIntervalDataItem#getXLowValue()": 0.4082482904638631,
        "org.jfree.data.xy$XYIntervalDataItem#getYHighValue()": 0.4082482904638631,
        "org.jfree.data.xy$XYIntervalDataItem#getYLowValue()": 0.4082482904638631,
        "org.jfree.data.xy$XYIntervalDataItem#getYValue()": 0.0,
        "org.jfree.data.xy$XYIntervalSeries#XYIntervalSeries(java.lang.Comparable)": 0.34299717028501764,
        "org.jfree.data.xy$XYIntervalSeries#XYIntervalSeries(java.lang.Comparable,boolean,boolean)": 0.3244428422615251,
        "org.jfree.data.xy$XYIntervalSeries#add(double,double,double,double,double,double)": 0.34299717028501764,
        "org.jfree.data.xy$XYIntervalSeries#getDataItem(int)": 0.5,
        "org.jfree.data.xy$XYIntervalSeries#getX(int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeries#getXHighValue(int)": 0.5,
        "org.jfree.data.xy$XYIntervalSeries#getXLowValue(int)": 0.5,
        "org.jfree.data.xy$XYIntervalSeries#getYHighValue(int)": 0.5,
        "org.jfree.data.xy$XYIntervalSeries#getYLowValue(int)": 0.5,
        "org.jfree.data.xy$XYIntervalSeries#getYValue(int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#XYIntervalSeriesCollection()": 0.5,
        "org.jfree.data.xy$XYIntervalSeriesCollection#addSeries(org.jfree.data.xy.XYIntervalSeries)": 0.5345224838248488,
        "org.jfree.data.xy$XYIntervalSeriesCollection#clone()": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#equals(java.lang.Object)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getEndX(int,int)": 0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getEndXValue(int,int)": 0.7071067811865475,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getEndY(int,int)": 0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getEndYValue(int,int)": 0.7071067811865475,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getItemCount(int)": 1.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getSeries(int)": 0.8164965809277261,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getSeriesCount()": 0.6324555320336759,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getSeriesKey(int)": 0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getStartX(int,int)": 0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getStartXValue(int,int)": 0.7071067811865475,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getStartY(int,int)": 0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getStartYValue(int,int)": 0.7071067811865475,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getX(int,int)": 0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getY(int,int)": 0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getYValue(int,int)": 0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#removeAllSeries()": 0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#removeSeries(int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#removeSeries(org.jfree.data.xy.XYIntervalSeries)": 0
    },
    "Chart-20": {},
    "Chart-3": {
        "org.jfree.data.event$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 0.05670479771237427,
        "org.jfree.data.event$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object,org.jfree.data.general.SeriesChangeInfo)": 0.05670479771237427,
        "org.jfree.data.event$SeriesChangeEvent#getSummary()": 0,
        "org.jfree.data.event$SeriesChangeEvent#setSummary(org.jfree.data.general.SeriesChangeInfo)": 0,
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.054312544659356844,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": 0.054312544659356844,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.event.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#clone()": 0.1796053020267749,
        "org.jfree.data.general$Series#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.05670479771237427,
        "org.jfree.data.general$Series#getDescription()": 0.0,
        "org.jfree.data.general$Series#getKey()": 0.0,
        "org.jfree.data.general$Series#getNotify()": 0,
        "org.jfree.data.general$Series#hashCode()": 0.0,
        "org.jfree.data.general$Series#isEmpty()": 0.0,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.event.SeriesChangeEvent)": 0.05670479771237427,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.event.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$Series#setNotify(boolean)": 0,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#<clinit>()": 0.0,
        "org.jfree.data.time$Day#Day()": 0.0,
        "org.jfree.data.time$Day#Day(int,int,int)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#getDayOfMonth()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#getMonth()": 0.0,
        "org.jfree.data.time$Day#getSerialDate()": 0.0,
        "org.jfree.data.time$Day#getSerialIndex()": 0.0,
        "org.jfree.data.time$Day#getYear()": 0.0,
        "org.jfree.data.time$Day#hashCode()": 0.0,
        "org.jfree.data.time$Day#next()": 0.0,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#previous()": 0.0,
        "org.jfree.data.time$Day#toString()": 0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(java.util.Date)": 0.0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(long)": 0.0,
        "org.jfree.data.time$FixedMillisecond#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$FixedMillisecond#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond()": 0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond()": 0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#getSerialIndex()": 0,
        "org.jfree.data.time$FixedMillisecond#getTime()": 0,
        "org.jfree.data.time$FixedMillisecond#hashCode()": 0.0,
        "org.jfree.data.time$FixedMillisecond#next()": 0,
        "org.jfree.data.time$FixedMillisecond#peg(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#previous()": 0,
        "org.jfree.data.time$Month#Month()": 0.0,
        "org.jfree.data.time$Month#Month(int,int)": 0.0,
        "org.jfree.data.time$Month#Month(int,org.jfree.data.time.Year)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.jfree.data.time$Month#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Month#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Month#evaluateAsYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#findSeparator(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Month#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Month#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#getMonth()": 0.0,
        "org.jfree.data.time$Month#getSerialIndex()": 0.0,
        "org.jfree.data.time$Month#getYear()": 0.0,
        "org.jfree.data.time$Month#getYearValue()": 0.0,
        "org.jfree.data.time$Month#hashCode()": 0.0,
        "org.jfree.data.time$Month#next()": 0.0,
        "org.jfree.data.time$Month#parseMonth(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#previous()": 0.0,
        "org.jfree.data.time$Month#toString()": 0,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": 0.05773502691896257,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getStart()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable)": 0.14285714285714285,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.String,java.lang.String)": 0.14285714285714285,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)": 0.17677669529663687,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)": 0.17677669529663687,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.16222142113076254,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)": 0.16222142113076254,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)": 0.4472135954999579,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)": 0.15075567228888181,
        "org.jfree.data.time$TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.TimeSeriesDataItem)": 0.0,
        "org.jfree.data.time$TimeSeries#clear()": 0.0,
        "org.jfree.data.time$TimeSeries#clone()": 0.0,
        "org.jfree.data.time$TimeSeries#createCopy(int,int)": 0.5773502691896258,
        "org.jfree.data.time$TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#delete(int,int)": 0.0,
        "org.jfree.data.time$TimeSeries#delete(int,int,boolean)": 0.0,
        "org.jfree.data.time$TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeries#findBoundsByIteration()": 0.0,
        "org.jfree.data.time$TimeSeries#getDataItem(int)": 0.0,
        "org.jfree.data.time$TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#getDomainDescription()": 0.0,
        "org.jfree.data.time$TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#getItemCount()": 0.14433756729740646,
        "org.jfree.data.time$TimeSeries#getItems()": 0,
        "org.jfree.data.time$TimeSeries#getMaxY()": 0.2886751345948129,
        "org.jfree.data.time$TimeSeries#getMaximumItemAge()": 0.0,
        "org.jfree.data.time$TimeSeries#getMaximumItemCount()": 0.0,
        "org.jfree.data.time$TimeSeries#getMinY()": 0.2886751345948129,
        "org.jfree.data.time$TimeSeries#getNextTimePeriod()": 0,
        "org.jfree.data.time$TimeSeries#getRangeDescription()": 0.0,
        "org.jfree.data.time$TimeSeries#getRawDataItem(int)": 0.15249857033260467,
        "org.jfree.data.time$TimeSeries#getRawDataItem(org.jfree.data.time.RegularTimePeriod)": 0,
        "org.jfree.data.time$TimeSeries#getTimePeriod(int)": 0.15249857033260467,
        "org.jfree.data.time$TimeSeries#getTimePeriodClass()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriods()": 0,
        "org.jfree.data.time$TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)": 0,
        "org.jfree.data.time$TimeSeries#getValue(int)": 0.0,
        "org.jfree.data.time$TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#hashCode()": 0.0,
        "org.jfree.data.time$TimeSeries#maxIgnoreNaN(double,double)": 0.15075567228888181,
        "org.jfree.data.time$TimeSeries#minIgnoreNaN(double,double)": 0.15075567228888181,
        "org.jfree.data.time$TimeSeries#removeAgedItems(boolean)": 0.15075567228888181,
        "org.jfree.data.time$TimeSeries#removeAgedItems(long,boolean)": 0.0,
        "org.jfree.data.time$TimeSeries#setDomainDescription(java.lang.String)": 0,
        "org.jfree.data.time$TimeSeries#setMaximumItemAge(long)": 0.0,
        "org.jfree.data.time$TimeSeries#setMaximumItemCount(int)": 0.0,
        "org.jfree.data.time$TimeSeries#setRangeDescription(java.lang.String)": 0,
        "org.jfree.data.time$TimeSeries#update(int,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)": 0.15075567228888181,
        "org.jfree.data.time$TimeSeries#updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,double)": 0.15617376188860607,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.14586499149789456,
        "org.jfree.data.time$TimeSeriesDataItem#clone()": 0.15075567228888181,
        "org.jfree.data.time$TimeSeriesDataItem#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#getPeriod()": 0.15075567228888181,
        "org.jfree.data.time$TimeSeriesDataItem#getValue()": 0.15075567228888181,
        "org.jfree.data.time$TimeSeriesDataItem#hashCode()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#isSelected()": 0,
        "org.jfree.data.time$TimeSeriesDataItem#setSelected(boolean)": 0,
        "org.jfree.data.time$TimeSeriesDataItem#setValue(java.lang.Number)": 0.0,
        "org.jfree.data.time$Year#Year()": 0.0,
        "org.jfree.data.time$Year#Year(int)": 0.09950371902099892,
        "org.jfree.data.time$Year#Year(java.util.Date)": 0.0,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": 0.14586499149789456,
        "org.jfree.data.time$Year#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Year#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": 0.09805806756909202,
        "org.jfree.data.time$Year#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": 0.09805806756909202,
        "org.jfree.data.time$Year#getSerialIndex()": 0.16222142113076254,
        "org.jfree.data.time$Year#getYear()": 0.13483997249264842,
        "org.jfree.data.time$Year#hashCode()": 0.0,
        "org.jfree.data.time$Year#next()": 0.0,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": 0.09805806756909202,
        "org.jfree.data.time$Year#previous()": 0.0,
        "org.jfree.data.time$Year#toString()": 0
    },
    "Chart-4": {
        "org.jfree.chart$ChartColor#<clinit>()": 0.2726248784031353,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 0.2726248784031353,
        "org.jfree.chart$ChartFactory#<clinit>()": 0.4317877695883728,
        "org.jfree.chart$ChartFactory#ChartFactory()": 0,
        "org.jfree.chart$ChartFactory#createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)": 0,
        "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)": 0,
        "org.jfree.chart$ChartFactory#createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)": 0,
        "org.jfree.chart$ChartFactory#createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)": 0,
        "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)": 0,
        "org.jfree.chart$ChartFactory#createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 0.055048188256318034,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0,
        "org.jfree.chart$ChartFactory#createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0,
        "org.jfree.chart$ChartFactory#createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.6030226891555273,
        "org.jfree.chart$ChartFactory#createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)": 0.42640143271122083,
        "org.jfree.chart$ChartFactory#createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)": 0,
        "org.jfree.chart$ChartFactory#createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.3692744729379982,
        "org.jfree.chart$ChartFactory#createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.046524210519923545,
        "org.jfree.chart$ChartFactory#createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.3692744729379982,
        "org.jfree.chart$ChartFactory#createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.3692744729379982,
        "org.jfree.chart$ChartFactory#getChartTheme()": 0,
        "org.jfree.chart$ChartFactory#setChartTheme(org.jfree.chart.ChartTheme)": 0,
        "org.jfree.chart$ChartRenderingInfo#ChartRenderingInfo()": 0.0,
        "org.jfree.chart$ChartRenderingInfo#ChartRenderingInfo(org.jfree.chart.entity.EntityCollection)": 0.0,
        "org.jfree.chart$ChartRenderingInfo#clear()": 0.0,
        "org.jfree.chart$ChartRenderingInfo#clone()": 0.0,
        "org.jfree.chart$ChartRenderingInfo#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$ChartRenderingInfo#getChartArea()": 0.0,
        "org.jfree.chart$ChartRenderingInfo#getEntityCollection()": 0.0,
        "org.jfree.chart$ChartRenderingInfo#getPlotInfo()": 0.0,
        "org.jfree.chart$ChartRenderingInfo#getRenderingSource()": 0,
        "org.jfree.chart$ChartRenderingInfo#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$ChartRenderingInfo#setChartArea(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart$ChartRenderingInfo#setEntityCollection(org.jfree.chart.entity.EntityCollection)": 0.0,
        "org.jfree.chart$ChartRenderingInfo#setRenderingSource(org.jfree.chart.RenderingSource)": 0.0,
        "org.jfree.chart$ChartRenderingInfo#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart$JFreeChart#<clinit>()": 0.03289758474798845,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)": 0.033922676577637915,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,org.jfree.chart.plot.Plot)": 0,
        "org.jfree.chart$JFreeChart#JFreeChart(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart$JFreeChart#addChangeListener(org.jfree.chart.event.ChartChangeListener)": 0.0,
        "org.jfree.chart$JFreeChart#addLegend(org.jfree.chart.title.LegendTitle)": 0,
        "org.jfree.chart$JFreeChart#addProgressListener(org.jfree.chart.event.ChartProgressListener)": 0.0,
        "org.jfree.chart$JFreeChart#addSubtitle(int,org.jfree.chart.title.Title)": 0.0,
        "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)": 0.0,
        "org.jfree.chart$JFreeChart#clearSubtitles()": 0,
        "org.jfree.chart$JFreeChart#clone()": 0.0,
        "org.jfree.chart$JFreeChart#createAlignedRectangle2D(org.jfree.chart.util.Size2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,double,double,org.jfree.chart.ChartRenderingInfo)": 0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)": 0,
        "org.jfree.chart$JFreeChart#drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart$JFreeChart#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$JFreeChart#fireChartChanged()": 0.0,
        "org.jfree.chart$JFreeChart#getAntiAlias()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundImage()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlignment()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlpha()": 0,
        "org.jfree.chart$JFreeChart#getBackgroundPaint()": 0,
        "org.jfree.chart$JFreeChart#getBorderPaint()": 0,
        "org.jfree.chart$JFreeChart#getBorderStroke()": 0,
        "org.jfree.chart$JFreeChart#getCategoryPlot()": 0,
        "org.jfree.chart$JFreeChart#getLegend()": 0.0,
        "org.jfree.chart$JFreeChart#getLegend(int)": 0.0,
        "org.jfree.chart$JFreeChart#getPadding()": 0,
        "org.jfree.chart$JFreeChart#getPlot()": 0.04264014327112208,
        "org.jfree.chart$JFreeChart#getRenderingHints()": 0,
        "org.jfree.chart$JFreeChart#getSubtitle(int)": 0.04956815970966096,
        "org.jfree.chart$JFreeChart#getSubtitleCount()": 0.04264014327112208,
        "org.jfree.chart$JFreeChart#getSubtitles()": 0.0,
        "org.jfree.chart$JFreeChart#getTextAntiAlias()": 0,
        "org.jfree.chart$JFreeChart#getTitle()": 0.0430730492253948,
        "org.jfree.chart$JFreeChart#getXYPlot()": 0,
        "org.jfree.chart$JFreeChart#handleClick(int,int,org.jfree.chart.ChartRenderingInfo)": 0,
        "org.jfree.chart$JFreeChart#isBorderVisible()": 0.0,
        "org.jfree.chart$JFreeChart#isNotify()": 0,
        "org.jfree.chart$JFreeChart#main(java.lang.String[])": 0,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)": 0.041030496993110906,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartProgressEvent)": 0.0,
        "org.jfree.chart$JFreeChart#plotChanged(org.jfree.chart.event.PlotChangeEvent)": 0.04181210050035454,
        "org.jfree.chart$JFreeChart#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$JFreeChart#removeChangeListener(org.jfree.chart.event.ChartChangeListener)": 0.0,
        "org.jfree.chart$JFreeChart#removeLegend()": 0.0,
        "org.jfree.chart$JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)": 0.0,
        "org.jfree.chart$JFreeChart#removeSubtitle(org.jfree.chart.title.Title)": 0.0,
        "org.jfree.chart$JFreeChart#setAntiAlias(boolean)": 0,
        "org.jfree.chart$JFreeChart#setBackgroundImage(java.awt.Image)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlignment(int)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlpha(float)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundPaint(java.awt.Paint)": 0.04222003309207491,
        "org.jfree.chart$JFreeChart#setBorderPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$JFreeChart#setBorderStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart$JFreeChart#setBorderVisible(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setNotify(boolean)": 0,
        "org.jfree.chart$JFreeChart#setPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart$JFreeChart#setRenderingHints(java.awt.RenderingHints)": 0.0,
        "org.jfree.chart$JFreeChart#setSubtitles(java.util.List)": 0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(boolean)": 0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(java.lang.Object)": 0,
        "org.jfree.chart$JFreeChart#setTitle(java.lang.String)": 0.0,
        "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)": 0.0,
        "org.jfree.chart$JFreeChart#titleChanged(org.jfree.chart.event.TitleChangeEvent)": 0.0430730492253948,
        "org.jfree.chart$JFreeChart#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart$LegendItem#<clinit>()": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart$LegendItem#characterIteratorToString(java.text.CharacterIterator)": 0.0,
        "org.jfree.chart$LegendItem#clone()": 0.0,
        "org.jfree.chart$LegendItem#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$LegendItem#getAttributedLabel()": 0,
        "org.jfree.chart$LegendItem#getDataset()": 0.0,
        "org.jfree.chart$LegendItem#getDatasetIndex()": 0.0,
        "org.jfree.chart$LegendItem#getDescription()": 0,
        "org.jfree.chart$LegendItem#getFillPaint()": 0.0,
        "org.jfree.chart$LegendItem#getFillPaintTransformer()": 0.0,
        "org.jfree.chart$LegendItem#getLabel()": 0.0,
        "org.jfree.chart$LegendItem#getLabelFont()": 0.0,
        "org.jfree.chart$LegendItem#getLabelPaint()": 0.0,
        "org.jfree.chart$LegendItem#getLine()": 0.0,
        "org.jfree.chart$LegendItem#getLinePaint()": 0.0,
        "org.jfree.chart$LegendItem#getLineStroke()": 0.0,
        "org.jfree.chart$LegendItem#getOutlinePaint()": 0.0,
        "org.jfree.chart$LegendItem#getOutlineStroke()": 0.0,
        "org.jfree.chart$LegendItem#getSeriesIndex()": 0.0,
        "org.jfree.chart$LegendItem#getSeriesKey()": 0.0,
        "org.jfree.chart$LegendItem#getShape()": 0.0,
        "org.jfree.chart$LegendItem#getToolTipText()": 0.0,
        "org.jfree.chart$LegendItem#getURLText()": 0.0,
        "org.jfree.chart$LegendItem#isLineVisible()": 0.0,
        "org.jfree.chart$LegendItem#isShapeFilled()": 0.0,
        "org.jfree.chart$LegendItem#isShapeOutlineVisible()": 0.0,
        "org.jfree.chart$LegendItem#isShapeVisible()": 0.0,
        "org.jfree.chart$LegendItem#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$LegendItem#setDataset(org.jfree.data.general.Dataset)": 0.0,
        "org.jfree.chart$LegendItem#setDatasetIndex(int)": 0.0,
        "org.jfree.chart$LegendItem#setDescription(java.lang.String)": 0,
        "org.jfree.chart$LegendItem#setFillPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0.0,
        "org.jfree.chart$LegendItem#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart$LegendItem#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#setLine(java.awt.Shape)": 0,
        "org.jfree.chart$LegendItem#setLinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#setLineVisible(boolean)": 0,
        "org.jfree.chart$LegendItem#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart$LegendItem#setSeriesIndex(int)": 0.0,
        "org.jfree.chart$LegendItem#setSeriesKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart$LegendItem#setShape(java.awt.Shape)": 0,
        "org.jfree.chart$LegendItem#setShapeVisible(boolean)": 0,
        "org.jfree.chart$LegendItem#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart$LegendItem#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart$LegendItem#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart$LegendItemCollection#LegendItemCollection()": 0.0,
        "org.jfree.chart$LegendItemCollection#add(org.jfree.chart.LegendItem)": 0.0,
        "org.jfree.chart$LegendItemCollection#addAll(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart$LegendItemCollection#clone()": 0.0,
        "org.jfree.chart$LegendItemCollection#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$LegendItemCollection#get(int)": 0.0,
        "org.jfree.chart$LegendItemCollection#getItemCount()": 0.0,
        "org.jfree.chart$LegendItemCollection#iterator()": 0,
        "org.jfree.chart$StandardChartTheme#StandardChartTheme(java.lang.String)": 0.4264014327112209,
        "org.jfree.chart$StandardChartTheme#apply(org.jfree.chart.JFreeChart)": 0.0430730492253948,
        "org.jfree.chart$StandardChartTheme#applyToAbstractRenderer(org.jfree.chart.renderer.AbstractRenderer)": 0.023688968483956713,
        "org.jfree.chart$StandardChartTheme#applyToBlock(org.jfree.chart.block.Block)": 0,
        "org.jfree.chart$StandardChartTheme#applyToBlockContainer(org.jfree.chart.block.BlockContainer)": 0,
        "org.jfree.chart$StandardChartTheme#applyToCategoryAxis(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToCategoryItemRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToCategoryPlot(org.jfree.chart.plot.CategoryPlot)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToFastScatterPlot(org.jfree.chart.plot.FastScatterPlot)": 0,
        "org.jfree.chart$StandardChartTheme#applyToMeterPlot(org.jfree.chart.plot.MeterPlot)": 0,
        "org.jfree.chart$StandardChartTheme#applyToMultiplePiePlot(org.jfree.chart.plot.MultiplePiePlot)": 0,
        "org.jfree.chart$StandardChartTheme#applyToPeriodAxis(org.jfree.chart.axis.PeriodAxis)": 0,
        "org.jfree.chart$StandardChartTheme#applyToPiePlot(org.jfree.chart.plot.PiePlot)": 0.050251890762960605,
        "org.jfree.chart$StandardChartTheme#applyToPlot(org.jfree.chart.plot.Plot)": 0.0430730492253948,
        "org.jfree.chart$StandardChartTheme#applyToPolarPlot(org.jfree.chart.plot.PolarPlot)": 0,
        "org.jfree.chart$StandardChartTheme#applyToSpiderWebPlot(org.jfree.chart.plot.SpiderWebPlot)": 0,
        "org.jfree.chart$StandardChartTheme#applyToSymbolAxis(org.jfree.chart.axis.SymbolAxis)": 0,
        "org.jfree.chart$StandardChartTheme#applyToThermometerPlot(org.jfree.chart.plot.ThermometerPlot)": 0,
        "org.jfree.chart$StandardChartTheme#applyToTitle(org.jfree.chart.title.Title)": 0.04956815970966096,
        "org.jfree.chart$StandardChartTheme#applyToValueAxis(org.jfree.chart.axis.ValueAxis)": 0.023688968483956713,
        "org.jfree.chart$StandardChartTheme#applyToXYAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0,
        "org.jfree.chart$StandardChartTheme#applyToXYItemRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.03892494720807615,
        "org.jfree.chart$StandardChartTheme#applyToXYPlot(org.jfree.chart.plot.XYPlot)": 0.03892494720807615,
        "org.jfree.chart$StandardChartTheme#clone()": 0.0,
        "org.jfree.chart$StandardChartTheme#createDarknessTheme()": 0,
        "org.jfree.chart$StandardChartTheme#createJFreeTheme()": 0,
        "org.jfree.chart$StandardChartTheme#createLegacyTheme()": 0,
        "org.jfree.chart$StandardChartTheme#equals(java.lang.Object)": 0.0,
        "org.jfree.chart$StandardChartTheme#getAxisLabelPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getAxisOffset()": 0,
        "org.jfree.chart$StandardChartTheme#getBarPainter()": 0,
        "org.jfree.chart$StandardChartTheme#getBaselinePaint()": 0,
        "org.jfree.chart$StandardChartTheme#getChartBackgroundPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getCrosshairPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getDomainGridlinePaint()": 0,
        "org.jfree.chart$StandardChartTheme#getDrawingSupplier()": 0.0430730492253948,
        "org.jfree.chart$StandardChartTheme#getErrorIndicatorPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getExtraLargeFont()": 0,
        "org.jfree.chart$StandardChartTheme#getGridBandAlternatePaint()": 0,
        "org.jfree.chart$StandardChartTheme#getGridBandPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getItemLabelPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getLabelLinkPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getLabelLinkStyle()": 0,
        "org.jfree.chart$StandardChartTheme#getLargeFont()": 0,
        "org.jfree.chart$StandardChartTheme#getLegendBackgroundPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getLegendItemPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getName()": 0,
        "org.jfree.chart$StandardChartTheme#getPlotBackgroundPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getPlotOutlinePaint()": 0,
        "org.jfree.chart$StandardChartTheme#getRangeGridlinePaint()": 0,
        "org.jfree.chart$StandardChartTheme#getRegularFont()": 0,
        "org.jfree.chart$StandardChartTheme#getShadowPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getSmallFont()": 0,
        "org.jfree.chart$StandardChartTheme#getSubtitlePaint()": 0,
        "org.jfree.chart$StandardChartTheme#getThermometerPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getTickLabelPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getTitlePaint()": 0,
        "org.jfree.chart$StandardChartTheme#getWallPaint()": 0,
        "org.jfree.chart$StandardChartTheme#getXYBarPainter()": 0,
        "org.jfree.chart$StandardChartTheme#isShadowVisible()": 0.0,
        "org.jfree.chart$StandardChartTheme#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart$StandardChartTheme#setAxisLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setAxisOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart$StandardChartTheme#setBarPainter(org.jfree.chart.renderer.category.BarPainter)": 0.0,
        "org.jfree.chart$StandardChartTheme#setBaselinePaint(java.awt.Paint)": 0,
        "org.jfree.chart$StandardChartTheme#setChartBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setCrosshairPaint(java.awt.Paint)": 0,
        "org.jfree.chart$StandardChartTheme#setDomainGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": 0.0,
        "org.jfree.chart$StandardChartTheme#setErrorIndicatorPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setExtraLargeFont(java.awt.Font)": 0.0,
        "org.jfree.chart$StandardChartTheme#setGridBandAlternatePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setGridBandPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setItemLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setLabelLinkPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)": 0.0,
        "org.jfree.chart$StandardChartTheme#setLargeFont(java.awt.Font)": 0.0,
        "org.jfree.chart$StandardChartTheme#setLegendBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setLegendItemPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setPlotBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setPlotOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setRangeGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setRegularFont(java.awt.Font)": 0.0,
        "org.jfree.chart$StandardChartTheme#setShadowPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setShadowVisible(boolean)": 0.0,
        "org.jfree.chart$StandardChartTheme#setSmallFont(java.awt.Font)": 0,
        "org.jfree.chart$StandardChartTheme#setSubtitlePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setThermometerPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setTickLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setTitlePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setWallPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setXYBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)": 0.0,
        "org.jfree.chart$StandardChartTheme#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$Axis#<clinit>()": 0.2672612419124244,
        "org.jfree.chart.axis$Axis#Axis(java.lang.String)": 0.2773500981126146,
        "org.jfree.chart.axis$Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)": 0.015549260339278073,
        "org.jfree.chart.axis$Axis#clone()": 0.0,
        "org.jfree.chart.axis$Axis#createAndAddEntity(double,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$Axis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$Axis#fireChangeEvent()": 0.022473328748774737,
        "org.jfree.chart.axis$Axis#getAxisLinePaint()": 0.0,
        "org.jfree.chart.axis$Axis#getAxisLineStroke()": 0.0,
        "org.jfree.chart.axis$Axis#getFixedDimension()": 0.0,
        "org.jfree.chart.axis$Axis#getLabel()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelAngle()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$Axis#getLabelFont()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelInsets()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelToolTip()": 0,
        "org.jfree.chart.axis$Axis#getLabelURL()": 0,
        "org.jfree.chart.axis$Axis#getMinorTickMarkInsideLength()": 0,
        "org.jfree.chart.axis$Axis#getMinorTickMarkOutsideLength()": 0,
        "org.jfree.chart.axis$Axis#getPlot()": 0.30339777389595485,
        "org.jfree.chart.axis$Axis#getTickLabelFont()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelInsets()": 0.0,
        "org.jfree.chart.axis$Axis#getTickLabelPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkInsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkOutsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkPaint()": 0.0,
        "org.jfree.chart.axis$Axis#getTickMarkStroke()": 0.0,
        "org.jfree.chart.axis$Axis#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.chart.axis$Axis#isAxisLineVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isMinorTickMarksVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isTickLabelsVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isTickMarksVisible()": 0.0,
        "org.jfree.chart.axis$Axis#isVisible()": 0.0,
        "org.jfree.chart.axis$Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)": 0.3448462250321423,
        "org.jfree.chart.axis$Axis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.axis$Axis#setAxisLineVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setFixedDimension(double)": 0,
        "org.jfree.chart.axis$Axis#setLabel(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelAngle(double)": 0,
        "org.jfree.chart.axis$Axis#setLabelFont(java.awt.Font)": 0.023688968483956713,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets,boolean)": 0,
        "org.jfree.chart.axis$Axis#setLabelPaint(java.awt.Paint)": 0.023688968483956713,
        "org.jfree.chart.axis$Axis#setLabelToolTip(java.lang.String)": 0,
        "org.jfree.chart.axis$Axis#setLabelURL(java.lang.String)": 0,
        "org.jfree.chart.axis$Axis#setMinorTickMarkInsideLength(float)": 0,
        "org.jfree.chart.axis$Axis#setMinorTickMarkOutsideLength(float)": 0,
        "org.jfree.chart.axis$Axis#setMinorTickMarksVisible(boolean)": 0,
        "org.jfree.chart.axis$Axis#setPlot(org.jfree.chart.plot.Plot)": 0.3283947887145927,
        "org.jfree.chart.axis$Axis#setTickLabelFont(java.awt.Font)": 0.023688968483956713,
        "org.jfree.chart.axis$Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.axis$Axis#setTickLabelPaint(java.awt.Paint)": 0.023688968483956713,
        "org.jfree.chart.axis$Axis#setTickLabelsVisible(boolean)": 0,
        "org.jfree.chart.axis$Axis#setTickMarkInsideLength(float)": 0,
        "org.jfree.chart.axis$Axis#setTickMarkOutsideLength(float)": 0,
        "org.jfree.chart.axis$Axis#setTickMarkPaint(java.awt.Paint)": 0,
        "org.jfree.chart.axis$Axis#setTickMarkStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.axis$Axis#setTickMarksVisible(boolean)": 0,
        "org.jfree.chart.axis$Axis#setVisible(boolean)": 0,
        "org.jfree.chart.axis$Axis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$AxisCollection#AxisCollection()": 0.0,
        "org.jfree.chart.axis$AxisCollection#add(org.jfree.chart.axis.Axis,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$AxisCollection#getAxesAtBottom()": 0.0,
        "org.jfree.chart.axis$AxisCollection#getAxesAtLeft()": 0.0,
        "org.jfree.chart.axis$AxisCollection#getAxesAtRight()": 0.0,
        "org.jfree.chart.axis$AxisCollection#getAxesAtTop()": 0.0,
        "org.jfree.chart.axis$AxisLocation#<clinit>()": 0.014818474149146235,
        "org.jfree.chart.axis$AxisLocation#AxisLocation(java.lang.String)": 0.014818474149146235,
        "org.jfree.chart.axis$AxisLocation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$AxisLocation#getOpposite()": 0,
        "org.jfree.chart.axis$AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)": 0,
        "org.jfree.chart.axis$AxisLocation#readResolve()": 0.0,
        "org.jfree.chart.axis$AxisLocation#toString()": 0.0,
        "org.jfree.chart.axis$AxisSpace#AxisSpace()": 0.0,
        "org.jfree.chart.axis$AxisSpace#add(double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$AxisSpace#clone()": 0.0,
        "org.jfree.chart.axis$AxisSpace#ensureAtLeast(double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$AxisSpace#ensureAtLeast(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$AxisSpace#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$AxisSpace#expand(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.axis$AxisSpace#getBottom()": 0.0,
        "org.jfree.chart.axis$AxisSpace#getLeft()": 0,
        "org.jfree.chart.axis$AxisSpace#getRight()": 0,
        "org.jfree.chart.axis$AxisSpace#getTop()": 0.0,
        "org.jfree.chart.axis$AxisSpace#hashCode()": 0.0,
        "org.jfree.chart.axis$AxisSpace#reserved(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$AxisSpace#setBottom(double)": 0.0,
        "org.jfree.chart.axis$AxisSpace#setLeft(double)": 0.0,
        "org.jfree.chart.axis$AxisSpace#setRight(double)": 0.0,
        "org.jfree.chart.axis$AxisSpace#setTop(double)": 0.0,
        "org.jfree.chart.axis$AxisSpace#shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.axis$AxisSpace#toString()": 0,
        "org.jfree.chart.axis$AxisState#AxisState()": 0.0,
        "org.jfree.chart.axis$AxisState#AxisState(double)": 0.0,
        "org.jfree.chart.axis$AxisState#cursorDown(double)": 0.0,
        "org.jfree.chart.axis$AxisState#cursorLeft(double)": 0.0,
        "org.jfree.chart.axis$AxisState#cursorRight(double)": 0,
        "org.jfree.chart.axis$AxisState#cursorUp(double)": 0.0,
        "org.jfree.chart.axis$AxisState#getCursor()": 0.0,
        "org.jfree.chart.axis$AxisState#getMax()": 0.0,
        "org.jfree.chart.axis$AxisState#getTicks()": 0.0,
        "org.jfree.chart.axis$AxisState#moveCursor(double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$AxisState#setCursor(double)": 0,
        "org.jfree.chart.axis$AxisState#setMax(double)": 0.0,
        "org.jfree.chart.axis$AxisState#setTicks(java.util.List)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#clearCategoryLabelToolTips()": 0,
        "org.jfree.chart.axis$CategoryAxis#clone()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#configure()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#drawTickMarks(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositionOffset()": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositions()": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelToolTip(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(java.lang.Comparable,java.util.List,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(int,int,int,int,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getLowerMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelLines()": 0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelWidthRatio()": 0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelFont(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getUpperMargin()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#readPaintMap(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)": 0,
        "org.jfree.chart.axis$CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositionOffset(int)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setCategoryMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setLowerMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelLines(int)": 0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelWidthRatio(float)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setUpperMargin(double)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#CategoryAxis3D()": 0,
        "org.jfree.chart.axis$CategoryAxis3D#CategoryAxis3D(java.lang.String)": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#clone()": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#<clinit>()": 0.2522624895547565,
        "org.jfree.chart.axis$DateAxis#DateAxis()": 0.0,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String)": 0.25594534844449573,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String,java.util.TimeZone)": 0.25594534844449573,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.2522624895547565,
        "org.jfree.chart.axis$DateAxis#autoAdjustRange()": 0.2522624895547565,
        "org.jfree.chart.axis$DateAxis#calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)": 0.0,
        "org.jfree.chart.axis$DateAxis#calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": 0,
        "org.jfree.chart.axis$DateAxis#calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#clone()": 0.0,
        "org.jfree.chart.axis$DateAxis#configure()": 0.4139186771923578,
        "org.jfree.chart.axis$DateAxis#correctTickDateForPosition(java.util.Date,org.jfree.chart.axis.DateTickUnit,org.jfree.chart.axis.DateTickMarkPosition)": 0.0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits()": 0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits(java.util.TimeZone)": 0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits(java.util.TimeZone,java.util.Locale)": 0.2522624895547565,
        "org.jfree.chart.axis$DateAxis#dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$DateAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": 0,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#getDateFormatOverride()": 0.0,
        "org.jfree.chart.axis$DateAxis#getMaximumDate()": 0.0,
        "org.jfree.chart.axis$DateAxis#getMinimumDate()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTickMarkPosition()": 0,
        "org.jfree.chart.axis$DateAxis#getTickUnit()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTimeZone()": 0,
        "org.jfree.chart.axis$DateAxis#getTimeline()": 0,
        "org.jfree.chart.axis$DateAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$DateAxis#isHiddenValue(long)": 0.0,
        "org.jfree.chart.axis$DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$DateAxis#setDateFormatOverride(java.text.DateFormat)": 0.0,
        "org.jfree.chart.axis$DateAxis#setMaximumDate(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis#setMinimumDate(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(double,double)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(java.util.Date,java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.2522624895547565,
        "org.jfree.chart.axis$DateAxis#setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)": 0.2522624895547565,
        "org.jfree.chart.axis$DateAxis#setTimeZone(java.util.TimeZone)": 0,
        "org.jfree.chart.axis$DateAxis#setTimeline(org.jfree.chart.axis.Timeline)": 0.0,
        "org.jfree.chart.axis$DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#zoomRange(double,double)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#DateAxis$DefaultTimeline()": 0.2522624895547565,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(java.util.Date,java.util.Date)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(long,long)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(long)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toMillisecond(long)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(java.util.Date)": 0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(long)": 0.0,
        "org.jfree.chart.axis$DateTickMarkPosition#<clinit>()": 0.24210006235312612,
        "org.jfree.chart.axis$DateTickMarkPosition#DateTickMarkPosition(java.lang.String)": 0.24210006235312612,
        "org.jfree.chart.axis$DateTickMarkPosition#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$DateTickMarkPosition#readResolve()": 0.0,
        "org.jfree.chart.axis$DateTickMarkPosition#toString()": 0.0,
        "org.jfree.chart.axis$DateTickUnit#DateTickUnit(org.jfree.chart.axis.DateTickUnitType,int)": 0.0,
        "org.jfree.chart.axis$DateTickUnit#DateTickUnit(org.jfree.chart.axis.DateTickUnitType,int,java.text.DateFormat)": 0.24210006235312612,
        "org.jfree.chart.axis$DateTickUnit#DateTickUnit(org.jfree.chart.axis.DateTickUnitType,int,org.jfree.chart.axis.DateTickUnitType,int,java.text.DateFormat)": 0.24210006235312612,
        "org.jfree.chart.axis$DateTickUnit#addToDate(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateTickUnit#dateToString(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateTickUnit#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$DateTickUnit#getCalendarField()": 0.0,
        "org.jfree.chart.axis$DateTickUnit#getMillisecondCount(org.jfree.chart.axis.DateTickUnitType,int)": 0.24210006235312612,
        "org.jfree.chart.axis$DateTickUnit#getMultiple()": 0.0,
        "org.jfree.chart.axis$DateTickUnit#getRollMultiple()": 0,
        "org.jfree.chart.axis$DateTickUnit#getRollUnitType()": 0,
        "org.jfree.chart.axis$DateTickUnit#getUnitType()": 0.0,
        "org.jfree.chart.axis$DateTickUnit#hashCode()": 0.0,
        "org.jfree.chart.axis$DateTickUnit#notNull(java.text.DateFormat)": 0,
        "org.jfree.chart.axis$DateTickUnit#rollDate(java.util.Date)": 0,
        "org.jfree.chart.axis$DateTickUnit#rollDate(java.util.Date,java.util.TimeZone)": 0,
        "org.jfree.chart.axis$DateTickUnit#toString()": 0,
        "org.jfree.chart.axis$DateTickUnit#valueToString(double)": 0,
        "org.jfree.chart.axis$DateTickUnitType#<clinit>()": 0.24210006235312612,
        "org.jfree.chart.axis$DateTickUnitType#DateTickUnitType(java.lang.String,int)": 0.24210006235312612,
        "org.jfree.chart.axis$DateTickUnitType#equals(java.lang.Object)": 0.24210006235312612,
        "org.jfree.chart.axis$DateTickUnitType#getCalendarField()": 0.0,
        "org.jfree.chart.axis$DateTickUnitType#readResolve()": 0.0,
        "org.jfree.chart.axis$DateTickUnitType#toString()": 0.24210006235312612,
        "org.jfree.chart.axis$LogAxis#LogAxis()": 0.0,
        "org.jfree.chart.axis$LogAxis#LogAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$LogAxis#autoAdjustRange()": 0.0,
        "org.jfree.chart.axis$LogAxis#calculateLog(double)": 0.0,
        "org.jfree.chart.axis$LogAxis#calculateValue(double)": 0.0,
        "org.jfree.chart.axis$LogAxis#configure()": 0.0,
        "org.jfree.chart.axis$LogAxis#createLogTickUnits(java.util.Locale)": 0.0,
        "org.jfree.chart.axis$LogAxis#createTickLabel(double)": 0,
        "org.jfree.chart.axis$LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.axis$LogAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$LogAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)": 0,
        "org.jfree.chart.axis$LogAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)": 0,
        "org.jfree.chart.axis$LogAxis#exponentLengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$LogAxis#getBase()": 0,
        "org.jfree.chart.axis$LogAxis#getNumberFormatOverride()": 0,
        "org.jfree.chart.axis$LogAxis#getSmallestValue()": 0,
        "org.jfree.chart.axis$LogAxis#getTickUnit()": 0,
        "org.jfree.chart.axis$LogAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$LogAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$LogAxis#pan(double)": 0,
        "org.jfree.chart.axis$LogAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$LogAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$LogAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$LogAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$LogAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$LogAxis#setBase(double)": 0.0,
        "org.jfree.chart.axis$LogAxis#setNumberFormatOverride(java.text.NumberFormat)": 0,
        "org.jfree.chart.axis$LogAxis#setSmallestValue(double)": 0.0,
        "org.jfree.chart.axis$LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)": 0,
        "org.jfree.chart.axis$LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)": 0,
        "org.jfree.chart.axis$LogAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$LogAxis#zoomRange(double,double)": 0,
        "org.jfree.chart.axis$MarkerAxisBand#MarkerAxisBand(org.jfree.chart.axis.NumberAxis,double,double,double,double,java.awt.Font)": 0.0,
        "org.jfree.chart.axis$MarkerAxisBand#addMarker(org.jfree.chart.plot.IntervalMarker)": 0,
        "org.jfree.chart.axis$MarkerAxisBand#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double)": 0,
        "org.jfree.chart.axis$MarkerAxisBand#drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)": 0,
        "org.jfree.chart.axis$MarkerAxisBand#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$MarkerAxisBand#getHeight(java.awt.Graphics2D)": 0,
        "org.jfree.chart.axis$MarkerAxisBand#hashCode()": 0.0,
        "org.jfree.chart.axis$NumberAxis#<clinit>()": 0.29488391230979427,
        "org.jfree.chart.axis$NumberAxis#NumberAxis()": 0.0,
        "org.jfree.chart.axis$NumberAxis#NumberAxis(java.lang.String)": 0.3120018152885698,
        "org.jfree.chart.axis$NumberAxis#autoAdjustRange()": 0.28643577734887543,
        "org.jfree.chart.axis$NumberAxis#calculateHighestVisibleTickValue()": 0,
        "org.jfree.chart.axis$NumberAxis#calculateLowestVisibleTickValue()": 0.0,
        "org.jfree.chart.axis$NumberAxis#calculateVisibleTickCount()": 0.0,
        "org.jfree.chart.axis$NumberAxis#clone()": 0.0,
        "org.jfree.chart.axis$NumberAxis#configure()": 0.23200808433365472,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits()": 0.1651445647689541,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits(java.util.Locale)": 0,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits()": 0.3120018152885698,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits(java.util.Locale)": 0,
        "org.jfree.chart.axis$NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$NumberAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)": 0.0,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeIncludesZero()": 0.016070608663330627,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeStickyZero()": 0.016070608663330627,
        "org.jfree.chart.axis$NumberAxis#getMarkerBand()": 0,
        "org.jfree.chart.axis$NumberAxis#getNumberFormatOverride()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getRangeType()": 0,
        "org.jfree.chart.axis$NumberAxis#getTickUnit()": 0.0,
        "org.jfree.chart.axis$NumberAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeIncludesZero(boolean)": 0.5144538430201883,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeStickyZero(boolean)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)": 0,
        "org.jfree.chart.axis$NumberAxis#setNumberFormatOverride(java.text.NumberFormat)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setRangeType(org.jfree.data.RangeType)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$NumberAxis3D#NumberAxis3D()": 0,
        "org.jfree.chart.axis$NumberAxis3D#NumberAxis3D(java.lang.String)": 0.0,
        "org.jfree.chart.axis$NumberAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$NumberTick#NumberTick(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": 0.0,
        "org.jfree.chart.axis$NumberTick#NumberTick(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": 0.0,
        "org.jfree.chart.axis$NumberTick#getNumber()": 0,
        "org.jfree.chart.axis$NumberTickUnit#NumberTickUnit(double)": 0.0,
        "org.jfree.chart.axis$NumberTickUnit#NumberTickUnit(double,java.text.NumberFormat)": 0.28812994971805395,
        "org.jfree.chart.axis$NumberTickUnit#NumberTickUnit(double,java.text.NumberFormat,int)": 0.3053200599093529,
        "org.jfree.chart.axis$NumberTickUnit#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$NumberTickUnit#hashCode()": 0.0,
        "org.jfree.chart.axis$NumberTickUnit#toString()": 0,
        "org.jfree.chart.axis$NumberTickUnit#valueToString(double)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#PeriodAxis(java.lang.String)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#PeriodAxis(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#PeriodAxis(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#autoAdjustRange()": 0,
        "org.jfree.chart.axis$PeriodAxis#clone()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#configure()": 0,
        "org.jfree.chart.axis$PeriodAxis#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.axis$PeriodAxis#drawTickLabels(int,java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$PeriodAxis#drawTickMarks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$PeriodAxis#drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$PeriodAxis#drawTickMarksVertical(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$PeriodAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getAutoRangeTimePeriodClass()": 0,
        "org.jfree.chart.axis$PeriodAxis#getFirst()": 0,
        "org.jfree.chart.axis$PeriodAxis#getLabelInfo()": 0,
        "org.jfree.chart.axis$PeriodAxis#getLast()": 0,
        "org.jfree.chart.axis$PeriodAxis#getLocale()": 0,
        "org.jfree.chart.axis$PeriodAxis#getMajorTickTimePeriodClass()": 0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickMarkInsideLength()": 0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickMarkOutsideLength()": 0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickMarkPaint()": 0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickMarkStroke()": 0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickTimePeriodClass()": 0,
        "org.jfree.chart.axis$PeriodAxis#getRange()": 0,
        "org.jfree.chart.axis$PeriodAxis#getTimeZone()": 0,
        "org.jfree.chart.axis$PeriodAxis#hashCode()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#isMinorTickMarksVisible()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$PeriodAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$PeriodAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0,
        "org.jfree.chart.axis$PeriodAxis#setAutoRangeTimePeriodClass(java.lang.Class)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setFirst(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setLabelInfo(org.jfree.chart.axis.PeriodAxisLabelInfo[])": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setLast(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setMajorTickTimePeriodClass(java.lang.Class)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarkInsideLength(float)": 0,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarkOutsideLength(float)": 0,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarkPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarkStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarksVisible(boolean)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickTimePeriodClass(java.lang.Class)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setTimeZone(java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$PeriodAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#<clinit>()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#SegmentedTimeline(long,int,int)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#addBaseTimelineException(java.util.Date)": 0,
        "org.jfree.chart.axis$SegmentedTimeline#addBaseTimelineException(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#addBaseTimelineExclusions(long,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#addException(java.util.Date)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#addException(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#addException(long,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#addExceptions(java.util.List)": 0,
        "org.jfree.chart.axis$SegmentedTimeline#binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#clone()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#containsDomainRange(java.util.Date,java.util.Date)": 0,
        "org.jfree.chart.axis$SegmentedTimeline#containsDomainRange(long,long)": 0,
        "org.jfree.chart.axis$SegmentedTimeline#containsDomainValue(java.util.Date)": 0,
        "org.jfree.chart.axis$SegmentedTimeline#containsDomainValue(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#equals(java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#firstMondayAfter1900()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getAdjustForDaylightSaving()": 0,
        "org.jfree.chart.axis$SegmentedTimeline#getBaseTimeline()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getDate(long)": 0,
        "org.jfree.chart.axis$SegmentedTimeline#getExceptionSegmentCount(long,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getExceptionSegments()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getGroupSegmentCount()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegment(java.util.Date)": 0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegment(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentSize()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsExcluded()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsExcludedSize()": 0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsGroupSize()": 0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsIncluded()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsIncludedSize()": 0,
        "org.jfree.chart.axis$SegmentedTimeline#getStartTime()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getTime(java.util.Date)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getTimeFromLong(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#hashCode()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#newFifteenMinuteTimeline()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#newMondayThroughFridayTimeline()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#setAdjustForDaylightSaving(boolean)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#setBaseTimeline(org.jfree.chart.axis.SegmentedTimeline)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#setExceptionSegments(java.util.List)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#setStartTime(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#toMillisecond(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#toTimelineValue(java.util.Date)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#toTimelineValue(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$BaseTimelineSegmentRange#SegmentedTimeline$BaseTimelineSegmentRange(org.jfree.chart.axis.SegmentedTimeline,long,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#SegmentedTimeline$Segment(org.jfree.chart.axis.SegmentedTimeline)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#SegmentedTimeline$Segment(org.jfree.chart.axis.SegmentedTimeline,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#after(org.jfree.chart.axis.SegmentedTimeline$Segment)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#before(org.jfree.chart.axis.SegmentedTimeline$Segment)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#calculateSegmentNumber(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#compareTo(java.lang.Object)": 0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#contained(long,long)": 0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#contains(long)": 0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#contains(long,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#contains(org.jfree.chart.axis.SegmentedTimeline$Segment)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#copy()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#dec()": 0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#dec(long)": 0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#equals(java.lang.Object)": 0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getDate()": 0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getMillisecond()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentCount()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentEnd()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentNumber()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentNumberRelativeToGroup()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentStart()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inExceptionSegments()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inExcludeSegments()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inIncludeSegments()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inc()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inc(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#intersect(long,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#moveIndexToEnd()": 0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#moveIndexToStart()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#SegmentedTimeline$SegmentRange(org.jfree.chart.axis.SegmentedTimeline,long,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#getSegmentCount()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#inExcludeSegments()": 0,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#inIncludeSegments()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#inc(long)": 0,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#intersect(long,long)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#<clinit>()": 0.4212117695871159,
        "org.jfree.chart.axis$SymbolAxis#SymbolAxis(java.lang.String,java.lang.String[])": 0.0,
        "org.jfree.chart.axis$SymbolAxis#autoAdjustRange()": 0.0,
        "org.jfree.chart.axis$SymbolAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.axis$SymbolAxis#drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,java.util.List)": 0,
        "org.jfree.chart.axis$SymbolAxis#drawGridBandsHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)": 0,
        "org.jfree.chart.axis$SymbolAxis#drawGridBandsVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)": 0,
        "org.jfree.chart.axis$SymbolAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#getGridBandAlternatePaint()": 0,
        "org.jfree.chart.axis$SymbolAxis#getGridBandPaint()": 0,
        "org.jfree.chart.axis$SymbolAxis#getSymbols()": 0,
        "org.jfree.chart.axis$SymbolAxis#isGridBandsVisible()": 0,
        "org.jfree.chart.axis$SymbolAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$SymbolAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$SymbolAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$SymbolAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.axis$SymbolAxis#setGridBandAlternatePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#setGridBandPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#setGridBandsVisible(boolean)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#valueToString(double)": 0,
        "org.jfree.chart.axis$SymbolAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$Tick#Tick(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": 0.0,
        "org.jfree.chart.axis$Tick#clone()": 0.0,
        "org.jfree.chart.axis$Tick#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$Tick#getAngle()": 0.0,
        "org.jfree.chart.axis$Tick#getRotationAnchor()": 0.0,
        "org.jfree.chart.axis$Tick#getText()": 0.0,
        "org.jfree.chart.axis$Tick#getTextAnchor()": 0.0,
        "org.jfree.chart.axis$Tick#toString()": 0,
        "org.jfree.chart.axis$TickType#<clinit>()": 0.0,
        "org.jfree.chart.axis$TickType#TickType(java.lang.String)": 0.0,
        "org.jfree.chart.axis$TickType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$TickType#readResolve()": 0.0,
        "org.jfree.chart.axis$TickType#toString()": 0,
        "org.jfree.chart.axis$TickUnit#TickUnit(double)": 0.2749570413181789,
        "org.jfree.chart.axis$TickUnit#TickUnit(double,int)": 0.3053200599093529,
        "org.jfree.chart.axis$TickUnit#compareTo(java.lang.Object)": 0.28867513459481287,
        "org.jfree.chart.axis$TickUnit#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$TickUnit#getMinorTickCount()": 0.0,
        "org.jfree.chart.axis$TickUnit#getSize()": 0.28867513459481287,
        "org.jfree.chart.axis$TickUnit#hashCode()": 0.0,
        "org.jfree.chart.axis$TickUnit#valueToString(double)": 0,
        "org.jfree.chart.axis$TickUnits#TickUnits()": 0.28867513459481287,
        "org.jfree.chart.axis$TickUnits#add(org.jfree.chart.axis.TickUnit)": 0.28867513459481287,
        "org.jfree.chart.axis$TickUnits#clone()": 0.0,
        "org.jfree.chart.axis$TickUnits#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$TickUnits#get(int)": 0,
        "org.jfree.chart.axis$TickUnits#getCeilingTickUnit(double)": 0.0,
        "org.jfree.chart.axis$TickUnits#getCeilingTickUnit(org.jfree.chart.axis.TickUnit)": 0.0,
        "org.jfree.chart.axis$TickUnits#getLargerTickUnit(org.jfree.chart.axis.TickUnit)": 0.0,
        "org.jfree.chart.axis$TickUnits#size()": 0,
        "org.jfree.chart.axis$ValueAxis#<clinit>()": 0.27590680940137824,
        "org.jfree.chart.axis$ValueAxis#ValueAxis(java.lang.String,org.jfree.chart.axis.TickUnitSource)": 0.2870487828668123,
        "org.jfree.chart.axis$ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#centerRange(double)": 0,
        "org.jfree.chart.axis$ValueAxis#clone()": 0.0,
        "org.jfree.chart.axis$ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$ValueAxis#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#getAutoRangeMinimumSize()": 0.01580348853102535,
        "org.jfree.chart.axis$ValueAxis#getAutoTickIndex()": 0,
        "org.jfree.chart.axis$ValueAxis#getDefaultAutoRange()": 0.026444294267397254,
        "org.jfree.chart.axis$ValueAxis#getDownArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getFixedAutoRange()": 0.01580348853102535,
        "org.jfree.chart.axis$ValueAxis#getLeftArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getLowerBound()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLowerMargin()": 0.01580348853102535,
        "org.jfree.chart.axis$ValueAxis#getMinorTickCount()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getRange()": 0.01962671679947149,
        "org.jfree.chart.axis$ValueAxis#getRightArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getStandardTickUnits()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpArrow()": 0,
        "org.jfree.chart.axis$ValueAxis#getUpperBound()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpperMargin()": 0.01580348853102535,
        "org.jfree.chart.axis$ValueAxis#isAutoRange()": 0.31840616903455665,
        "org.jfree.chart.axis$ValueAxis#isAutoTickUnitSelection()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isInverted()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isNegativeArrowVisible()": 0,
        "org.jfree.chart.axis$ValueAxis#isPositiveArrowVisible()": 0,
        "org.jfree.chart.axis$ValueAxis#isVerticalTickLabels()": 0.0,
        "org.jfree.chart.axis$ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$ValueAxis#pan(double)": 0,
        "org.jfree.chart.axis$ValueAxis#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.axis$ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange2(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double)": 0.24873416908154553,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double,boolean)": 0.24873416908154553,
        "org.jfree.chart.axis$ValueAxis#setAutoTickIndex(int)": 0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setDefaultAutoRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setDownArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setFixedAutoRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setInverted(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLeftArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setLowerBound(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLowerMargin(double)": 0.22019275302527214,
        "org.jfree.chart.axis$ValueAxis#setMinorTickCount(int)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setNegativeArrowVisible(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setPositiveArrowVisible(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.11320502839602564,
        "org.jfree.chart.axis$ValueAxis#setRangeAboutValue(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(double,double)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range)": 0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)": 0,
        "org.jfree.chart.axis$ValueAxis#setRightArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)": 0.1846372364689991,
        "org.jfree.chart.axis$ValueAxis#setUpArrow(java.awt.Shape)": 0,
        "org.jfree.chart.axis$ValueAxis#setUpperBound(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpperMargin(double)": 0.22019275302527214,
        "org.jfree.chart.axis$ValueAxis#setVerticalTickLabels(boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.axis$ValueAxis#zoomRange(double,double)": 0.0,
        "org.jfree.chart.axis$ValueTick#ValueTick(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": 0.0,
        "org.jfree.chart.axis$ValueTick#ValueTick(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": 0.0,
        "org.jfree.chart.axis$ValueTick#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$ValueTick#getTickType()": 0.0,
        "org.jfree.chart.axis$ValueTick#getValue()": 0.0,
        "org.jfree.chart.block$AbstractBlock#AbstractBlock()": 0.02793448664794186,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$AbstractBlock#calculateTotalHeight(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#calculateTotalWidth(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#clone()": 0.0,
        "org.jfree.chart.block$AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$AbstractBlock#getBounds()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getContentXOffset()": 0,
        "org.jfree.chart.block$AbstractBlock#getContentYOffset()": 0,
        "org.jfree.chart.block$AbstractBlock#getFrame()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getHeight()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getID()": 0,
        "org.jfree.chart.block$AbstractBlock#getMargin()": 0,
        "org.jfree.chart.block$AbstractBlock#getPadding()": 0,
        "org.jfree.chart.block$AbstractBlock#getWidth()": 0.0,
        "org.jfree.chart.block$AbstractBlock#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setBounds(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setFrame(org.jfree.chart.block.BlockFrame)": 0.036563621206356534,
        "org.jfree.chart.block$AbstractBlock#setHeight(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setID(java.lang.String)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setMargin(double,double,double,double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setMargin(org.jfree.chart.util.RectangleInsets)": 0.036429932929822974,
        "org.jfree.chart.block$AbstractBlock#setPadding(double,double,double,double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)": 0.030151134457776358,
        "org.jfree.chart.block$AbstractBlock#setWidth(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimBorder(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimMargin(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimPadding(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$AbstractBlock#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$BlockBorder#<clinit>()": 0.027756369082668444,
        "org.jfree.chart.block$BlockBorder#BlockBorder()": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double)": 0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double,java.awt.Paint)": 0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(java.awt.Paint)": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(org.jfree.chart.util.RectangleInsets,java.awt.Paint)": 0.027756369082668444,
        "org.jfree.chart.block$BlockBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$BlockBorder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockBorder#getInsets()": 0.0,
        "org.jfree.chart.block$BlockBorder#getPaint()": 0,
        "org.jfree.chart.block$BlockBorder#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$BlockBorder#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$BlockContainer#BlockContainer()": 0.0,
        "org.jfree.chart.block$BlockContainer#BlockContainer(org.jfree.chart.block.Arrangement)": 0.03329635791060134,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block)": 0.0,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$BlockContainer#clear()": 0.0,
        "org.jfree.chart.block$BlockContainer#clone()": 0.0,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockContainer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$BlockContainer#getArrangement()": 0,
        "org.jfree.chart.block$BlockContainer#getBlocks()": 0.0,
        "org.jfree.chart.block$BlockContainer#isEmpty()": 0.0,
        "org.jfree.chart.block$BlockContainer#setArrangement(org.jfree.chart.block.Arrangement)": 0.0,
        "org.jfree.chart.block$BlockParams#BlockParams()": 0.0,
        "org.jfree.chart.block$BlockParams#getGenerateEntities()": 0.0,
        "org.jfree.chart.block$BlockParams#getTranslateX()": 0,
        "org.jfree.chart.block$BlockParams#getTranslateY()": 0,
        "org.jfree.chart.block$BlockParams#setGenerateEntities(boolean)": 0.0,
        "org.jfree.chart.block$BlockParams#setTranslateX(double)": 0,
        "org.jfree.chart.block$BlockParams#setTranslateY(double)": 0,
        "org.jfree.chart.block$BlockResult#BlockResult()": 0.0,
        "org.jfree.chart.block$BlockResult#getEntityCollection()": 0.0,
        "org.jfree.chart.block$BlockResult#setEntityCollection(org.jfree.chart.entity.EntityCollection)": 0.0,
        "org.jfree.chart.block$BorderArrangement#BorderArrangement()": 0.0,
        "org.jfree.chart.block$BorderArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$BorderArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$BorderArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$BorderArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)": 0.0,
        "org.jfree.chart.block$BorderArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$BorderArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$BorderArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$BorderArrangement#clear()": 0.0,
        "org.jfree.chart.block$BorderArrangement#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$CenterArrangement#CenterArrangement()": 0.0,
        "org.jfree.chart.block$CenterArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$CenterArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$CenterArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$CenterArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$CenterArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$CenterArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$CenterArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$CenterArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$CenterArrangement#clear()": 0,
        "org.jfree.chart.block$CenterArrangement#equals(java.lang.Object)": 0,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement()": 0.036166897482533655,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$ColumnArrangement#clear()": 0,
        "org.jfree.chart.block$ColumnArrangement#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement()": 0.03578281334822566,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": 0.035410711589825554,
        "org.jfree.chart.block$FlowArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.block$FlowArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#clear()": 0.0,
        "org.jfree.chart.block$FlowArrangement#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$LabelBlock#<clinit>()": 0.0,
        "org.jfree.chart.block$LabelBlock#LabelBlock(java.lang.String)": 0,
        "org.jfree.chart.block$LabelBlock#LabelBlock(java.lang.String,java.awt.Font)": 0,
        "org.jfree.chart.block$LabelBlock#LabelBlock(java.lang.String,java.awt.Font,java.awt.Paint)": 0.0,
        "org.jfree.chart.block$LabelBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$LabelBlock#clone()": 0.0,
        "org.jfree.chart.block$LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.block$LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.block$LabelBlock#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$LabelBlock#getContentAlignmentPoint()": 0,
        "org.jfree.chart.block$LabelBlock#getFont()": 0,
        "org.jfree.chart.block$LabelBlock#getPaint()": 0,
        "org.jfree.chart.block$LabelBlock#getTextAnchor()": 0,
        "org.jfree.chart.block$LabelBlock#getToolTipText()": 0,
        "org.jfree.chart.block$LabelBlock#getURLText()": 0,
        "org.jfree.chart.block$LabelBlock#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$LabelBlock#setContentAlignmentPoint(org.jfree.chart.text.TextBlockAnchor)": 0.0,
        "org.jfree.chart.block$LabelBlock#setFont(java.awt.Font)": 0,
        "org.jfree.chart.block$LabelBlock#setPaint(java.awt.Paint)": 0,
        "org.jfree.chart.block$LabelBlock#setTextAnchor(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.block$LabelBlock#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart.block$LabelBlock#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart.block$LabelBlock#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$LengthConstraintType#<clinit>()": 0.0,
        "org.jfree.chart.block$LengthConstraintType#LengthConstraintType(java.lang.String)": 0.0,
        "org.jfree.chart.block$LengthConstraintType#equals(java.lang.Object)": 0,
        "org.jfree.chart.block$LengthConstraintType#hashCode()": 0,
        "org.jfree.chart.block$LengthConstraintType#readResolve()": 0,
        "org.jfree.chart.block$LengthConstraintType#toString()": 0,
        "org.jfree.chart.block$LineBorder#LineBorder()": 0.03669879217087869,
        "org.jfree.chart.block$LineBorder#LineBorder(java.awt.Paint,java.awt.Stroke,org.jfree.chart.util.RectangleInsets)": 0.036429932929822974,
        "org.jfree.chart.block$LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$LineBorder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$LineBorder#getInsets()": 0.0,
        "org.jfree.chart.block$LineBorder#getPaint()": 0.0,
        "org.jfree.chart.block$LineBorder#getStroke()": 0.0,
        "org.jfree.chart.block$LineBorder#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.block$LineBorder#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#<clinit>()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,double)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(org.jfree.data.Range,double)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(org.jfree.data.Range,org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#calculateConstrainedSize(org.jfree.chart.util.Size2D)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#getHeight()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#getHeightConstraintType()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#getHeightRange()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#getWidth()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#getWidthConstraintType()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#getWidthRange()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toFixedHeight(double)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toFixedWidth(double)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toRangeHeight(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toRangeWidth(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toString()": 0,
        "org.jfree.chart.block$RectangleConstraint#toUnconstrainedHeight()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toUnconstrainedWidth()": 0.0,
        "org.jfree.chart.entity$AxisEntity#AxisEntity(java.awt.Shape,org.jfree.chart.axis.Axis)": 0.0,
        "org.jfree.chart.entity$AxisEntity#AxisEntity(java.awt.Shape,org.jfree.chart.axis.Axis,java.lang.String)": 0.0,
        "org.jfree.chart.entity$AxisEntity#AxisEntity(java.awt.Shape,org.jfree.chart.axis.Axis,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$AxisEntity#clone()": 0,
        "org.jfree.chart.entity$AxisEntity#equals(java.lang.Object)": 0,
        "org.jfree.chart.entity$AxisEntity#getAxis()": 0,
        "org.jfree.chart.entity$AxisEntity#hashCode()": 0,
        "org.jfree.chart.entity$AxisEntity#readObject(java.io.ObjectInputStream)": 0,
        "org.jfree.chart.entity$AxisEntity#toString()": 0,
        "org.jfree.chart.entity$AxisEntity#writeObject(java.io.ObjectOutputStream)": 0,
        "org.jfree.chart.entity$AxisLabelEntity#AxisLabelEntity(org.jfree.chart.axis.Axis,java.awt.Shape,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$AxisLabelEntity#getAxis()": 0,
        "org.jfree.chart.entity$AxisLabelEntity#toString()": 0,
        "org.jfree.chart.entity$CategoryItemEntity#CategoryItemEntity(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#getColumnKey()": 0,
        "org.jfree.chart.entity$CategoryItemEntity#getDataset()": 0,
        "org.jfree.chart.entity$CategoryItemEntity#getRowKey()": 0,
        "org.jfree.chart.entity$CategoryItemEntity#setColumnKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#setDataset(org.jfree.data.category.CategoryDataset)": 0,
        "org.jfree.chart.entity$CategoryItemEntity#setRowKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#toString()": 0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#clone()": 0.0,
        "org.jfree.chart.entity$ChartEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getArea()": 0,
        "org.jfree.chart.entity$ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)": 0,
        "org.jfree.chart.entity$ChartEntity#getPolyCoords(java.awt.Shape)": 0,
        "org.jfree.chart.entity$ChartEntity#getRectCoords(java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.entity$ChartEntity#getShapeCoords()": 0,
        "org.jfree.chart.entity$ChartEntity#getShapeType()": 0,
        "org.jfree.chart.entity$ChartEntity#getToolTipText()": 0,
        "org.jfree.chart.entity$ChartEntity#getURLText()": 0,
        "org.jfree.chart.entity$ChartEntity#hashCode()": 0,
        "org.jfree.chart.entity$ChartEntity#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setArea(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart.entity$ChartEntity#toString()": 0,
        "org.jfree.chart.entity$ChartEntity#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#JFreeChartEntity(java.awt.Shape,org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#JFreeChartEntity(java.awt.Shape,org.jfree.chart.JFreeChart,java.lang.String)": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#JFreeChartEntity(java.awt.Shape,org.jfree.chart.JFreeChart,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#clone()": 0,
        "org.jfree.chart.entity$JFreeChartEntity#equals(java.lang.Object)": 0,
        "org.jfree.chart.entity$JFreeChartEntity#getChart()": 0,
        "org.jfree.chart.entity$JFreeChartEntity#hashCode()": 0,
        "org.jfree.chart.entity$JFreeChartEntity#readObject(java.io.ObjectInputStream)": 0,
        "org.jfree.chart.entity$JFreeChartEntity#toString()": 0,
        "org.jfree.chart.entity$JFreeChartEntity#writeObject(java.io.ObjectOutputStream)": 0,
        "org.jfree.chart.entity$LegendItemEntity#LegendItemEntity(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$LegendItemEntity#clone()": 0.0,
        "org.jfree.chart.entity$LegendItemEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$LegendItemEntity#getDataset()": 0,
        "org.jfree.chart.entity$LegendItemEntity#getSeriesKey()": 0,
        "org.jfree.chart.entity$LegendItemEntity#setDataset(org.jfree.data.general.Dataset)": 0.0,
        "org.jfree.chart.entity$LegendItemEntity#setSeriesKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$LegendItemEntity#toString()": 0,
        "org.jfree.chart.entity$PieSectionEntity#PieSectionEntity(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getDataset()": 0,
        "org.jfree.chart.entity$PieSectionEntity#getPieIndex()": 0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionIndex()": 0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionKey()": 0,
        "org.jfree.chart.entity$PieSectionEntity#hashCode()": 0,
        "org.jfree.chart.entity$PieSectionEntity#setDataset(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setPieIndex(int)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionIndex(int)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#toString()": 0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot)": 0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String)": 0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$PlotEntity#clone()": 0,
        "org.jfree.chart.entity$PlotEntity#equals(java.lang.Object)": 0,
        "org.jfree.chart.entity$PlotEntity#getPlot()": 0,
        "org.jfree.chart.entity$PlotEntity#hashCode()": 0,
        "org.jfree.chart.entity$PlotEntity#readObject(java.io.ObjectInputStream)": 0,
        "org.jfree.chart.entity$PlotEntity#toString()": 0,
        "org.jfree.chart.entity$PlotEntity#writeObject(java.io.ObjectOutputStream)": 0,
        "org.jfree.chart.entity$TitleEntity#TitleEntity(java.awt.Shape,org.jfree.chart.title.Title)": 0.0,
        "org.jfree.chart.entity$TitleEntity#TitleEntity(java.awt.Shape,org.jfree.chart.title.Title,java.lang.String)": 0.0,
        "org.jfree.chart.entity$TitleEntity#TitleEntity(java.awt.Shape,org.jfree.chart.title.Title,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$TitleEntity#clone()": 0,
        "org.jfree.chart.entity$TitleEntity#equals(java.lang.Object)": 0,
        "org.jfree.chart.entity$TitleEntity#getTitle()": 0,
        "org.jfree.chart.entity$TitleEntity#hashCode()": 0,
        "org.jfree.chart.entity$TitleEntity#readObject(java.io.ObjectInputStream)": 0,
        "org.jfree.chart.entity$TitleEntity#toString()": 0,
        "org.jfree.chart.entity$TitleEntity#writeObject(java.io.ObjectOutputStream)": 0,
        "org.jfree.chart.entity$XYItemEntity#XYItemEntity(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.entity$XYItemEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$XYItemEntity#getDataset()": 0,
        "org.jfree.chart.entity$XYItemEntity#getItem()": 0,
        "org.jfree.chart.entity$XYItemEntity#getSeriesIndex()": 0,
        "org.jfree.chart.entity$XYItemEntity#setDataset(org.jfree.data.xy.XYDataset)": 0,
        "org.jfree.chart.entity$XYItemEntity#setItem(int)": 0.0,
        "org.jfree.chart.entity$XYItemEntity#setSeriesIndex(int)": 0.0,
        "org.jfree.chart.entity$XYItemEntity#toString()": 0,
        "org.jfree.chart.event$AxisChangeEvent#AxisChangeEvent(org.jfree.chart.axis.Axis)": 0.3448462250321423,
        "org.jfree.chart.event$AxisChangeEvent#getAxis()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.1891358181931102,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": 0.1891358181931102,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": 0.04181210050035454,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": 0.3059689874425115,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.1891358181931102,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": 0.1891358181931102,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0,
        "org.jfree.chart.event$ChartProgressEvent#ChartProgressEvent(java.lang.Object,org.jfree.chart.JFreeChart,int,int)": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#getChart()": 0,
        "org.jfree.chart.event$ChartProgressEvent#getPercent()": 0,
        "org.jfree.chart.event$ChartProgressEvent#getType()": 0,
        "org.jfree.chart.event$ChartProgressEvent#setChart(org.jfree.chart.JFreeChart)": 0,
        "org.jfree.chart.event$ChartProgressEvent#setPercent(int)": 0,
        "org.jfree.chart.event$ChartProgressEvent#setType(int)": 0,
        "org.jfree.chart.event$MarkerChangeEvent#MarkerChangeEvent(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.event$MarkerChangeEvent#getMarker()": 0.0,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": 0.28080784639141065,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0,
        "org.jfree.chart.event$RendererChangeEvent#RendererChangeEvent(java.lang.Object)": 0.07706746355884525,
        "org.jfree.chart.event$RendererChangeEvent#RendererChangeEvent(java.lang.Object,boolean)": 0.07706746355884525,
        "org.jfree.chart.event$RendererChangeEvent#getRenderer()": 0.0,
        "org.jfree.chart.event$RendererChangeEvent#getSeriesVisibilityChanged()": 0.037688918072220454,
        "org.jfree.chart.event$TitleChangeEvent#TitleChangeEvent(org.jfree.chart.title.Title)": 0.0323254091917618,
        "org.jfree.chart.event$TitleChangeEvent#getTitle()": 0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#AbstractPieItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.03077287274483318,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#clone()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getLabelFormat()": 0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getNumberFormat()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getPercentFormat()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#hashCode()": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator()": 0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator(java.lang.String,java.text.DateFormat,java.text.DateFormat)": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator(java.lang.String,java.text.DateFormat,java.text.NumberFormat)": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.DateFormat)": 0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.1827434711619518,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#clone()": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)": 0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getFormatString()": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getNullYString()": 0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getXDateFormat()": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getXFormat()": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getYDateFormat()": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getYFormat()": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#hashCode()": 0.0,
        "org.jfree.chart.labels$ItemLabelAnchor#<clinit>()": 0.06876639317811906,
        "org.jfree.chart.labels$ItemLabelAnchor#ItemLabelAnchor(java.lang.String)": 0.06876639317811906,
        "org.jfree.chart.labels$ItemLabelAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$ItemLabelAnchor#readResolve()": 0.0,
        "org.jfree.chart.labels$ItemLabelAnchor#toString()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)": 0.06906026799213154,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": 0.06891286063517216,
        "org.jfree.chart.labels$ItemLabelPosition#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#getAngle()": 0,
        "org.jfree.chart.labels$ItemLabelPosition#getItemLabelAnchor()": 0,
        "org.jfree.chart.labels$ItemLabelPosition#getRotationAnchor()": 0,
        "org.jfree.chart.labels$ItemLabelPosition#getTextAnchor()": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator()": 0.03251280443811776,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.03251280443811776,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.util.Locale)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.util.Locale)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#clone()": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#getAttributedLabel(int)": 0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#setAttributedLabel(int,java.text.AttributedString)": 0.0,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator()": 0.046524210519923545,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator(java.lang.String)": 0.045454545454545456,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.045454545454545456,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator(java.lang.String,java.util.Locale)": 0.045454545454545456,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator(java.util.Locale)": 0,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#clone()": 0.0,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#StandardXYSeriesLabelGenerator()": 0.0,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#StandardXYSeriesLabelGenerator(java.lang.String)": 0.09949366763261822,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#clone()": 0.0,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)": 0.0,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int)": 0.0,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#hashCode()": 0.0,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator()": 0.27914526311954124,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator(java.lang.String,java.text.DateFormat,java.text.DateFormat)": 0.0,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator(java.lang.String,java.text.DateFormat,java.text.NumberFormat)": 0.0,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator(java.lang.String,java.text.NumberFormat,java.text.DateFormat)": 0,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.21029989116983447,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#clone()": 0.0,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)": 0,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#getTimeSeriesInstance()": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#AbstractPieLabelDistributor()": 0.03458572319330373,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#clear()": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getItemCount()": 0.0,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getPieLabelRecord(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#<clinit>()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#checkAxisIndices(java.util.List)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearAnnotations()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainAxes()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeAxes()": 0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clone()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#cloneMarkerMap(java.util.Map)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#configureDomainAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#configureRangeAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToRangeAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,int,java.lang.Comparable,java.lang.Comparable,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAnchorValue()": 0,
        "org.jfree.chart.plot$CategoryPlot#getAnnotations()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAxisOffset()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCategories()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getColumnRenderingOrder()": 0,
        "org.jfree.chart.plot$CategoryPlot#getCrosshairDatasetIndex()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataset()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetCount()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairColumnKey()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairPaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairRowKey()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePosition()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#getDrawSharedDomainAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedDomainAxisSpace()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedLegendItems()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedRangeAxisSpace()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getOrientation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getPlotType()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairPaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairValue()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMinorGridlinePaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMinorGridlineStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeZeroBaselinePaint()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRangeZeroBaselineStroke()": 0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRendererCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRowRenderingOrder()": 0,
        "org.jfree.chart.plot$CategoryPlot#getWeight()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$CategoryPlot#indexOf(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainPannable()": 0,
        "org.jfree.chart.plot$CategoryPlot#isDomainZoomable()": 0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeMinorGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangePannable()": 0,
        "org.jfree.chart.plot$CategoryPlot#isRangeZeroBaselineVisible()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeZoomable()": 0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxes(int,java.util.List)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxis(int,int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxes(int,java.util.List)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxis(int,int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CategoryCrosshairState)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setCrosshairDatasetIndex(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setCrosshairDatasetIndex(int,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairColumnKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairColumnKey(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairRowKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairRowKey(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDrawSharedDomainAxis(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangePannable(boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])": 0,
        "org.jfree.chart.plot$CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setWeight(int)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoom(double)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#CombinedDomainXYPlot()": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#CombinedDomainXYPlot(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot,int)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#clone()": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getGap()": 0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getPlotType()": 0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getSubplots()": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#remove(org.jfree.chart.plot.XYPlot)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setGap(double)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#CombinedRangeXYPlot()": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#CombinedRangeXYPlot(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot,int)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#clone()": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getGap()": 0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getPlotType()": 0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getSubplots()": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#remove(org.jfree.chart.plot.XYPlot)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#setFixedDomainAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#setGap(double)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$CrosshairState#CrosshairState()": 0.0,
        "org.jfree.chart.plot$CrosshairState#CrosshairState(boolean)": 0.0,
        "org.jfree.chart.plot$CrosshairState#getAnchor()": 0.0,
        "org.jfree.chart.plot$CrosshairState#getAnchorX()": 0,
        "org.jfree.chart.plot$CrosshairState#getAnchorY()": 0,
        "org.jfree.chart.plot$CrosshairState#getCrosshairDistance()": 0,
        "org.jfree.chart.plot$CrosshairState#getCrosshairX()": 0.0,
        "org.jfree.chart.plot$CrosshairState#getCrosshairY()": 0.0,
        "org.jfree.chart.plot$CrosshairState#getDatasetIndex()": 0.0,
        "org.jfree.chart.plot$CrosshairState#getDomainAxisIndex()": 0.0,
        "org.jfree.chart.plot$CrosshairState#getRangeAxisIndex()": 0.0,
        "org.jfree.chart.plot$CrosshairState#setAnchor(java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CrosshairState#setAnchorX(double)": 0.0,
        "org.jfree.chart.plot$CrosshairState#setAnchorY(double)": 0.0,
        "org.jfree.chart.plot$CrosshairState#setCrosshairDistance(double)": 0.0,
        "org.jfree.chart.plot$CrosshairState#setCrosshairX(double)": 0.0,
        "org.jfree.chart.plot$CrosshairState#setCrosshairY(double)": 0.0,
        "org.jfree.chart.plot$CrosshairState#setDatasetIndex(int)": 0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairPoint(double,double,double,double,org.jfree.chart.plot.PlotOrientation)": 0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairPoint(double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)": 0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairX(double)": 0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairX(double,int)": 0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairY(double)": 0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairY(double,int)": 0,
        "org.jfree.chart.plot$DatasetRenderingOrder#<clinit>()": 0.3155115074164764,
        "org.jfree.chart.plot$DatasetRenderingOrder#DatasetRenderingOrder(java.lang.String)": 0.3155115074164764,
        "org.jfree.chart.plot$DatasetRenderingOrder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#hashCode()": 0,
        "org.jfree.chart.plot$DatasetRenderingOrder#readResolve()": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#toString()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 0.2726248784031353,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 0.2726248784031353,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.2726248784031353,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": 0.037837008694065886,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 0.2726248784031353,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": 0.2726248784031353,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": 0.2726248784031353,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double,java.awt.Paint)": 0,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#clone()": 0.0,
        "org.jfree.chart.plot$IntervalMarker#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#getEndValue()": 0.0,
        "org.jfree.chart.plot$IntervalMarker#getGradientPaintTransformer()": 0,
        "org.jfree.chart.plot$IntervalMarker#getStartValue()": 0.0,
        "org.jfree.chart.plot$IntervalMarker#setEndValue(double)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#setStartValue(double)": 0.0,
        "org.jfree.chart.plot$Marker#Marker()": 0.0,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.0,
        "org.jfree.chart.plot$Marker#addChangeListener(org.jfree.chart.event.MarkerChangeListener)": 0.0,
        "org.jfree.chart.plot$Marker#clone()": 0.0,
        "org.jfree.chart.plot$Marker#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$Marker#getAlpha()": 0.0,
        "org.jfree.chart.plot$Marker#getLabel()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelAnchor()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelFont()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelOffset()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelOffsetType()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelPaint()": 0.0,
        "org.jfree.chart.plot$Marker#getLabelTextAnchor()": 0.0,
        "org.jfree.chart.plot$Marker#getListeners(java.lang.Class)": 0.0,
        "org.jfree.chart.plot$Marker#getOutlinePaint()": 0.0,
        "org.jfree.chart.plot$Marker#getOutlineStroke()": 0.0,
        "org.jfree.chart.plot$Marker#getPaint()": 0.0,
        "org.jfree.chart.plot$Marker#getStroke()": 0.0,
        "org.jfree.chart.plot$Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)": 0.0,
        "org.jfree.chart.plot$Marker#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)": 0.0,
        "org.jfree.chart.plot$Marker#setAlpha(float)": 0.0,
        "org.jfree.chart.plot$Marker#setLabel(java.lang.String)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelAnchor(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#setLabelTextAnchor(org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.plot$Marker#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Marker#setPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Marker#setStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Marker#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#clone()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$MultiplePiePlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsKey()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsPaint()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataExtractOrder()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataset()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getLegendItemShape()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getLimit()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#getPieChart()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getPlotType()": 0,
        "org.jfree.chart.plot$MultiplePiePlot#prefetchSectionPaints()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setLegendItemShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setLimit(double)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setPieChart(org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#PieLabelDistributor(int)": 0.03458572319330373,
        "org.jfree.chart.plot$PieLabelDistributor#adjustDownwards(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#adjustInwards()": 0,
        "org.jfree.chart.plot$PieLabelDistributor#adjustUpwards(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#distributeLabels(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#isOverlap()": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#sort()": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#spreadEvenly(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#toString()": 0,
        "org.jfree.chart.plot$PieLabelLinkStyle#<clinit>()": 0.3950042642735977,
        "org.jfree.chart.plot$PieLabelLinkStyle#PieLabelLinkStyle(java.lang.String)": 0.3950042642735977,
        "org.jfree.chart.plot$PieLabelLinkStyle#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PieLabelLinkStyle#hashCode()": 0,
        "org.jfree.chart.plot$PieLabelLinkStyle#readResolve()": 0.0,
        "org.jfree.chart.plot$PieLabelLinkStyle#toString()": 0.0,
        "org.jfree.chart.plot$PiePlot#<clinit>()": 0.03458572319330373,
        "org.jfree.chart.plot$PiePlot#PiePlot()": 0.0,
        "org.jfree.chart.plot$PiePlot#PiePlot(org.jfree.data.general.PieDataset)": 0.03458572319330373,
        "org.jfree.chart.plot$PiePlot#clearSectionOutlinePaints(boolean)": 0,
        "org.jfree.chart.plot$PiePlot#clearSectionOutlineStrokes(boolean)": 0,
        "org.jfree.chart.plot$PiePlot#clearSectionPaints(boolean)": 0.050251890762960605,
        "org.jfree.chart.plot$PiePlot#clone()": 0.0,
        "org.jfree.chart.plot$PiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": 0,
        "org.jfree.chart.plot$PiePlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PiePlot#getArcBounds(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double,double)": 0.0,
        "org.jfree.chart.plot$PiePlot#getAutoPopulateSectionOutlinePaint()": 0.04891159880445185,
        "org.jfree.chart.plot$PiePlot#getAutoPopulateSectionOutlineStroke()": 0.04891159880445185,
        "org.jfree.chart.plot$PiePlot#getAutoPopulateSectionPaint()": 0.04891159880445185,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlinePaint()": 0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlineStroke()": 0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getDataset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getDirection()": 0.0,
        "org.jfree.chart.plot$PiePlot#getExplodePercent(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getIgnoreNullValues()": 0,
        "org.jfree.chart.plot$PiePlot#getIgnoreZeroValues()": 0,
        "org.jfree.chart.plot$PiePlot#getInteriorGap()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelBackgroundPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelDistributor()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelFont()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelGap()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkDepth()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkMargin()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStroke()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStyle()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinksVisible()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlinePaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlineStroke()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelPadding()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLabelShadowPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getLegendItemShape()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelGenerator()": 0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelToolTipGenerator()": 0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelURLGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getMaximumExplodePercent()": 0.0,
        "org.jfree.chart.plot$PiePlot#getMaximumLabelWidth()": 0.0,
        "org.jfree.chart.plot$PiePlot#getMinimumArcAngleToDraw()": 0.0,
        "org.jfree.chart.plot$PiePlot#getPieIndex()": 0,
        "org.jfree.chart.plot$PiePlot#getPlotType()": 0,
        "org.jfree.chart.plot$PiePlot#getSectionKey(int)": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinePaint(java.lang.Comparable)": 0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlineStroke(java.lang.Comparable)": 0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinesVisible()": 0,
        "org.jfree.chart.plot$PiePlot#getSectionPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getShadowPaint()": 0,
        "org.jfree.chart.plot$PiePlot#getShadowXOffset()": 0,
        "org.jfree.chart.plot$PiePlot#getShadowYOffset()": 0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabelOffset()": 0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabels()": 0.0,
        "org.jfree.chart.plot$PiePlot#getStartAngle()": 0.0,
        "org.jfree.chart.plot$PiePlot#getToolTipGenerator()": 0,
        "org.jfree.chart.plot$PiePlot#getURLGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PiePlot#isCircular()": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$PiePlot#setAutoPopulateSectionOutlinePaint(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setAutoPopulateSectionOutlineStroke(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setAutoPopulateSectionPaint(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setBaseSectionPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setDataset(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.chart.plot$PiePlot#setDirection(org.jfree.chart.util.Rotation)": 0.0,
        "org.jfree.chart.plot$PiePlot#setExplodePercent(java.lang.Comparable,double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setIgnoreNullValues(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setIgnoreZeroValues(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setInteriorGap(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)": 0,
        "org.jfree.chart.plot$PiePlot#setLabelFont(java.awt.Font)": 0.04891159880445185,
        "org.jfree.chart.plot$PiePlot#setLabelGap(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.053300179088902604,
        "org.jfree.chart.plot$PiePlot#setLabelLinkMargin(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinkPaint(java.awt.Paint)": 0.04891159880445185,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)": 0.04891159880445185,
        "org.jfree.chart.plot$PiePlot#setLabelLinksVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelPadding(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.plot$PiePlot#setLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelShadowPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendItemShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#setMaximumLabelWidth(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setMinimumArcAngleToDraw(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setPieIndex(int)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSectionPaint(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setShadowPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PiePlot#setShadowXOffset(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setShadowYOffset(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.plot$PiePlot#setSimpleLabels(boolean)": 0,
        "org.jfree.chart.plot$PiePlot#setStartAngle(double)": 0.0,
        "org.jfree.chart.plot$PiePlot#setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)": 0.051708768999501914,
        "org.jfree.chart.plot$PiePlot#setURLGenerator(org.jfree.chart.urls.PieURLGenerator)": 0.0,
        "org.jfree.chart.plot$PiePlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#PiePlot3D()": 0.0,
        "org.jfree.chart.plot$PiePlot3D#PiePlot3D(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#getDarkerSides()": 0.0,
        "org.jfree.chart.plot$PiePlot3D#getDepthFactor()": 0,
        "org.jfree.chart.plot$PiePlot3D#getPlotType()": 0,
        "org.jfree.chart.plot$PiePlot3D#isAngleAtBack(double)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#isAngleAtFront(double)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#setDarkerSides(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot3D#setDepthFactor(double)": 0.0,
        "org.jfree.chart.plot$Plot#<clinit>()": 0.2754306972098739,
        "org.jfree.chart.plot$Plot#Plot()": 0.2754306972098739,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.03169416888856554,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": 0.02234950781338371,
        "org.jfree.chart.plot$Plot#clone()": 0.0,
        "org.jfree.chart.plot$Plot#createAndAddEntity(java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#fireChangeEvent()": 0.030379844191292645,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": 0.0430730492253948,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": 0.03403053909650287,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getInsets()": 0.0,
        "org.jfree.chart.plot$Plot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": 0.0,
        "org.jfree.chart.plot$Plot#getParent()": 0.3027650354097492,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$Plot#isNotify()": 0.0,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": 0.0,
        "org.jfree.chart.plot$Plot#isSubplot()": 0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": 0.28080784639141065,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": 0.0,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": 0.042014581590156766,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": 0.04285495643554833,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier,boolean)": 0,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": 0.0,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": 0.036563621206356534,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": 0.03413943709994594,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$Plot#setNotify(boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": 0.04285495643554833,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$Plot#zoom(double)": 0,
        "org.jfree.chart.plot$PlotOrientation#<clinit>()": 0.30927685641354336,
        "org.jfree.chart.plot$PlotOrientation#PlotOrientation(java.lang.String)": 0.30927685641354336,
        "org.jfree.chart.plot$PlotOrientation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PlotOrientation#hashCode()": 0,
        "org.jfree.chart.plot$PlotOrientation#readResolve()": 0.0,
        "org.jfree.chart.plot$PlotOrientation#toString()": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#PlotRenderingInfo(org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#addSubplotInfo(org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#clone()": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#getDataArea()": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#getOwner()": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#getPlotArea()": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#getSubplotCount()": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$PlotRenderingInfo#getSubplotInfo(int)": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#setDataArea(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#setPlotArea(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$PlotState#PlotState()": 0.0,
        "org.jfree.chart.plot$PlotState#getSharedAxisStates()": 0.0,
        "org.jfree.chart.plot$PolarPlot#<clinit>()": 0.0,
        "org.jfree.chart.plot$PolarPlot#PolarPlot()": 0.0,
        "org.jfree.chart.plot$PolarPlot#PolarPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)": 0.0,
        "org.jfree.chart.plot$PolarPlot#addCornerTextItem(java.lang.String)": 0.0,
        "org.jfree.chart.plot$PolarPlot#clearCornerTextItems()": 0,
        "org.jfree.chart.plot$PolarPlot#clone()": 0.0,
        "org.jfree.chart.plot$PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0,
        "org.jfree.chart.plot$PolarPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$PolarPlot#drawAxis(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.plot$PolarPlot#drawCornerTextItems(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.plot$PolarPlot#drawGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List,java.util.List)": 0,
        "org.jfree.chart.plot$PolarPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleGridlinePaint()": 0,
        "org.jfree.chart.plot$PolarPlot#getAngleGridlineStroke()": 0,
        "org.jfree.chart.plot$PolarPlot#getAngleLabelFont()": 0,
        "org.jfree.chart.plot$PolarPlot#getAngleLabelPaint()": 0,
        "org.jfree.chart.plot$PolarPlot#getAngleTickUnit()": 0,
        "org.jfree.chart.plot$PolarPlot#getAxis()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$PolarPlot#getDataset()": 0,
        "org.jfree.chart.plot$PolarPlot#getLegendItems()": 0,
        "org.jfree.chart.plot$PolarPlot#getMaxRadius()": 0,
        "org.jfree.chart.plot$PolarPlot#getOrientation()": 0,
        "org.jfree.chart.plot$PolarPlot#getPlotType()": 0,
        "org.jfree.chart.plot$PolarPlot#getRadiusGridlinePaint()": 0,
        "org.jfree.chart.plot$PolarPlot#getRadiusGridlineStroke()": 0,
        "org.jfree.chart.plot$PolarPlot#getRenderer()": 0,
        "org.jfree.chart.plot$PolarPlot#getSeriesCount()": 0,
        "org.jfree.chart.plot$PolarPlot#isAngleGridlinesVisible()": 0,
        "org.jfree.chart.plot$PolarPlot#isAngleLabelsVisible()": 0,
        "org.jfree.chart.plot$PolarPlot#isDomainZoomable()": 0,
        "org.jfree.chart.plot$PolarPlot#isRadiusGridlinesVisible()": 0,
        "org.jfree.chart.plot$PolarPlot#isRangeZoomable()": 0,
        "org.jfree.chart.plot$PolarPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$PolarPlot#refreshAngleTicks()": 0,
        "org.jfree.chart.plot$PolarPlot#removeCornerTextItem(java.lang.String)": 0,
        "org.jfree.chart.plot$PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$PolarPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelsVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleTickUnit(org.jfree.chart.axis.TickUnit)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setDataset(org.jfree.data.xy.XYDataset)": 0,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setRenderer(org.jfree.chart.renderer.PolarItemRenderer)": 0,
        "org.jfree.chart.plot$PolarPlot#translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.plot$PolarPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoom(double)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0,
        "org.jfree.chart.plot$RingPlot#RingPlot()": 0.0,
        "org.jfree.chart.plot$RingPlot#RingPlot(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.chart.plot$RingPlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": 0,
        "org.jfree.chart.plot$RingPlot#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$RingPlot#extendLine(java.awt.geom.Line2D,double,double)": 0,
        "org.jfree.chart.plot$RingPlot#getInnerSeparatorExtension()": 0,
        "org.jfree.chart.plot$RingPlot#getLabelLinkDepth()": 0,
        "org.jfree.chart.plot$RingPlot#getOuterSeparatorExtension()": 0,
        "org.jfree.chart.plot$RingPlot#getSectionDepth()": 0,
        "org.jfree.chart.plot$RingPlot#getSeparatorPaint()": 0,
        "org.jfree.chart.plot$RingPlot#getSeparatorStroke()": 0,
        "org.jfree.chart.plot$RingPlot#getSeparatorsVisible()": 0,
        "org.jfree.chart.plot$RingPlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$RingPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$RingPlot#setInnerSeparatorExtension(double)": 0.0,
        "org.jfree.chart.plot$RingPlot#setOuterSeparatorExtension(double)": 0.0,
        "org.jfree.chart.plot$RingPlot#setSectionDepth(double)": 0.0,
        "org.jfree.chart.plot$RingPlot#setSeparatorPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$RingPlot#setSeparatorStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$RingPlot#setSeparatorsVisible(boolean)": 0.0,
        "org.jfree.chart.plot$RingPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$SeriesRenderingOrder#<clinit>()": 0.45343960638161507,
        "org.jfree.chart.plot$SeriesRenderingOrder#SeriesRenderingOrder(java.lang.String)": 0.45343960638161507,
        "org.jfree.chart.plot$SeriesRenderingOrder#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$SeriesRenderingOrder#hashCode()": 0,
        "org.jfree.chart.plot$SeriesRenderingOrder#readResolve()": 0.0,
        "org.jfree.chart.plot$SeriesRenderingOrder#toString()": 0.0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double)": 0.0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke)": 0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.0,
        "org.jfree.chart.plot$ValueMarker#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.plot$ValueMarker#getValue()": 0.0,
        "org.jfree.chart.plot$ValueMarker#setValue(double)": 0.0,
        "org.jfree.chart.plot$XYPlot#<clinit>()": 0.45343960638161507,
        "org.jfree.chart.plot$XYPlot#XYPlot()": 0.0,
        "org.jfree.chart.plot$XYPlot#XYPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)": 0.45343960638161507,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0.0,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#canSelectByPoint()": 0,
        "org.jfree.chart.plot$XYPlot#canSelectByRegion()": 0,
        "org.jfree.chart.plot$XYPlot#checkAxisIndices(java.util.List)": 0.45343960638161507,
        "org.jfree.chart.plot$XYPlot#clearAnnotations()": 0,
        "org.jfree.chart.plot$XYPlot#clearDomainAxes()": 0,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#clearRangeAxes()": 0,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#clearSelection()": 0,
        "org.jfree.chart.plot$XYPlot#clone()": 0.0,
        "org.jfree.chart.plot$XYPlot#configureDomainAxes()": 0.45343960638161507,
        "org.jfree.chart.plot$XYPlot#configureRangeAxes()": 0.45343960638161507,
        "org.jfree.chart.plot$XYPlot#convertToDataSpace(java.awt.geom.GeneralPath,java.awt.geom.Rectangle2D,org.jfree.data.xy.XYDataset)": 0,
        "org.jfree.chart.plot$XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.45343960638161507,
        "org.jfree.chart.plot$XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0,
        "org.jfree.chart.plot$XYPlot#drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#equals(java.lang.Object)": 0.03829197905337418,
        "org.jfree.chart.plot$XYPlot#findSelectionStateForDataset(org.jfree.data.xy.XYDataset,java.lang.Object)": 0,
        "org.jfree.chart.plot$XYPlot#getAnnotations()": 0.03829197905337418,
        "org.jfree.chart.plot$XYPlot#getAxisOffset()": 0,
        "org.jfree.chart.plot$XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 0.49718307617612556,
        "org.jfree.chart.plot$XYPlot#getDataset()": 0,
        "org.jfree.chart.plot$XYPlot#getDataset(int)": 0.45343960638161507,
        "org.jfree.chart.plot$XYPlot#getDatasetCount()": 0.02956561979945413,
        "org.jfree.chart.plot$XYPlot#getDatasetRenderingOrder()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)": 0.5,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToRangeAxis(java.lang.Integer)": 0.0262431940540739,
        "org.jfree.chart.plot$XYPlot#getDomainAxis()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxis(int)": 0.026860765467512676,
        "org.jfree.chart.plot$XYPlot#getDomainAxisCount()": 0.03892494720807615,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisForDataset(int)": 0.02956561979945413,
        "org.jfree.chart.plot$XYPlot#getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.49718307617612556,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairPaint()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairValue()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainGridlinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainGridlineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#getDomainMinorGridlinePaint()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainMinorGridlineStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainTickBandPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselinePaint()": 0,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselineStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getFixedDomainAxisSpace()": 0.0,
        "org.jfree.chart.plot$XYPlot#getFixedLegendItems()": 0.0,
        "org.jfree.chart.plot$XYPlot#getFixedRangeAxisSpace()": 0.0,
        "org.jfree.chart.plot$XYPlot#getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.03077287274483318,
        "org.jfree.chart.plot$XYPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$XYPlot#getOrientation()": 0.0,
        "org.jfree.chart.plot$XYPlot#getPlotType()": 0,
        "org.jfree.chart.plot$XYPlot#getQuadrantOrigin()": 0.0,
        "org.jfree.chart.plot$XYPlot#getQuadrantPaint(int)": 0,
        "org.jfree.chart.plot$XYPlot#getRangeAxis()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxis(int)": 0.030151134457776358,
        "org.jfree.chart.plot$XYPlot#getRangeAxisCount()": 0.03892494720807615,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisForDataset(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": 0.49718307617612556,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairPaint()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairValue()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeGridlinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeGridlineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0,
        "org.jfree.chart.plot$XYPlot#getRangeMinorGridlinePaint()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeMinorGridlineStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeTickBandPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselinePaint()": 0,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselineStroke()": 0,
        "org.jfree.chart.plot$XYPlot#getRenderer()": 0.6382847385042254,
        "org.jfree.chart.plot$XYPlot#getRenderer(int)": 0.5277130021690084,
        "org.jfree.chart.plot$XYPlot#getRendererCount()": 0.027756369082668444,
        "org.jfree.chart.plot$XYPlot#getRendererForDataset(org.jfree.data.xy.XYDataset)": 0.514840014921,
        "org.jfree.chart.plot$XYPlot#getSeriesCount()": 0,
        "org.jfree.chart.plot$XYPlot#getSeriesRenderingOrder()": 0.0,
        "org.jfree.chart.plot$XYPlot#getWeight()": 0.0,
        "org.jfree.chart.plot$XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0,
        "org.jfree.chart.plot$XYPlot#indexOf(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairLockedOnData()": 0,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainMinorGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainPannable()": 0,
        "org.jfree.chart.plot$XYPlot#isDomainZeroBaselineVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainZoomable()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairLockedOnData()": 0,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeMinorGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangePannable()": 0,
        "org.jfree.chart.plot$XYPlot#isRangeZeroBaselineVisible()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeZoomable()": 0.0,
        "org.jfree.chart.plot$XYPlot#mapDatasetToDomainAxes(int,java.util.List)": 0.45343960638161507,
        "org.jfree.chart.plot$XYPlot#mapDatasetToDomainAxis(int,int)": 0.45343960638161507,
        "org.jfree.chart.plot$XYPlot#mapDatasetToRangeAxes(int,java.util.List)": 0.022990024493585143,
        "org.jfree.chart.plot$XYPlot#mapDatasetToRangeAxis(int,int)": 0.022990024493585143,
        "org.jfree.chart.plot$XYPlot#panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0,
        "org.jfree.chart.plot$XYPlot#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)": 0.0,
        "org.jfree.chart.plot$XYPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.037688918072220454,
        "org.jfree.chart.plot$XYPlot#select(double,double,java.awt.geom.Rectangle2D,org.jfree.chart.RenderingSource)": 0,
        "org.jfree.chart.plot$XYPlot#select(java.awt.geom.GeneralPath,java.awt.geom.Rectangle2D,org.jfree.chart.RenderingSource)": 0,
        "org.jfree.chart.plot$XYPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": 0.03829197905337418,
        "org.jfree.chart.plot$XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDataset(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairLockedOnData(boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairPaint(java.awt.Paint)": 0.03892494720807615,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairVisible(boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinePaint(java.awt.Paint)": 0.03829197905337418,
        "org.jfree.chart.plot$XYPlot#setDomainGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainMinorGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainMinorGridlineStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainMinorGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainPannable(boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainTickBandPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselinePaint(java.awt.Paint)": 0.03892494720807615,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineStroke(java.awt.Stroke)": 0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineVisible(boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.03413943709994594,
        "org.jfree.chart.plot$XYPlot#setQuadrantOrigin(java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#setQuadrantPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairPaint(java.awt.Paint)": 0.03829197905337418,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinePaint(java.awt.Paint)": 0.03829197905337418,
        "org.jfree.chart.plot$XYPlot#setRangeGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeMinorGridlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeMinorGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeMinorGridlinesVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangePannable(boolean)": 0,
        "org.jfree.chart.plot$XYPlot#setRangeTickBandPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselinePaint(java.awt.Paint)": 0.03829197905337418,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)": 0.055048188256318034,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)": 0.055048188256318034,
        "org.jfree.chart.plot$XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.07106690545187015,
        "org.jfree.chart.plot$XYPlot#setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])": 0,
        "org.jfree.chart.plot$XYPlot#setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)": 0,
        "org.jfree.chart.plot$XYPlot#setWeight(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#<clinit>()": 0.20955232198356236,
        "org.jfree.chart.renderer$AbstractRenderer#AbstractRenderer()": 0.06906026799213154,
        "org.jfree.chart.renderer$AbstractRenderer#addChangeListener(org.jfree.chart.event.RendererChangeListener)": 0.016209350304978644,
        "org.jfree.chart.renderer$AbstractRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,double,double,org.jfree.chart.plot.PlotOrientation)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#clearSeriesPaints(boolean)": 0.023688968483956713,
        "org.jfree.chart.renderer$AbstractRenderer#clearSeriesStrokes(boolean)": 0.023688968483956713,
        "org.jfree.chart.renderer$AbstractRenderer#clone()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#fireChangeEvent()": 0.07706746355884525,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesFillPaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesOutlinePaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesOutlineStroke()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesPaint()": 0.023544080467400554,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesShape()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesStroke()": 0.023544080467400554,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseCreateEntities()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseFillPaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelFont()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelPaint()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelsVisible()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendShape()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendTextFont()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendTextPaint()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseNegativeItemLabelPosition()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseOutlinePaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseOutlineStroke()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBasePaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBasePositiveItemLabelPosition()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseSeriesVisible()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseSeriesVisibleInLegend()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseShape()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseStroke()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getDataBoundsIncludesVisibleSeriesOnly()": 0.018417736717093933,
        "org.jfree.chart.renderer$AbstractRenderer#getDefaultEntityRadius()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemCreateEntity(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemFillPaint(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelAnchorOffset()": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelFont(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelPaint(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemOutlinePaint(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemOutlineStroke(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemPaint(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemShape(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemStroke(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemVisible(int,int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendShape(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendTextFont(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendTextPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getNegativeItemLabelPosition(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getPositiveItemLabelPosition(int,int,boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesCreateEntities(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesFillPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelFont(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelPaint(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelsVisible(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesNegativeItemLabelPosition(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesOutlinePaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesOutlineStroke(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesPositiveItemLabelPosition(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesShape(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesStroke(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesVisible(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesVisibleInLegend(int)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#getTreatLegendShapeAsLine()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#hashCode()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#isItemLabelVisible(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesItemLabelsVisible(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesVisible(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesVisibleInLegend(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendShape(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendTextFont(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendTextPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesFillPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesOutlinePaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesOutlineStroke(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesShape(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesStroke(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)": 0.07706746355884525,
        "org.jfree.chart.renderer$AbstractRenderer#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)": 0.08703882797784893,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesFillPaint(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesOutlinePaint(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesOutlineStroke(boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesPaint(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesShape(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesStroke(boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseCreateEntities(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseCreateEntities(boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseFillPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelFont(java.awt.Font)": 0.02340181886004545,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)": 0.02340181886004545,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint)": 0.02340181886004545,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)": 0.02340181886004545,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelsVisible(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendTextFont(java.awt.Font)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendTextPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePaint(java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisible(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisible(boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisibleInLegend(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseShape(java.awt.Shape,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setDataBoundsIncludesVisibleSeriesOnly(boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#setDefaultEntityRadius(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setItemLabelAnchorOffset(double)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendShape(int,java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendTextFont(int,java.awt.Font)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendTextPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesShape(int,java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesStroke(int,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisible(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setTreatLegendShapeAsLine(boolean)": 0,
        "org.jfree.chart.renderer$AbstractRenderer#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.renderer$RendererState#RendererState(org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer$RendererState#getEntityCollection()": 0.0,
        "org.jfree.chart.renderer$RendererState#getInfo()": 0.0,
        "org.jfree.chart.renderer$RendererUtilities#RendererUtilities()": 0,
        "org.jfree.chart.renderer$RendererUtilities#findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)": 0.0,
        "org.jfree.chart.renderer$RendererUtilities#findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)": 0.0,
        "org.jfree.chart.renderer$RendererUtilities#findLiveItemsUpperBound(org.jfree.data.xy.XYDataset,int,double,double)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#AbstractCategoryItemRenderer()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.category.CategoryDataset,int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.category.CategoryDataset,int,int,boolean,double,double)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#clone()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,boolean,double,double,boolean)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseItemLabelGenerator()": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseToolTipGenerator()": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseURLGenerator()": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getColumnCount()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getDomainAxis(org.jfree.chart.plot.CategoryPlot,int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getDrawingSupplier()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getItemLabelGenerator(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItem(int,int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemLabelGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemToolTipGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemURLGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItems()": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getPassCount()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getPlot()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getRangeAxis(org.jfree.chart.plot.CategoryPlot,int)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getRowCount()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesItemLabelGenerator(int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesURLGenerator(int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getToolTipGenerator(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getURLGenerator(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#hashCode()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#removeAnnotations()": 0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setPlot(org.jfree.chart.plot.CategoryPlot)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CategoryCrosshairState,java.lang.Comparable,java.lang.Comparable,double,int,double,double,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#<clinit>()": 0.3086066999241838,
        "org.jfree.chart.renderer.category$BarRenderer#BarRenderer()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarL0L1(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,int)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#drawItemLabelForBar(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getBarPainter()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getBase()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getDefaultBarPainter()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getDefaultShadowsVisible()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getGradientPaintTransformer()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getIncludeBaseInRange()": 0,
        "org.jfree.chart.renderer.category$BarRenderer#getItemMargin()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getLegendItem(int,int)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getLowerClip()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getMaximumBarWidth()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getMinimumBarLength()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getNegativeItemLabelPositionFallback()": 0,
        "org.jfree.chart.renderer.category$BarRenderer#getPositiveItemLabelPositionFallback()": 0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowPaint()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowXOffset()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowYOffset()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowsVisible()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getUpperClip()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#isDrawBarOutline()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setBarPainter(org.jfree.chart.renderer.category.BarPainter)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setBase(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setDefaultBarPainter(org.jfree.chart.renderer.category.BarPainter)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#setDefaultShadowsVisible(boolean)": 0,
        "org.jfree.chart.renderer.category$BarRenderer#setDrawBarOutline(boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setIncludeBaseInRange(boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setItemMargin(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setMaximumBarWidth(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setMinimumBarLength(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowXOffset(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowYOffset(double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#<clinit>()": 0.3855498004780299,
        "org.jfree.chart.renderer.category$BarRenderer3D#BarRenderer3D()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#BarRenderer3D(double,double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)": 0,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,int)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)": 0,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.renderer.category$BarRenderer3D#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#getWallPaint()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#getXOffset()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#getYOffset()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#setWallPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.renderer.category$GradientBarPainter#GradientBarPainter()": 0.3086066999241838,
        "org.jfree.chart.renderer.category$GradientBarPainter#GradientBarPainter(double,double,double)": 0.3059689874425115,
        "org.jfree.chart.renderer.category$GradientBarPainter#createShadow(java.awt.geom.RectangularShape,double,double,org.jfree.chart.util.RectangleEdge,boolean)": 0.0,
        "org.jfree.chart.renderer.category$GradientBarPainter#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.category$GradientBarPainter#hashCode()": 0.0,
        "org.jfree.chart.renderer.category$GradientBarPainter#paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,boolean,java.awt.geom.RectangularShape,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.renderer.category$GradientBarPainter#paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,boolean,java.awt.geom.RectangularShape,org.jfree.chart.util.RectangleEdge,boolean)": 0.0,
        "org.jfree.chart.renderer.category$GradientBarPainter#splitHorizontalBar(java.awt.geom.RectangularShape,double,double,double)": 0.0,
        "org.jfree.chart.renderer.category$GradientBarPainter#splitVerticalBar(java.awt.geom.RectangularShape,double,double,double)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#AbstractXYItemRenderer()": 0.10084738520012282,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,boolean,double,double)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#clone()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawDomainGridLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,boolean,double,double,boolean)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)": 0.028490144114909487,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.028490144114909487,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)": 0.03077287274483318,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)": 0.030151134457776358,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getAnnotations()": 0.027297554521630706,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getBaseItemLabelGenerator()": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getBaseToolTipGenerator()": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getBaseURLGenerator()": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getDrawingSupplier()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getItemLabelGenerator(int,int,boolean)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItem(int,int)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItemLabelGenerator()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItemToolTipGenerator()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItemURLGenerator()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItems()": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getPassCount()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getPlot()": 0.029012942659282972,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getSeriesItemLabelGenerator(int)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getSeriesToolTipGenerator(int)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getSeriesURLGenerator(int)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getToolTipGenerator(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getURLGenerator(int,int,boolean)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#removeAnnotations()": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)": 0.13193984914006274,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)": 0.13193984914006274,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)": 0.14301938838683884,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)": 0.14301938838683884,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setPlot(org.jfree.chart.plot.XYPlot)": 0.025854384499750957,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator,boolean)": 0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#GradientXYBarPainter()": 0.3868589716493314,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#GradientXYBarPainter(double,double,double)": 0.38170062121826653,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#createShadow(java.awt.geom.RectangularShape,double,double,org.jfree.chart.util.RectangleEdge,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#hashCode()": 0.0,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,boolean,java.awt.geom.RectangularShape,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,boolean,java.awt.geom.RectangularShape,org.jfree.chart.util.RectangleEdge,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#splitHorizontalBar(java.awt.geom.RectangularShape,double,double,double)": 0,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#splitVerticalBar(java.awt.geom.RectangularShape,double,double,double)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#XYAreaRenderer()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#XYAreaRenderer(int)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#XYAreaRenderer(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#clone()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getGradientTransformer()": 0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getLegendArea()": 0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getLegendItem(int,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getPlotArea()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getPlotLines()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getPlotShapes()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getUseFillPaint()": 0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#hashCode()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#isOutline()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#setGradientTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#setLegendArea(java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#setOutline(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#setUseFillPaint(boolean)": 0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer$XYAreaRendererState#XYAreaRenderer$XYAreaRendererState(org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#<clinit>()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#XYBarRenderer()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#XYBarRenderer(double)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#clone()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#drawItemLabelForBar(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,boolean,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getBarAlignmentFactor()": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getBarPainter()": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getBase()": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getDefaultBarPainter()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getDefaultShadowsVisible()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getGradientPaintTransformer()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getLegendBar()": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getLegendItem(int,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getMargin()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getNegativeItemLabelPositionFallback()": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getPositiveItemLabelPositionFallback()": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getShadowXOffset()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getShadowYOffset()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getShadowsVisible()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getUseYInterval()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#isDrawBarOutline()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setBarAlignmentFactor(double)": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setBase(double)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setDefaultBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setDefaultShadowsVisible(boolean)": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setDrawBarOutline(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setLegendBar(java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setMargin(double)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setShadowVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setShadowXOffset(double)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setShadowYOffset(double)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setUseYInterval(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer$XYBarRendererState#XYBarRenderer$XYBarRendererState(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer$XYBarRendererState#getG2Base()": 0,
        "org.jfree.chart.renderer.xy$XYBarRenderer$XYBarRendererState#setG2Base(double)": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#XYItemRendererState(org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#endSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getCrosshairState()": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getFirstItemIndex()": 0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getLastItemIndex()": 0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getProcessVisibleItemsOnly()": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getSelectionState()": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#setCrosshairState(org.jfree.chart.plot.XYCrosshairState)": 0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#setProcessVisibleItemsOnly(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#setSelectionState(org.jfree.data.xy.XYDatasetSelectionState)": 0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#startSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#XYLineAndShapeRenderer()": 0.10660035817780522,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#XYLineAndShapeRenderer(boolean,boolean)": 0.10341753799900383,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#clone()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,boolean,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,boolean,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawShape1(java.awt.Graphics2D,int,int,int,boolean,java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawShape2(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,boolean,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getBaseLinesVisible()": 0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getBaseShapesFilled()": 0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getBaseShapesVisible()": 0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getDrawOutlines()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getDrawSeriesLineAsPath()": 0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getItemLineVisible(int,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getItemShapeFilled(int,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getItemShapeVisible(int,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getLegendItem(int,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getLegendLine()": 0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getPassCount()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getSeriesLinesVisible(int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getSeriesShapesFilled(int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getSeriesShapesVisible(int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getUseFillPaint()": 0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getUseOutlinePaint()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#isItemPass(int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#isLinePass(int)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setBaseLinesVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setBaseShapesFilled(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setBaseShapesVisible(boolean)": 0.19284730395996752,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setDrawOutlines(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setLegendLine(java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesLinesVisible(int,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesShapesFilled(int,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesShapesVisible(int,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setUseFillPaint(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setUseOutlinePaint(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer$State#XYLineAndShapeRenderer$State(org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer$State#isLastPointGood()": 0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer$State#setLastPointGood(boolean)": 0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer$State#startSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#XYStepAreaRenderer()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#XYStepAreaRenderer(int)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#XYStepAreaRenderer(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)": 0.21320071635561044,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#clone()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#getPlotArea()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#getRangeBase()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#getShapesVisible()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#isOutline()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#isShapesFilled()": 0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#restrictValueToDataArea(double,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setOutline(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setPlotArea(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setRangeBase(double)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setShapesFilled(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setShapesVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepRenderer#XYStepRenderer()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepRenderer#XYStepRenderer(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)": 0.20225995873897262,
        "org.jfree.chart.renderer.xy$XYStepRenderer#clone()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepRenderer#drawLine(java.awt.Graphics2D,java.awt.geom.Line2D,double,double,double,double)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepRenderer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.renderer.xy$XYStepRenderer#getStepPoint()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepRenderer#hashCode()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepRenderer#setStepPoint(double)": 0.0,
        "org.jfree.chart.resources$JFreeChartResources#<clinit>()": 0.03289758474798845,
        "org.jfree.chart.resources$JFreeChartResources#JFreeChartResources()": 0.03289758474798845,
        "org.jfree.chart.resources$JFreeChartResources#getContents()": 0.03289758474798845,
        "org.jfree.chart.text$G2TextMeasurer#G2TextMeasurer(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.text$G2TextMeasurer#getStringWidth(java.lang.String,int,int)": 0.0,
        "org.jfree.chart.text$TextAnchor#<clinit>()": 0.06191539293026132,
        "org.jfree.chart.text$TextAnchor#TextAnchor(java.lang.String)": 0.06191539293026132,
        "org.jfree.chart.text$TextAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextAnchor#hashCode()": 0.0,
        "org.jfree.chart.text$TextAnchor#readResolve()": 0.0,
        "org.jfree.chart.text$TextAnchor#toString()": 0,
        "org.jfree.chart.text$TextBlock#TextBlock()": 0.0,
        "org.jfree.chart.text$TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)": 0.0,
        "org.jfree.chart.text$TextBlock#addLine(org.jfree.chart.text.TextLine)": 0.0,
        "org.jfree.chart.text$TextBlock#calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)": 0.0,
        "org.jfree.chart.text$TextBlock#calculateDimensions(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.text$TextBlock#calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)": 0.0,
        "org.jfree.chart.text$TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)": 0.0,
        "org.jfree.chart.text$TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)": 0.0,
        "org.jfree.chart.text$TextBlock#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextBlock#getLastLine()": 0.0,
        "org.jfree.chart.text$TextBlock#getLineAlignment()": 0,
        "org.jfree.chart.text$TextBlock#getLines()": 0,
        "org.jfree.chart.text$TextBlock#hashCode()": 0.0,
        "org.jfree.chart.text$TextBlock#setLineAlignment(org.jfree.chart.util.HorizontalAlignment)": 0.0,
        "org.jfree.chart.text$TextBlockAnchor#<clinit>()": 0.0,
        "org.jfree.chart.text$TextBlockAnchor#TextBlockAnchor(java.lang.String)": 0.0,
        "org.jfree.chart.text$TextBlockAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextBlockAnchor#hashCode()": 0.0,
        "org.jfree.chart.text$TextBlockAnchor#readResolve()": 0.0,
        "org.jfree.chart.text$TextBlockAnchor#toString()": 0,
        "org.jfree.chart.text$TextFragment#<clinit>()": 0.0,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String)": 0,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font)": 0.0,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font,java.awt.Paint)": 0.0,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font,java.awt.Paint,float)": 0.0,
        "org.jfree.chart.text$TextFragment#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextFragment#calculateDimensions(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.text$TextFragment#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)": 0.0,
        "org.jfree.chart.text$TextFragment#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextFragment#getBaselineOffset()": 0,
        "org.jfree.chart.text$TextFragment#getFont()": 0.0,
        "org.jfree.chart.text$TextFragment#getPaint()": 0.0,
        "org.jfree.chart.text$TextFragment#getText()": 0.0,
        "org.jfree.chart.text$TextFragment#hashCode()": 0.0,
        "org.jfree.chart.text$TextFragment#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.text$TextFragment#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.text$TextLine#TextLine()": 0,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String)": 0.0,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String,java.awt.Font)": 0.0,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String,java.awt.Font,java.awt.Paint)": 0.0,
        "org.jfree.chart.text$TextLine#addFragment(org.jfree.chart.text.TextFragment)": 0.0,
        "org.jfree.chart.text$TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextLine#calculateDimensions(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.text$TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)": 0.0,
        "org.jfree.chart.text$TextLine#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.text$TextLine#getFirstTextFragment()": 0,
        "org.jfree.chart.text$TextLine#getLastTextFragment()": 0.0,
        "org.jfree.chart.text$TextLine#hashCode()": 0.0,
        "org.jfree.chart.text$TextLine#removeFragment(org.jfree.chart.text.TextFragment)": 0.0,
        "org.jfree.chart.text$TextUtilities#<clinit>()": 0.0,
        "org.jfree.chart.text$TextUtilities#TextUtilities()": 0,
        "org.jfree.chart.text$TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)": 0.0,
        "org.jfree.chart.text$TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)": 0.0,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)": 0.0,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)": 0.0,
        "org.jfree.chart.text$TextUtilities#deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.text$TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)": 0,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)": 0.0,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)": 0.0,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextUtilities#getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)": 0.0,
        "org.jfree.chart.text$TextUtilities#getUseFontMetricsGetStringBounds()": 0,
        "org.jfree.chart.text$TextUtilities#isUseDrawRotatedStringWorkaround()": 0,
        "org.jfree.chart.text$TextUtilities#nextLineBreak(java.lang.String,int,float,java.text.BreakIterator,org.jfree.chart.text.TextMeasurer)": 0.0,
        "org.jfree.chart.text$TextUtilities#setUseDrawRotatedStringWorkaround(boolean)": 0,
        "org.jfree.chart.text$TextUtilities#setUseFontMetricsGetStringBounds(boolean)": 0,
        "org.jfree.chart.title$LegendGraphic#LegendGraphic(java.awt.Shape,java.awt.Paint)": 0.0,
        "org.jfree.chart.title$LegendGraphic#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.title$LegendGraphic#arrangeNN(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.title$LegendGraphic#clone()": 0.0,
        "org.jfree.chart.title$LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.title$LegendGraphic#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$LegendGraphic#getFillPaint()": 0,
        "org.jfree.chart.title$LegendGraphic#getFillPaintTransformer()": 0,
        "org.jfree.chart.title$LegendGraphic#getLine()": 0.0,
        "org.jfree.chart.title$LegendGraphic#getLinePaint()": 0,
        "org.jfree.chart.title$LegendGraphic#getLineStroke()": 0,
        "org.jfree.chart.title$LegendGraphic#getOutlinePaint()": 0,
        "org.jfree.chart.title$LegendGraphic#getOutlineStroke()": 0,
        "org.jfree.chart.title$LegendGraphic#getShape()": 0,
        "org.jfree.chart.title$LegendGraphic#getShapeAnchor()": 0,
        "org.jfree.chart.title$LegendGraphic#getShapeLocation()": 0,
        "org.jfree.chart.title$LegendGraphic#hashCode()": 0.0,
        "org.jfree.chart.title$LegendGraphic#isLineVisible()": 0.0,
        "org.jfree.chart.title$LegendGraphic#isShapeFilled()": 0.0,
        "org.jfree.chart.title$LegendGraphic#isShapeOutlineVisible()": 0.0,
        "org.jfree.chart.title$LegendGraphic#isShapeVisible()": 0.0,
        "org.jfree.chart.title$LegendGraphic#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setFillPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setLine(java.awt.Shape)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setLinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setLineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setLineVisible(boolean)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setShapeAnchor(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setShapeFilled(boolean)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setShapeLocation(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setShapeOutlineVisible(boolean)": 0.0,
        "org.jfree.chart.title$LegendGraphic#setShapeVisible(boolean)": 0.0,
        "org.jfree.chart.title$LegendGraphic#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.title$LegendItemBlockContainer#LegendItemBlockContainer(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.title$LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.title$LegendItemBlockContainer#getDataset()": 0,
        "org.jfree.chart.title$LegendItemBlockContainer#getSeriesKey()": 0,
        "org.jfree.chart.title$LegendItemBlockContainer#getToolTipText()": 0.0,
        "org.jfree.chart.title$LegendItemBlockContainer#getURLText()": 0.0,
        "org.jfree.chart.title$LegendItemBlockContainer#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart.title$LegendItemBlockContainer#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart.title$LegendTitle#<clinit>()": 0.036297700432031385,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource)": 0.036297700432031385,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)": 0.036297700432031385,
        "org.jfree.chart.title$LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.title$LegendTitle#createLegendItemBlock(org.jfree.chart.LegendItem)": 0.0,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.title$LegendTitle#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$LegendTitle#fetchLegendItems()": 0.0,
        "org.jfree.chart.title$LegendTitle#getBackgroundPaint()": 0.04956815970966096,
        "org.jfree.chart.title$LegendTitle#getItemContainer()": 0,
        "org.jfree.chart.title$LegendTitle#getItemFont()": 0,
        "org.jfree.chart.title$LegendTitle#getItemLabelPadding()": 0,
        "org.jfree.chart.title$LegendTitle#getItemPaint()": 0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicAnchor()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicEdge()": 0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicLocation()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicPadding()": 0,
        "org.jfree.chart.title$LegendTitle#getSources()": 0.0,
        "org.jfree.chart.title$LegendTitle#getWrapper()": 0.04956815970966096,
        "org.jfree.chart.title$LegendTitle#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$LegendTitle#setBackgroundPaint(java.awt.Paint)": 0.036563621206356534,
        "org.jfree.chart.title$LegendTitle#setItemFont(java.awt.Font)": 0.04923659639173309,
        "org.jfree.chart.title$LegendTitle#setItemLabelPadding(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.title$LegendTitle#setItemPaint(java.awt.Paint)": 0.04956815970966096,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicAnchor(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicLocation(org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)": 0,
        "org.jfree.chart.title$LegendTitle#setSources(org.jfree.chart.LegendItemSource[])": 0,
        "org.jfree.chart.title$LegendTitle#setWrapper(org.jfree.chart.block.BlockContainer)": 0,
        "org.jfree.chart.title$LegendTitle#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#PaintScaleLegend(org.jfree.chart.renderer.PaintScale,org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0,
        "org.jfree.chart.title$PaintScaleLegend#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)": 0,
        "org.jfree.chart.title$PaintScaleLegend#axisChanged(org.jfree.chart.event.AxisChangeEvent)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0,
        "org.jfree.chart.title$PaintScaleLegend#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#getAxis()": 0,
        "org.jfree.chart.title$PaintScaleLegend#getAxisLocation()": 0,
        "org.jfree.chart.title$PaintScaleLegend#getAxisOffset()": 0,
        "org.jfree.chart.title$PaintScaleLegend#getBackgroundPaint()": 0,
        "org.jfree.chart.title$PaintScaleLegend#getScale()": 0,
        "org.jfree.chart.title$PaintScaleLegend#getStripOutlinePaint()": 0,
        "org.jfree.chart.title$PaintScaleLegend#getStripOutlineStroke()": 0,
        "org.jfree.chart.title$PaintScaleLegend#getStripWidth()": 0,
        "org.jfree.chart.title$PaintScaleLegend#getSubdivisionCount()": 0,
        "org.jfree.chart.title$PaintScaleLegend#isStripOutlineVisible()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setAxis(org.jfree.chart.axis.ValueAxis)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setAxisLocation(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setAxisOffset(double)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setScale(org.jfree.chart.renderer.PaintScale)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setStripOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setStripOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setStripOutlineVisible(boolean)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setStripWidth(double)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#setSubdivisionCount(int)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.title$TextTitle#<clinit>()": 0.03813850356982369,
        "org.jfree.chart.title$TextTitle#TextTitle()": 0.0,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font)": 0.04222003309207491,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 0.03813850356982369,
        "org.jfree.chart.title$TextTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.title$TextTitle#arrangeFN(java.awt.Graphics2D,double)": 0,
        "org.jfree.chart.title$TextTitle#arrangeNN(java.awt.Graphics2D)": 0,
        "org.jfree.chart.title$TextTitle#arrangeRN(java.awt.Graphics2D,org.jfree.data.Range)": 0,
        "org.jfree.chart.title$TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)": 0.0,
        "org.jfree.chart.title$TextTitle#clone()": 0.0,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.title$TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$TextTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.title$TextTitle#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$TextTitle#getBackgroundPaint()": 0,
        "org.jfree.chart.title$TextTitle#getExpandToFitSpace()": 0.0,
        "org.jfree.chart.title$TextTitle#getFont()": 0,
        "org.jfree.chart.title$TextTitle#getMaximumLinesToDisplay()": 0,
        "org.jfree.chart.title$TextTitle#getPaint()": 0,
        "org.jfree.chart.title$TextTitle#getText()": 0,
        "org.jfree.chart.title$TextTitle#getTextAlignment()": 0,
        "org.jfree.chart.title$TextTitle#getToolTipText()": 0,
        "org.jfree.chart.title$TextTitle#getURLText()": 0,
        "org.jfree.chart.title$TextTitle#hashCode()": 0.0,
        "org.jfree.chart.title$TextTitle#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$TextTitle#setBackgroundPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$TextTitle#setExpandToFitSpace(boolean)": 0.0,
        "org.jfree.chart.title$TextTitle#setFont(java.awt.Font)": 0.04264014327112208,
        "org.jfree.chart.title$TextTitle#setMaximumLinesToDisplay(int)": 0.0,
        "org.jfree.chart.title$TextTitle#setPaint(java.awt.Paint)": 0.04264014327112208,
        "org.jfree.chart.title$TextTitle#setText(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#setTextAlignment(org.jfree.chart.util.HorizontalAlignment)": 0.0,
        "org.jfree.chart.title$TextTitle#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.title$Title#<clinit>()": 0.03061383874613135,
        "org.jfree.chart.title$Title#Title()": 0.03516899742266649,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 0,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 0.03061383874613135,
        "org.jfree.chart.title$Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)": 0.033922676577637915,
        "org.jfree.chart.title$Title#clone()": 0.0,
        "org.jfree.chart.title$Title#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.title$Title#getHorizontalAlignment()": 0.0,
        "org.jfree.chart.title$Title#getNotify()": 0,
        "org.jfree.chart.title$Title#getPosition()": 0.0,
        "org.jfree.chart.title$Title#getVerticalAlignment()": 0,
        "org.jfree.chart.title$Title#hashCode()": 0.0,
        "org.jfree.chart.title$Title#isVisible()": 0.0,
        "org.jfree.chart.title$Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)": 0.0323254091917618,
        "org.jfree.chart.title$Title#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.title$Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)": 0.0,
        "org.jfree.chart.title$Title#setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)": 0.0,
        "org.jfree.chart.title$Title#setNotify(boolean)": 0,
        "org.jfree.chart.title$Title#setPosition(org.jfree.chart.util.RectangleEdge)": 0.03669879217087869,
        "org.jfree.chart.title$Title#setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)": 0.0,
        "org.jfree.chart.title$Title#setVisible(boolean)": 0.0,
        "org.jfree.chart.title$Title#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo()": 0.03289758474798845,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#addLibrary(org.jfree.chart.ui.Library)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(java.lang.String)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(org.jfree.chart.ui.Library)": 0,
        "org.jfree.chart.ui$BasicProjectInfo#getCopyright()": 0,
        "org.jfree.chart.ui$BasicProjectInfo#getLibraries()": 0,
        "org.jfree.chart.ui$BasicProjectInfo#getOptionalLibraries()": 0,
        "org.jfree.chart.ui$BasicProjectInfo#setCopyright(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$BasicProjectInfo#setInfo(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$BasicProjectInfo#setLicenceName(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$BasicProjectInfo#setName(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$BasicProjectInfo#setVersion(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$Contributor#Contributor(java.lang.String,java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$Contributor#getEmail()": 0,
        "org.jfree.chart.ui$Contributor#getName()": 0,
        "org.jfree.chart.ui$Library#Library()": 0.03289758474798845,
        "org.jfree.chart.ui$Library#Library(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$Library#equals(java.lang.Object)": 0,
        "org.jfree.chart.ui$Library#getInfo()": 0,
        "org.jfree.chart.ui$Library#getLicenceName()": 0,
        "org.jfree.chart.ui$Library#getName()": 0,
        "org.jfree.chart.ui$Library#getVersion()": 0,
        "org.jfree.chart.ui$Library#hashCode()": 0,
        "org.jfree.chart.ui$Library#setInfo(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$Library#setLicenceName(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$Library#setName(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$Library#setVersion(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$Licences#Licences()": 0.03289758474798845,
        "org.jfree.chart.ui$Licences#getGPL()": 0,
        "org.jfree.chart.ui$Licences#getInstance()": 0.03289758474798845,
        "org.jfree.chart.ui$Licences#getLGPL()": 0.03289758474798845,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo()": 0.03289758474798845,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.jfree.chart.ui$ProjectInfo#getContributors()": 0,
        "org.jfree.chart.ui$ProjectInfo#getLicenceText()": 0,
        "org.jfree.chart.ui$ProjectInfo#getLogo()": 0.0,
        "org.jfree.chart.ui$ProjectInfo#setContributors(java.util.List)": 0.03289758474798845,
        "org.jfree.chart.ui$ProjectInfo#setLicenceText(java.lang.String)": 0.03289758474798845,
        "org.jfree.chart.ui$ProjectInfo#setLogo(java.awt.Image)": 0.03289758474798845,
        "org.jfree.chart.ui$ProjectInfo#toString()": 0,
        "org.jfree.chart.urls$StandardXYURLGenerator#StandardXYURLGenerator()": 0.35478743759344955,
        "org.jfree.chart.urls$StandardXYURLGenerator#StandardXYURLGenerator(java.lang.String)": 0.0,
        "org.jfree.chart.urls$StandardXYURLGenerator#StandardXYURLGenerator(java.lang.String,java.lang.String,java.lang.String)": 0.3302891295379082,
        "org.jfree.chart.urls$StandardXYURLGenerator#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.urls$StandardXYURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)": 0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.19409078514116102,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.19409078514116102,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": 0.19409078514116102,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0.023688968483956713,
        "org.jfree.chart.util$AbstractObjectList#clone()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#get(int)": 0.2865127435888428,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": 0.338501600193165,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": 0.2870487828668123,
        "org.jfree.chart.util$AbstractObjectList#size()": 0.2182178902359924,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$BooleanList#BooleanList()": 0.06876639317811906,
        "org.jfree.chart.util$BooleanList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$BooleanList#getBoolean(int)": 0.0,
        "org.jfree.chart.util$BooleanList#hashCode()": 0.0,
        "org.jfree.chart.util$BooleanList#setBoolean(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#<clinit>()": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#GradientPaintTransformType(java.lang.String)": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#hashCode()": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#readResolve()": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#toString()": 0,
        "org.jfree.chart.util$HorizontalAlignment#<clinit>()": 0.029285370632871136,
        "org.jfree.chart.util$HorizontalAlignment#HorizontalAlignment(java.lang.String)": 0.029285370632871136,
        "org.jfree.chart.util$HorizontalAlignment#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#hashCode()": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#readResolve()": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#toString()": 0,
        "org.jfree.chart.util$Layer#<clinit>()": 0.0,
        "org.jfree.chart.util$Layer#Layer(java.lang.String)": 0.0,
        "org.jfree.chart.util$Layer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$Layer#hashCode()": 0,
        "org.jfree.chart.util$Layer#readResolve()": 0,
        "org.jfree.chart.util$Layer#toString()": 0,
        "org.jfree.chart.util$LengthAdjustmentType#<clinit>()": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#LengthAdjustmentType(java.lang.String)": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#hashCode()": 0,
        "org.jfree.chart.util$LengthAdjustmentType#readResolve()": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#toString()": 0,
        "org.jfree.chart.util$LineUtilities#LineUtilities()": 0,
        "org.jfree.chart.util$LineUtilities#clipLine(java.awt.geom.Line2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$LogFormat#LogFormat()": 0.0,
        "org.jfree.chart.util$LogFormat#LogFormat(double,java.lang.String,boolean)": 0.0,
        "org.jfree.chart.util$LogFormat#LogFormat(double,java.lang.String,java.lang.String,boolean)": 0.0,
        "org.jfree.chart.util$LogFormat#calculateLog(double)": 0,
        "org.jfree.chart.util$LogFormat#clone()": 0.0,
        "org.jfree.chart.util$LogFormat#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$LogFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)": 0,
        "org.jfree.chart.util$LogFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)": 0,
        "org.jfree.chart.util$LogFormat#getExponentFormat()": 0,
        "org.jfree.chart.util$LogFormat#parse(java.lang.String,java.text.ParsePosition)": 0,
        "org.jfree.chart.util$LogFormat#setExponentFormat(java.text.NumberFormat)": 0.0,
        "org.jfree.chart.util$ObjectList#ObjectList()": 0.197677455857197,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0,
        "org.jfree.chart.util$ObjectList#get(int)": 0.30794088102571987,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": 0.338501600193165,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": 0.30727935312736043,
        "org.jfree.chart.util$ObjectUtilities#<clinit>()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#ObjectUtilities()": 0,
        "org.jfree.chart.util$ObjectUtilities#clone(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#convertName(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#deepClone(java.util.Collection)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#equal(java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader()": 0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader(java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoaderSource()": 0,
        "org.jfree.chart.util$ObjectUtilities#getResource(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#hashCode(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#isJDK14()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#parseVersions(java.lang.String)": 0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoader(java.lang.ClassLoader)": 0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoaderSource(java.lang.String)": 0,
        "org.jfree.chart.util$PaintList#PaintList()": 0.06833253147669932,
        "org.jfree.chart.util$PaintList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$PaintList#getPaint(int)": 0.0,
        "org.jfree.chart.util$PaintList#hashCode()": 0.0,
        "org.jfree.chart.util$PaintList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$PaintList#setPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.util$PaintList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$PaintMap#PaintMap()": 0.03178208630818641,
        "org.jfree.chart.util$PaintMap#clear()": 0.050251890762960605,
        "org.jfree.chart.util$PaintMap#clone()": 0.0,
        "org.jfree.chart.util$PaintMap#containsKey(java.lang.Comparable)": 0,
        "org.jfree.chart.util$PaintMap#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$PaintMap#getPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.util$PaintMap#put(java.lang.Comparable,java.awt.Paint)": 0.0,
        "org.jfree.chart.util$PaintMap#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$PaintMap#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$PaintUtilities#PaintUtilities()": 0,
        "org.jfree.chart.util$PaintUtilities#colorToString(java.awt.Color)": 0,
        "org.jfree.chart.util$PaintUtilities#equal(java.awt.Paint,java.awt.Paint)": 0.0,
        "org.jfree.chart.util$PaintUtilities#stringToColor(java.lang.String)": 0,
        "org.jfree.chart.util$RectangleAnchor#<clinit>()": 0.026702293491727636,
        "org.jfree.chart.util$RectangleAnchor#RectangleAnchor(java.lang.String)": 0.026702293491727636,
        "org.jfree.chart.util$RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleAnchor#readResolve()": 0.0,
        "org.jfree.chart.util$RectangleAnchor#toString()": 0,
        "org.jfree.chart.util$RectangleEdge#<clinit>()": 0.029854071701326607,
        "org.jfree.chart.util$RectangleEdge#RectangleEdge(java.lang.String)": 0.029854071701326607,
        "org.jfree.chart.util$RectangleEdge#coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$RectangleEdge#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#opposite(org.jfree.chart.util.RectangleEdge)": 0,
        "org.jfree.chart.util$RectangleEdge#readResolve()": 0.0,
        "org.jfree.chart.util$RectangleEdge#toString()": 0,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 0.21189138534559038,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 0.21940839492525382,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": 0.21189138534559038,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": 0.016400055104277726,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#getBottom()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getLeft()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getRight()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getTop()": 0.0,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": 0.0,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": 0.0,
        "org.jfree.chart.util$ResourceBundleWrapper#ResourceBundleWrapper()": 0,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String)": 0.26639771383306554,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String,java.util.Locale)": 0,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)": 0,
        "org.jfree.chart.util$ResourceBundleWrapper#removeCodeBase(java.net.URL,java.net.URLClassLoader)": 0,
        "org.jfree.chart.util$Rotation#<clinit>()": 0.03289758474798845,
        "org.jfree.chart.util$Rotation#Rotation(java.lang.String,double)": 0.03289758474798845,
        "org.jfree.chart.util$Rotation#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$Rotation#getFactor()": 0.0,
        "org.jfree.chart.util$Rotation#hashCode()": 0,
        "org.jfree.chart.util$Rotation#readResolve()": 0.0,
        "org.jfree.chart.util$Rotation#toString()": 0,
        "org.jfree.chart.util$SerialUtilities#SerialUtilities()": 0,
        "org.jfree.chart.util$SerialUtilities#isSerializable(java.lang.Class)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readAttributedString(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readImage(java.io.ObjectInputStream)": 0,
        "org.jfree.chart.util$SerialUtilities#readPaint(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readPoint2D(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readShape(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readStroke(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writeAttributedString(java.text.AttributedString,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writeImage(java.awt.Image,java.io.ObjectOutputStream)": 0,
        "org.jfree.chart.util$SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writePoint2D(java.awt.geom.Point2D,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$ShapeList#ShapeList()": 0.06883951004425774,
        "org.jfree.chart.util$ShapeList#clone()": 0.0,
        "org.jfree.chart.util$ShapeList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ShapeList#getShape(int)": 0.0,
        "org.jfree.chart.util$ShapeList#hashCode()": 0,
        "org.jfree.chart.util$ShapeList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$ShapeList#setShape(int,java.awt.Shape)": 0.0,
        "org.jfree.chart.util$ShapeList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#<clinit>()": 0.0,
        "org.jfree.chart.util$ShapeUtilities#ShapeUtilities()": 0,
        "org.jfree.chart.util$ShapeUtilities#clipLine(java.awt.geom.Line2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#clone(java.awt.Shape)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$ShapeUtilities#createDiagonalCross(float,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createDiamond(float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createDownTriangle(float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createLineRegion(java.awt.geom.Line2D,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createRegularCross(float,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,double,double)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createUpTriangle(float)": 0,
        "org.jfree.chart.util$ShapeUtilities#drawRotatedShape(java.awt.Graphics2D,java.awt.Shape,double,float,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Polygon,java.awt.Polygon)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Line2D,java.awt.geom.Line2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#getPointInRectangle(double,double,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$ShapeUtilities#intersects(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#isPointInRect(double,double,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#rotateShape(java.awt.Shape,double,float,float)": 0.0,
        "org.jfree.chart.util$Size2D#Size2D()": 0.0,
        "org.jfree.chart.util$Size2D#Size2D(double,double)": 0.0,
        "org.jfree.chart.util$Size2D#clone()": 0,
        "org.jfree.chart.util$Size2D#equals(java.lang.Object)": 0,
        "org.jfree.chart.util$Size2D#getHeight()": 0.0,
        "org.jfree.chart.util$Size2D#getWidth()": 0.0,
        "org.jfree.chart.util$Size2D#setHeight(double)": 0,
        "org.jfree.chart.util$Size2D#setWidth(double)": 0,
        "org.jfree.chart.util$Size2D#toString()": 0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#StandardGradientPaintTransformer()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#StandardGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformType)": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#clone()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#getType()": 0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#hashCode()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)": 0.0,
        "org.jfree.chart.util$StrokeList#StrokeList()": 0.06847623832623259,
        "org.jfree.chart.util$StrokeList#clone()": 0.0,
        "org.jfree.chart.util$StrokeList#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$StrokeList#getStroke(int)": 0.0,
        "org.jfree.chart.util$StrokeList#hashCode()": 0.0,
        "org.jfree.chart.util$StrokeList#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$StrokeList#setStroke(int,java.awt.Stroke)": 0.0,
        "org.jfree.chart.util$StrokeList#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$StrokeMap#StrokeMap()": 0.03214121732666125,
        "org.jfree.chart.util$StrokeMap#clear()": 0,
        "org.jfree.chart.util$StrokeMap#clone()": 0.0,
        "org.jfree.chart.util$StrokeMap#containsKey(java.lang.Comparable)": 0,
        "org.jfree.chart.util$StrokeMap#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$StrokeMap#getStroke(java.lang.Comparable)": 0.0,
        "org.jfree.chart.util$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)": 0.0,
        "org.jfree.chart.util$StrokeMap#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$StrokeMap#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$UnitType#<clinit>()": 0.21039390096047988,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": 0.21039390096047988,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$UnitType#hashCode()": 0,
        "org.jfree.chart.util$UnitType#readResolve()": 0.0,
        "org.jfree.chart.util$UnitType#toString()": 0,
        "org.jfree.chart.util$VerticalAlignment#<clinit>()": 0.030001500112509377,
        "org.jfree.chart.util$VerticalAlignment#VerticalAlignment(java.lang.String)": 0.030001500112509377,
        "org.jfree.chart.util$VerticalAlignment#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$VerticalAlignment#hashCode()": 0.0,
        "org.jfree.chart.util$VerticalAlignment#readResolve()": 0.0,
        "org.jfree.chart.util$VerticalAlignment#toString()": 0,
        "org.jfree.data$DefaultKeyedValues#DefaultKeyedValues()": 0.014373989364401724,
        "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,double)": 0.0,
        "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)": 0.0,
        "org.jfree.data$DefaultKeyedValues#clear()": 0.0,
        "org.jfree.data$DefaultKeyedValues#clone()": 0.0,
        "org.jfree.data$DefaultKeyedValues#equals(java.lang.Object)": 0.0,
        "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)": 0.014677342608268699,
        "org.jfree.data$DefaultKeyedValues#getItemCount()": 0.0,
        "org.jfree.data$DefaultKeyedValues#getKey(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues#getKeys()": 0.0,
        "org.jfree.data$DefaultKeyedValues#getValue(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues#getValue(java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues#hashCode()": 0,
        "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,double)": 0.0,
        "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,java.lang.Number)": 0.0,
        "org.jfree.data$DefaultKeyedValues#rebuildIndex()": 0.0,
        "org.jfree.data$DefaultKeyedValues#removeValue(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues#removeValue(java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,double)": 0,
        "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)": 0.014712247158412491,
        "org.jfree.data$DefaultKeyedValues#sortByKeys(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.data$DefaultKeyedValues#sortByValues(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.data$DomainOrder#<clinit>()": 0.0,
        "org.jfree.data$DomainOrder#DomainOrder(java.lang.String)": 0.0,
        "org.jfree.data$DomainOrder#equals(java.lang.Object)": 0.0,
        "org.jfree.data$DomainOrder#hashCode()": 0.0,
        "org.jfree.data$DomainOrder#readResolve()": 0.0,
        "org.jfree.data$DomainOrder#toString()": 0.0,
        "org.jfree.data$Range#Range(double,double)": 0.2378135192180612,
        "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)": 0.33938657320715915,
        "org.jfree.data$Range#constrain(double)": 0.0,
        "org.jfree.data$Range#contains(double)": 0.0,
        "org.jfree.data$Range#equals(java.lang.Object)": 0.0,
        "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)": 0.0,
        "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)": 0.0,
        "org.jfree.data$Range#getCentralValue()": 0.0,
        "org.jfree.data$Range#getLength()": 0.0,
        "org.jfree.data$Range#getLowerBound()": 0.2771326538627136,
        "org.jfree.data$Range#getUpperBound()": 0.27660326913126193,
        "org.jfree.data$Range#hashCode()": 0.0,
        "org.jfree.data$Range#intersects(double,double)": 0.0,
        "org.jfree.data$Range#intersects(org.jfree.data.Range)": 0,
        "org.jfree.data$Range#scale(org.jfree.data.Range,double)": 0.0,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double)": 0.0,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)": 0.0,
        "org.jfree.data$Range#shiftWithNoZeroCrossing(double,double)": 0.0,
        "org.jfree.data$Range#toString()": 0,
        "org.jfree.data$RangeType#<clinit>()": 0.30995139779590153,
        "org.jfree.data$RangeType#RangeType(java.lang.String)": 0.30995139779590153,
        "org.jfree.data$RangeType#equals(java.lang.Object)": 0.0,
        "org.jfree.data$RangeType#hashCode()": 0.0,
        "org.jfree.data$RangeType#readResolve()": 0.0,
        "org.jfree.data$RangeType#toString()": 0.0,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": 0.0,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.19180536399919287,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)": 0.28080784639141065,
        "org.jfree.data.general$AbstractDataset#clone()": 0.0,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged()": 0.20920651998247058,
        "org.jfree.data.general$AbstractDataset#getGroup()": 0.0,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)": 0.1996291519320324,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)": 0.0,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0,
        "org.jfree.data.general$AbstractDataset#validateObject()": 0.0,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.data.general$AbstractSeriesDataset#AbstractSeriesDataset()": 0.2517947107642972,
        "org.jfree.data.general$AbstractSeriesDataset#indexOf(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)": 0.0,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": 0.1956038587687303,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": 0.19164519247731238,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0,
        "org.jfree.data.general$DatasetGroup#clone()": 0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$DatasetGroup#getID()": 0,
        "org.jfree.data.general$DatasetUtilities#DatasetUtilities()": 0,
        "org.jfree.data.general$DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)": 0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)": 0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,double[][])": 0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])": 0.0,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)": 0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)": 0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0,
        "org.jfree.data.general$DatasetUtilities#findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset)": 0.9380831519646858,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.7510676161988108,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)": 0.028490144114909487,
        "org.jfree.data.general$DatasetUtilities#findMaximumDomainValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumDomainValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)": 0.03045724519365863,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)": 0.0,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.055048188256318034,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset)": 0,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)": 0.028490144114909487,
        "org.jfree.data.general$DatasetUtilities#iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)": 0.02956561979945413,
        "org.jfree.data.general$DatasetUtilities#iterateXYRangeBounds(org.jfree.data.xy.XYDataset)": 0,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#DefaultPieDataset()": 0.035533452725935076,
        "org.jfree.data.general$DefaultPieDataset#DefaultPieDataset(org.jfree.data.KeyedValues)": 0,
        "org.jfree.data.general$DefaultPieDataset#clear()": 0.0,
        "org.jfree.data.general$DefaultPieDataset#clone()": 0.0,
        "org.jfree.data.general$DefaultPieDataset#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#getIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#getItemCount()": 0.0,
        "org.jfree.data.general$DefaultPieDataset#getKey(int)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#getKeys()": 0.0,
        "org.jfree.data.general$DefaultPieDataset#getValue(int)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#getValue(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#hashCode()": 0,
        "org.jfree.data.general$DefaultPieDataset#insertValue(int,java.lang.Comparable,double)": 0,
        "org.jfree.data.general$DefaultPieDataset#insertValue(int,java.lang.Comparable,java.lang.Number)": 0,
        "org.jfree.data.general$DefaultPieDataset#remove(java.lang.Comparable)": 0,
        "org.jfree.data.general$DefaultPieDataset#setValue(java.lang.Comparable,double)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)": 0.040291148201269014,
        "org.jfree.data.general$DefaultPieDataset#sortByKeys(org.jfree.chart.util.SortOrder)": 0,
        "org.jfree.data.general$DefaultPieDataset#sortByValues(org.jfree.chart.util.SortOrder)": 0,
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.2435283936974245,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": 0.2435283936974245,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.3231151638207484,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#clone()": 0.0,
        "org.jfree.data.general$Series#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.25428872684065346,
        "org.jfree.data.general$Series#getDescription()": 0.0,
        "org.jfree.data.general$Series#getKey()": 0.0,
        "org.jfree.data.general$Series#getNotify()": 0,
        "org.jfree.data.general$Series#hashCode()": 0.0,
        "org.jfree.data.general$Series#isEmpty()": 0.0,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": 0.25428872684065346,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$Series#setNotify(boolean)": 0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 0.25428872684065346,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object,org.jfree.data.general.SeriesChangeInfo)": 0.25428872684065346,
        "org.jfree.data.general$SeriesChangeEvent#getSummary()": 0,
        "org.jfree.data.general$SeriesChangeEvent#setSummary(org.jfree.data.general.SeriesChangeInfo)": 0,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": 0.0,
        "org.jfree.data.time$DateRange#DateRange()": 0.2522624895547565,
        "org.jfree.data.time$DateRange#DateRange(double,double)": 0.0,
        "org.jfree.data.time$DateRange#DateRange(java.util.Date,java.util.Date)": 0.2389760596996216,
        "org.jfree.data.time$DateRange#DateRange(org.jfree.data.Range)": 0,
        "org.jfree.data.time$DateRange#getLowerDate()": 0.0,
        "org.jfree.data.time$DateRange#getLowerMillis()": 0.0,
        "org.jfree.data.time$DateRange#getUpperDate()": 0.0,
        "org.jfree.data.time$DateRange#getUpperMillis()": 0.0,
        "org.jfree.data.time$DateRange#toString()": 0,
        "org.jfree.data.time$Day#<clinit>()": 0.017954739285163532,
        "org.jfree.data.time$Day#Day()": 0.05913123959890826,
        "org.jfree.data.time$Day#Day(int,int,int)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date)": 0.055048188256318034,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": 0.036563621206356534,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": 0.05698028822981897,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": 0.06741998624632421,
        "org.jfree.data.time$Day#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#getDayOfMonth()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": 0.018214966464911487,
        "org.jfree.data.time$Day#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": 0.018214966464911487,
        "org.jfree.data.time$Day#getMonth()": 0.0,
        "org.jfree.data.time$Day#getSerialDate()": 0.03892494720807615,
        "org.jfree.data.time$Day#getSerialIndex()": 0.05698028822981897,
        "org.jfree.data.time$Day#getYear()": 0.0,
        "org.jfree.data.time$Day#hashCode()": 0.0,
        "org.jfree.data.time$Day#next()": 0.04891159880445185,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": 0.018214966464911487,
        "org.jfree.data.time$Day#previous()": 0.0,
        "org.jfree.data.time$Day#toString()": 0,
        "org.jfree.data.time$Month#Month()": 0.0,
        "org.jfree.data.time$Month#Month(int,int)": 0.0,
        "org.jfree.data.time$Month#Month(int,org.jfree.data.time.Year)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.jfree.data.time$Month#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Month#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Month#evaluateAsYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#findSeparator(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Month#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Month#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#getMonth()": 0.0,
        "org.jfree.data.time$Month#getSerialIndex()": 0.0,
        "org.jfree.data.time$Month#getYear()": 0.0,
        "org.jfree.data.time$Month#getYearValue()": 0.0,
        "org.jfree.data.time$Month#hashCode()": 0.0,
        "org.jfree.data.time$Month#next()": 0.0,
        "org.jfree.data.time$Month#parseMonth(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#previous()": 0.0,
        "org.jfree.data.time$Month#toString()": 0,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": 0.012329715777434854,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getStart()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0,
        "org.jfree.data.time$SerialDate#<clinit>()": 0.015508070173307846,
        "org.jfree.data.time$SerialDate#SerialDate()": 0.018214966464911487,
        "org.jfree.data.time$SerialDate#addDays(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#addMonths(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#addYears(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#createInstance(int)": 0.05698028822981897,
        "org.jfree.data.time$SerialDate#createInstance(int,int,int)": 0.018214966464911487,
        "org.jfree.data.time$SerialDate#createInstance(java.util.Date)": 0,
        "org.jfree.data.time$SerialDate#getDescription()": 0,
        "org.jfree.data.time$SerialDate#getEndOfCurrentMonth(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int)": 0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#getMonths()": 0,
        "org.jfree.data.time$SerialDate#getMonths(boolean)": 0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int)": 0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int)": 0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#isLeapYear(int)": 0.018281810603178267,
        "org.jfree.data.time$SerialDate#isValidMonthCode(int)": 0,
        "org.jfree.data.time$SerialDate#isValidWeekInMonthCode(int)": 0,
        "org.jfree.data.time$SerialDate#isValidWeekdayCode(int)": 0,
        "org.jfree.data.time$SerialDate#lastDayOfMonth(int,int)": 0.015508070173307846,
        "org.jfree.data.time$SerialDate#leapYearCount(int)": 0.018214966464911487,
        "org.jfree.data.time$SerialDate#monthCodeToQuarter(int)": 0.0,
        "org.jfree.data.time$SerialDate#monthCodeToString(int)": 0,
        "org.jfree.data.time$SerialDate#monthCodeToString(int,boolean)": 0,
        "org.jfree.data.time$SerialDate#relativeToString(int)": 0,
        "org.jfree.data.time$SerialDate#setDescription(java.lang.String)": 0,
        "org.jfree.data.time$SerialDate#stringToMonthCode(java.lang.String)": 0.0,
        "org.jfree.data.time$SerialDate#stringToWeekdayCode(java.lang.String)": 0,
        "org.jfree.data.time$SerialDate#toString()": 0,
        "org.jfree.data.time$SerialDate#weekInMonthToString(int)": 0,
        "org.jfree.data.time$SerialDate#weekdayCodeToString(int)": 0,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int)": 0.05698028822981897,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int,int,int)": 0.018214966464911487,
        "org.jfree.data.time$SpreadsheetDate#calcSerial(int,int,int)": 0.018214966464911487,
        "org.jfree.data.time$SpreadsheetDate#compare(org.jfree.data.time.SerialDate)": 0.06741998624632421,
        "org.jfree.data.time$SpreadsheetDate#compareTo(java.lang.Object)": 0,
        "org.jfree.data.time$SpreadsheetDate#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#getDayOfMonth()": 0.018214966464911487,
        "org.jfree.data.time$SpreadsheetDate#getDayOfWeek()": 0,
        "org.jfree.data.time$SpreadsheetDate#getMonth()": 0.018214966464911487,
        "org.jfree.data.time$SpreadsheetDate#getYYYY()": 0.018214966464911487,
        "org.jfree.data.time$SpreadsheetDate#hashCode()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isAfter(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isBefore(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)": 0,
        "org.jfree.data.time$SpreadsheetDate#isOn(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrAfter(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrBefore(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#toDate()": 0,
        "org.jfree.data.time$SpreadsheetDate#toSerial()": 0.029012942659282972,
        "org.jfree.data.time$TimePeriodAnchor#<clinit>()": 0.035533452725935076,
        "org.jfree.data.time$TimePeriodAnchor#TimePeriodAnchor(java.lang.String)": 0.035533452725935076,
        "org.jfree.data.time$TimePeriodAnchor#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimePeriodAnchor#hashCode()": 0.0,
        "org.jfree.data.time$TimePeriodAnchor#readResolve()": 0.0,
        "org.jfree.data.time$TimePeriodAnchor#toString()": 0,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable)": 0.03077287274483318,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.String,java.lang.String)": 0.03077287274483318,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)": 0.03829197905337418,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)": 0.03829197905337418,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)": 0.0,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)": 0.0,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)": 0.03251280443811776,
        "org.jfree.data.time$TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.TimeSeriesDataItem)": 0.0,
        "org.jfree.data.time$TimeSeries#clear()": 0.0,
        "org.jfree.data.time$TimeSeries#clone()": 0.0,
        "org.jfree.data.time$TimeSeries#createCopy(int,int)": 0.0,
        "org.jfree.data.time$TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#delete(int,int)": 0.0,
        "org.jfree.data.time$TimeSeries#delete(int,int,boolean)": 0.0,
        "org.jfree.data.time$TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeries#findBoundsByIteration()": 0.0,
        "org.jfree.data.time$TimeSeries#getDataItem(int)": 0.0,
        "org.jfree.data.time$TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#getDomainDescription()": 0.0,
        "org.jfree.data.time$TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#getItemCount()": 0.031098520678556146,
        "org.jfree.data.time$TimeSeries#getItems()": 0,
        "org.jfree.data.time$TimeSeries#getMaxY()": 0.0,
        "org.jfree.data.time$TimeSeries#getMaximumItemAge()": 0.0,
        "org.jfree.data.time$TimeSeries#getMaximumItemCount()": 0.0,
        "org.jfree.data.time$TimeSeries#getMinY()": 0.0,
        "org.jfree.data.time$TimeSeries#getNextTimePeriod()": 0,
        "org.jfree.data.time$TimeSeries#getRangeDescription()": 0.0,
        "org.jfree.data.time$TimeSeries#getRawDataItem(int)": 0.03289758474798845,
        "org.jfree.data.time$TimeSeries#getRawDataItem(org.jfree.data.time.RegularTimePeriod)": 0,
        "org.jfree.data.time$TimeSeries#getTimePeriod(int)": 0.03289758474798845,
        "org.jfree.data.time$TimeSeries#getTimePeriodClass()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriods()": 0,
        "org.jfree.data.time$TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)": 0,
        "org.jfree.data.time$TimeSeries#getValue(int)": 0.0,
        "org.jfree.data.time$TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#hashCode()": 0.0,
        "org.jfree.data.time$TimeSeries#maxIgnoreNaN(double,double)": 0.03251280443811776,
        "org.jfree.data.time$TimeSeries#minIgnoreNaN(double,double)": 0.03251280443811776,
        "org.jfree.data.time$TimeSeries#removeAgedItems(boolean)": 0.03251280443811776,
        "org.jfree.data.time$TimeSeries#removeAgedItems(long,boolean)": 0.0,
        "org.jfree.data.time$TimeSeries#setDomainDescription(java.lang.String)": 0,
        "org.jfree.data.time$TimeSeries#setMaximumItemAge(long)": 0.0,
        "org.jfree.data.time$TimeSeries#setMaximumItemCount(int)": 0.0,
        "org.jfree.data.time$TimeSeries#setRangeDescription(java.lang.String)": 0,
        "org.jfree.data.time$TimeSeries#update(int,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)": 0.03251280443811776,
        "org.jfree.data.time$TimeSeries#updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#TimeSeriesCollection()": 0.06741998624632421,
        "org.jfree.data.time$TimeSeriesCollection#TimeSeriesCollection(java.util.TimeZone)": 0,
        "org.jfree.data.time$TimeSeriesCollection#TimeSeriesCollection(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#TimeSeriesCollection(org.jfree.data.time.TimeSeries,java.util.TimeZone)": 0.05698028822981897,
        "org.jfree.data.time$TimeSeriesCollection#addSeries(org.jfree.data.time.TimeSeries)": 0.08058229640253803,
        "org.jfree.data.time$TimeSeriesCollection#clearSelection()": 0,
        "org.jfree.data.time$TimeSeriesCollection#clone()": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getDomainBounds(boolean)": 0.15075567228888181,
        "org.jfree.data.time$TimeSeriesCollection#getDomainBounds(java.util.List,boolean)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getDomainLowerBound(boolean)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getDomainOrder()": 0,
        "org.jfree.data.time$TimeSeriesCollection#getDomainUpperBound(boolean)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getEndX(int,int)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getEndY(int,int)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getItemCount(int)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getRangeBounds(java.util.List,org.jfree.data.Range,boolean)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getSeries()": 0,
        "org.jfree.data.time$TimeSeriesCollection#getSeries(int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getSeries(java.lang.Comparable)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getSeriesCount()": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getSeriesKey(int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getStartX(int,int)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getStartY(int,int)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getSurroundingItems(int,long)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getX(int,int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getXPosition()": 0,
        "org.jfree.data.time$TimeSeriesCollection#getXValue(int,int)": 0,
        "org.jfree.data.time$TimeSeriesCollection#getY(int,int)": 0,
        "org.jfree.data.time$TimeSeriesCollection#hashCode()": 0,
        "org.jfree.data.time$TimeSeriesCollection#indexOf(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#isSelected(int,int)": 0,
        "org.jfree.data.time$TimeSeriesCollection#removeAllSeries()": 0,
        "org.jfree.data.time$TimeSeriesCollection#removeSeries(int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#removeSeries(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#setSelected(int,int,boolean)": 0,
        "org.jfree.data.time$TimeSeriesCollection#setSelected(int,int,boolean,boolean)": 0,
        "org.jfree.data.time$TimeSeriesCollection#setXPosition(org.jfree.data.time.TimePeriodAnchor)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,double)": 0.033709993123162106,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.03143473067309657,
        "org.jfree.data.time$TimeSeriesDataItem#clone()": 0.03251280443811776,
        "org.jfree.data.time$TimeSeriesDataItem#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#getPeriod()": 0.03251280443811776,
        "org.jfree.data.time$TimeSeriesDataItem#getValue()": 0.03251280443811776,
        "org.jfree.data.time$TimeSeriesDataItem#hashCode()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#isSelected()": 0,
        "org.jfree.data.time$TimeSeriesDataItem#setSelected(boolean)": 0,
        "org.jfree.data.time$TimeSeriesDataItem#setValue(java.lang.Number)": 0.0,
        "org.jfree.data.time$Year#Year()": 0.0,
        "org.jfree.data.time$Year#Year(int)": 0.0,
        "org.jfree.data.time$Year#Year(java.util.Date)": 0.0,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Year#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Year#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Year#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Year#getSerialIndex()": 0.0,
        "org.jfree.data.time$Year#getYear()": 0.0,
        "org.jfree.data.time$Year#hashCode()": 0.0,
        "org.jfree.data.time$Year#next()": 0.0,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Year#previous()": 0.0,
        "org.jfree.data.time$Year#toString()": 0,
        "org.jfree.data.xy$AbstractIntervalXYDataset#AbstractIntervalXYDataset()": 0.3074963916451469,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getEndXValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getEndYValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getStartXValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getStartYValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#AbstractXYDataset()": 0.2721655269759087,
        "org.jfree.data.xy$AbstractXYDataset#getDomainOrder()": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#getSelectionState()": 0,
        "org.jfree.data.xy$AbstractXYDataset#getXValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#getYValue(int,int)": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#setSelectionState(org.jfree.data.xy.XYDatasetSelectionState)": 0.43486556744535565,
        "org.jfree.data.xy$DefaultXYDataset#DefaultXYDataset()": 0.036563621206356534,
        "org.jfree.data.xy$DefaultXYDataset#addSeries(java.lang.Comparable,double[][])": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#clone()": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#equals(java.lang.Object)": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#getDomainOrder()": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#getItemCount(int)": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#getSeriesCount()": 0.04264014327112208,
        "org.jfree.data.xy$DefaultXYDataset#getSeriesKey(int)": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#getX(int,int)": 0,
        "org.jfree.data.xy$DefaultXYDataset#getXValue(int,int)": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#getY(int,int)": 0,
        "org.jfree.data.xy$DefaultXYDataset#getYValue(int,int)": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#hashCode()": 0,
        "org.jfree.data.xy$DefaultXYDataset#indexOf(java.lang.Comparable)": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#removeSeries(java.lang.Comparable)": 0,
        "org.jfree.data.xy$IntervalXYDelegate#IntervalXYDelegate(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#IntervalXYDelegate(org.jfree.data.xy.XYDataset,boolean)": 0.37986858819879316,
        "org.jfree.data.xy$IntervalXYDelegate#calculateIntervalForSeries(int)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#clone()": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.3876376661011099,
        "org.jfree.data.xy$IntervalXYDelegate#equals(java.lang.Object)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#getDomainBounds(boolean)": 0.8058229640253802,
        "org.jfree.data.xy$IntervalXYDelegate#getDomainLowerBound(boolean)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#getDomainUpperBound(boolean)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#getEndX(int,int)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#getEndXValue(int,int)": 0,
        "org.jfree.data.xy$IntervalXYDelegate#getFixedIntervalWidth()": 0,
        "org.jfree.data.xy$IntervalXYDelegate#getIntervalPositionFactor()": 0.7106690545187014,
        "org.jfree.data.xy$IntervalXYDelegate#getIntervalWidth()": 0.7106690545187014,
        "org.jfree.data.xy$IntervalXYDelegate#getStartX(int,int)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#getStartXValue(int,int)": 0,
        "org.jfree.data.xy$IntervalXYDelegate#hashCode()": 0,
        "org.jfree.data.xy$IntervalXYDelegate#isAutoWidth()": 0.7106690545187014,
        "org.jfree.data.xy$IntervalXYDelegate#recalculateInterval()": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#setAutoWidth(boolean)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#setFixedIntervalWidth(double)": 0.055048188256318034,
        "org.jfree.data.xy$IntervalXYDelegate#setIntervalPositionFactor(double)": 0.0,
        "org.jfree.data.xy$XYDataItem#XYDataItem(double,double)": 0.0,
        "org.jfree.data.xy$XYDataItem#XYDataItem(java.lang.Number,java.lang.Number)": 0.36563621206356534,
        "org.jfree.data.xy$XYDataItem#clone()": 0.36835473434187865,
        "org.jfree.data.xy$XYDataItem#compareTo(java.lang.Object)": 0.4201458159015677,
        "org.jfree.data.xy$XYDataItem#equals(java.lang.Object)": 0.0,
        "org.jfree.data.xy$XYDataItem#getX()": 0.3876376661011099,
        "org.jfree.data.xy$XYDataItem#getXValue()": 0.3697369333232678,
        "org.jfree.data.xy$XYDataItem#getY()": 0.3697369333232678,
        "org.jfree.data.xy$XYDataItem#getYValue()": 0.3697369333232678,
        "org.jfree.data.xy$XYDataItem#hashCode()": 0.0,
        "org.jfree.data.xy$XYDataItem#isSelected()": 0,
        "org.jfree.data.xy$XYDataItem#setSelected(boolean)": 0,
        "org.jfree.data.xy$XYDataItem#setY(double)": 0,
        "org.jfree.data.xy$XYDataItem#setY(java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYDataItem#toString()": 0,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable)": 0.4181210050035454,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable,boolean)": 0,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable,boolean,boolean)": 0.35909478570327064,
        "org.jfree.data.xy$XYSeries#add(double,double)": 0.3754255278891389,
        "org.jfree.data.xy$XYSeries#add(double,double,boolean)": 0,
        "org.jfree.data.xy$XYSeries#add(double,java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#add(double,java.lang.Number,boolean)": 0,
        "org.jfree.data.xy$XYSeries#add(java.lang.Number,java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#add(java.lang.Number,java.lang.Number,boolean)": 0.37397879600338285,
        "org.jfree.data.xy$XYSeries#add(org.jfree.data.xy.XYDataItem)": 0.0,
        "org.jfree.data.xy$XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)": 0.37113480951260275,
        "org.jfree.data.xy$XYSeries#addOrUpdate(double,double)": 0.0,
        "org.jfree.data.xy$XYSeries#addOrUpdate(java.lang.Number,java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#addOrUpdate(org.jfree.data.xy.XYDataItem)": 0.0,
        "org.jfree.data.xy$XYSeries#clear()": 0.0,
        "org.jfree.data.xy$XYSeries#clone()": 0.0,
        "org.jfree.data.xy$XYSeries#createCopy(int,int)": 0,
        "org.jfree.data.xy$XYSeries#delete(int,int)": 0.0,
        "org.jfree.data.xy$XYSeries#equals(java.lang.Object)": 0.0,
        "org.jfree.data.xy$XYSeries#findBoundsByIteration()": 0.0,
        "org.jfree.data.xy$XYSeries#getAllowDuplicateXValues()": 0.0,
        "org.jfree.data.xy$XYSeries#getAutoSort()": 0.0,
        "org.jfree.data.xy$XYSeries#getDataItem(int)": 0,
        "org.jfree.data.xy$XYSeries#getItemCount()": 0.36835473434187865,
        "org.jfree.data.xy$XYSeries#getItems()": 0,
        "org.jfree.data.xy$XYSeries#getMaxX()": 0.753778361444409,
        "org.jfree.data.xy$XYSeries#getMaxY()": 0.0,
        "org.jfree.data.xy$XYSeries#getMaximumItemCount()": 0.0,
        "org.jfree.data.xy$XYSeries#getMinX()": 0.753778361444409,
        "org.jfree.data.xy$XYSeries#getMinY()": 0.0,
        "org.jfree.data.xy$XYSeries#getRawDataItem(int)": 0.0,
        "org.jfree.data.xy$XYSeries#getX(int)": 0.0,
        "org.jfree.data.xy$XYSeries#getY(int)": 0.0,
        "org.jfree.data.xy$XYSeries#hashCode()": 0.0,
        "org.jfree.data.xy$XYSeries#indexOf(java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#maxIgnoreNaN(double,double)": 0.3697369333232678,
        "org.jfree.data.xy$XYSeries#minIgnoreNaN(double,double)": 0.3697369333232678,
        "org.jfree.data.xy$XYSeries#remove(int)": 0.0,
        "org.jfree.data.xy$XYSeries#remove(java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#setMaximumItemCount(int)": 0.0,
        "org.jfree.data.xy$XYSeries#toArray()": 0.0,
        "org.jfree.data.xy$XYSeries#update(java.lang.Number,java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem)": 0.3697369333232678,
        "org.jfree.data.xy$XYSeries#updateBoundsForRemovedItem(org.jfree.data.xy.XYDataItem)": 0.0,
        "org.jfree.data.xy$XYSeries#updateByIndex(int,java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#XYSeriesCollection()": 0.11197850219117086,
        "org.jfree.data.xy$XYSeriesCollection#XYSeriesCollection(org.jfree.data.xy.XYSeries)": 0.45454545454545453,
        "org.jfree.data.xy$XYSeriesCollection#addSeries(org.jfree.data.xy.XYSeries)": 0.12309149097933272,
        "org.jfree.data.xy$XYSeriesCollection#clearSelection()": 0,
        "org.jfree.data.xy$XYSeriesCollection#clone()": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#equals(java.lang.Object)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getDomainBounds(boolean)": 0.8362420100070908,
        "org.jfree.data.xy$XYSeriesCollection#getDomainLowerBound(boolean)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getDomainOrder()": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getDomainUpperBound(boolean)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getEndX(int,int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getEndY(int,int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getIntervalPositionFactor()": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getIntervalWidth()": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getItemCount(int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getRangeBounds(boolean)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getRangeLowerBound(boolean)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getRangeUpperBound(boolean)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getSeries()": 0,
        "org.jfree.data.xy$XYSeriesCollection#getSeries(int)": 0.5096471914376256,
        "org.jfree.data.xy$XYSeriesCollection#getSeries(java.lang.Comparable)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getSeriesCount()": 0.4828045495852676,
        "org.jfree.data.xy$XYSeriesCollection#getSeriesKey(int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getStartX(int,int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getStartY(int,int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getX(int,int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getY(int,int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#hashCode()": 0,
        "org.jfree.data.xy$XYSeriesCollection#indexOf(org.jfree.data.xy.XYSeries)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#isAutoWidth()": 0,
        "org.jfree.data.xy$XYSeriesCollection#isSelected(int,int)": 0,
        "org.jfree.data.xy$XYSeriesCollection#removeAllSeries()": 0,
        "org.jfree.data.xy$XYSeriesCollection#removeSeries(int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#removeSeries(org.jfree.data.xy.XYSeries)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#setAutoWidth(boolean)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#setIntervalPositionFactor(double)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#setIntervalWidth(double)": 0.06741998624632421,
        "org.jfree.data.xy$XYSeriesCollection#setSelected(int,int,boolean)": 0,
        "org.jfree.data.xy$XYSeriesCollection#setSelected(int,int,boolean,boolean)": 0
    },
    "Chart-5": {
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.05773502691896257,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": 0.05773502691896257,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#clone()": 0.0,
        "org.jfree.data.general$Series#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.0601929265428846,
        "org.jfree.data.general$Series#getDescription()": 0.0,
        "org.jfree.data.general$Series#getKey()": 0.0,
        "org.jfree.data.general$Series#getNotify()": 0,
        "org.jfree.data.general$Series#hashCode()": 0.0,
        "org.jfree.data.general$Series#isEmpty()": 0.0,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": 0.0601929265428846,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$Series#setNotify(boolean)": 0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 0.0601929265428846,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": 0.0,
        "org.jfree.data.xy$XYDataItem#XYDataItem(double,double)": 0.0,
        "org.jfree.data.xy$XYDataItem#XYDataItem(java.lang.Number,java.lang.Number)": 0.09205746178983235,
        "org.jfree.data.xy$XYDataItem#clone()": 0.0,
        "org.jfree.data.xy$XYDataItem#compareTo(java.lang.Object)": 0.1091089451179962,
        "org.jfree.data.xy$XYDataItem#equals(java.lang.Object)": 0.0,
        "org.jfree.data.xy$XYDataItem#getX()": 0.09853292781642932,
        "org.jfree.data.xy$XYDataItem#getXValue()": 0,
        "org.jfree.data.xy$XYDataItem#getY()": 0.0,
        "org.jfree.data.xy$XYDataItem#getYValue()": 0,
        "org.jfree.data.xy$XYDataItem#hashCode()": 0.0,
        "org.jfree.data.xy$XYDataItem#setY(double)": 0,
        "org.jfree.data.xy$XYDataItem#setY(java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYDataItem#toString()": 0,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable)": 0.0,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable,boolean)": 0,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable,boolean,boolean)": 0.09016696346674323,
        "org.jfree.data.xy$XYSeries#add(double,double)": 0.0,
        "org.jfree.data.xy$XYSeries#add(double,double,boolean)": 0,
        "org.jfree.data.xy$XYSeries#add(double,java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#add(double,java.lang.Number,boolean)": 0,
        "org.jfree.data.xy$XYSeries#add(java.lang.Number,java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#add(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.jfree.data.xy$XYSeries#add(org.jfree.data.xy.XYDataItem)": 0,
        "org.jfree.data.xy$XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)": 0.0,
        "org.jfree.data.xy$XYSeries#addOrUpdate(double,double)": 0.7071067811865475,
        "org.jfree.data.xy$XYSeries#addOrUpdate(java.lang.Number,java.lang.Number)": 0.5,
        "org.jfree.data.xy$XYSeries#clear()": 0.0,
        "org.jfree.data.xy$XYSeries#clone()": 0.0,
        "org.jfree.data.xy$XYSeries#createCopy(int,int)": 0,
        "org.jfree.data.xy$XYSeries#delete(int,int)": 0,
        "org.jfree.data.xy$XYSeries#equals(java.lang.Object)": 0.0,
        "org.jfree.data.xy$XYSeries#getAllowDuplicateXValues()": 0.0,
        "org.jfree.data.xy$XYSeries#getAutoSort()": 0,
        "org.jfree.data.xy$XYSeries#getDataItem(int)": 0.0,
        "org.jfree.data.xy$XYSeries#getItemCount()": 0.09284766908852593,
        "org.jfree.data.xy$XYSeries#getItems()": 0,
        "org.jfree.data.xy$XYSeries#getMaximumItemCount()": 0.0,
        "org.jfree.data.xy$XYSeries#getX(int)": 0.0,
        "org.jfree.data.xy$XYSeries#getY(int)": 0.0,
        "org.jfree.data.xy$XYSeries#hashCode()": 0.0,
        "org.jfree.data.xy$XYSeries#indexOf(java.lang.Number)": 0.22941573387056174,
        "org.jfree.data.xy$XYSeries#remove(int)": 0.0,
        "org.jfree.data.xy$XYSeries#remove(java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#setMaximumItemCount(int)": 0.0,
        "org.jfree.data.xy$XYSeries#toArray()": 0.0,
        "org.jfree.data.xy$XYSeries#update(java.lang.Number,java.lang.Number)": 0.0,
        "org.jfree.data.xy$XYSeries#updateByIndex(int,java.lang.Number)": 0
    },
    "Chart-6": {
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.06178020632152154,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.06178020632152154,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": 0.06178020632152154,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0,
        "org.jfree.chart.util$AbstractObjectList#clone()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": 0.0875376219064817,
        "org.jfree.chart.util$AbstractObjectList#get(int)": 0.09147787074926965,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": 0.10206207261596577,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": 0.079555728417573,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": 0.09090909090909091,
        "org.jfree.chart.util$AbstractObjectList#size()": 0.06812027032901716,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": 0.079555728417573,
        "org.jfree.chart.util$ObjectUtilities#<clinit>()": 0.05140046620434272,
        "org.jfree.chart.util$ObjectUtilities#ObjectUtilities()": 0,
        "org.jfree.chart.util$ObjectUtilities#clone(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#convertName(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#deepClone(java.util.Collection)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#equal(java.lang.Object,java.lang.Object)": 0.05383819020581655,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader()": 0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader(java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoaderSource()": 0,
        "org.jfree.chart.util$ObjectUtilities#getResource(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#hashCode(java.lang.Object)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#isJDK14()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)": 0,
        "org.jfree.chart.util$ObjectUtilities#parseVersions(java.lang.String)": 0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoader(java.lang.ClassLoader)": 0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoaderSource(java.lang.String)": 0,
        "org.jfree.chart.util$SerialUtilities#SerialUtilities()": 0,
        "org.jfree.chart.util$SerialUtilities#isSerializable(java.lang.Class)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readAttributedString(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readPaint(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readPoint2D(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readShape(java.io.ObjectInputStream)": 0.06401843996644799,
        "org.jfree.chart.util$SerialUtilities#readStroke(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writeAttributedString(java.text.AttributedString,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writePoint2D(java.awt.geom.Point2D,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)": 0.06401843996644799,
        "org.jfree.chart.util$SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$ShapeList#ShapeList()": 0.06812027032901716,
        "org.jfree.chart.util$ShapeList#clone()": 0.0,
        "org.jfree.chart.util$ShapeList#equals(java.lang.Object)": 0.09470274476207569,
        "org.jfree.chart.util$ShapeList#getShape(int)": 0.15075567228888181,
        "org.jfree.chart.util$ShapeList#hashCode()": 0.7071067811865475,
        "org.jfree.chart.util$ShapeList#readObject(java.io.ObjectInputStream)": 0.08703882797784893,
        "org.jfree.chart.util$ShapeList#setShape(int,java.awt.Shape)": 0.2721655269759087,
        "org.jfree.chart.util$ShapeList#writeObject(java.io.ObjectOutputStream)": 0.08703882797784893,
        "org.jfree.chart.util$ShapeUtilities#<clinit>()": 0.0,
        "org.jfree.chart.util$ShapeUtilities#ShapeUtilities()": 0,
        "org.jfree.chart.util$ShapeUtilities#clone(java.awt.Shape)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$ShapeUtilities#createDiagonalCross(float,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createDiamond(float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createDownTriangle(float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createLineRegion(java.awt.geom.Line2D,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createRegularCross(float,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,double,double)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createUpTriangle(float)": 0,
        "org.jfree.chart.util$ShapeUtilities#drawRotatedShape(java.awt.Graphics2D,java.awt.Shape,double,float,float)": 0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Polygon,java.awt.Polygon)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Line2D,java.awt.geom.Line2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#getPointInRectangle(double,double,java.awt.geom.Rectangle2D)": 0,
        "org.jfree.chart.util$ShapeUtilities#intersects(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#rotateShape(java.awt.Shape,double,float,float)": 0.0
    },
    "Chart-7": {
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.0594438298277764,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": 0.0594438298277764,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#clone()": 0.0,
        "org.jfree.data.general$Series#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.06178020632152154,
        "org.jfree.data.general$Series#getDescription()": 0.0,
        "org.jfree.data.general$Series#getKey()": 0.0,
        "org.jfree.data.general$Series#getNotify()": 0,
        "org.jfree.data.general$Series#hashCode()": 0.0,
        "org.jfree.data.general$Series#isEmpty()": 0.0,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": 0.06178020632152154,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$Series#setNotify(boolean)": 0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 0.06178020632152154,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#<clinit>()": 0.0,
        "org.jfree.data.time$Day#Day()": 0.0,
        "org.jfree.data.time$Day#Day(int,int,int)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#getDayOfMonth()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#getMonth()": 0.0,
        "org.jfree.data.time$Day#getSerialDate()": 0.0,
        "org.jfree.data.time$Day#getSerialIndex()": 0.0,
        "org.jfree.data.time$Day#getYear()": 0.0,
        "org.jfree.data.time$Day#hashCode()": 0.0,
        "org.jfree.data.time$Day#next()": 0.0,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Day#previous()": 0.0,
        "org.jfree.data.time$Day#toString()": 0,
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": 0.05892556509887897,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": 0.05976143046671968,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": 0.22360679774997896,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getStart()": 0.22360679774997896,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0,
        "org.jfree.data.time$SimpleTimePeriod#SimpleTimePeriod(java.util.Date,java.util.Date)": 0.0,
        "org.jfree.data.time$SimpleTimePeriod#SimpleTimePeriod(long,long)": 0.15249857033260467,
        "org.jfree.data.time$SimpleTimePeriod#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$SimpleTimePeriod#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$SimpleTimePeriod#getEnd()": 0.21320071635561041,
        "org.jfree.data.time$SimpleTimePeriod#getEndMillis()": 0,
        "org.jfree.data.time$SimpleTimePeriod#getStart()": 0.20851441405707477,
        "org.jfree.data.time$SimpleTimePeriod#getStartMillis()": 0,
        "org.jfree.data.time$SimpleTimePeriod#hashCode()": 0.0,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": 0.0,
        "org.jfree.data.time$TimePeriodValue#TimePeriodValue(org.jfree.data.time.TimePeriod,double)": 0.2672612419124244,
        "org.jfree.data.time$TimePeriodValue#TimePeriodValue(org.jfree.data.time.TimePeriod,java.lang.Number)": 0.25,
        "org.jfree.data.time$TimePeriodValue#clone()": 0.0,
        "org.jfree.data.time$TimePeriodValue#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimePeriodValue#getPeriod()": 0.2773500981126146,
        "org.jfree.data.time$TimePeriodValue#getValue()": 0.0,
        "org.jfree.data.time$TimePeriodValue#hashCode()": 0,
        "org.jfree.data.time$TimePeriodValue#setValue(java.lang.Number)": 0.0,
        "org.jfree.data.time$TimePeriodValue#toString()": 0,
        "org.jfree.data.time$TimePeriodValues#TimePeriodValues(java.lang.Comparable)": 0.2581988897471611,
        "org.jfree.data.time$TimePeriodValues#TimePeriodValues(java.lang.Comparable,java.lang.String,java.lang.String)": 0.2581988897471611,
        "org.jfree.data.time$TimePeriodValues#add(org.jfree.data.time.TimePeriod,double)": 0.31622776601683794,
        "org.jfree.data.time$TimePeriodValues#add(org.jfree.data.time.TimePeriod,java.lang.Number)": 0.31622776601683794,
        "org.jfree.data.time$TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)": 0.2773500981126146,
        "org.jfree.data.time$TimePeriodValues#clone()": 0.0,
        "org.jfree.data.time$TimePeriodValues#createCopy(int,int)": 0.0,
        "org.jfree.data.time$TimePeriodValues#delete(int,int)": 0.0,
        "org.jfree.data.time$TimePeriodValues#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimePeriodValues#getDataItem(int)": 0.2773500981126146,
        "org.jfree.data.time$TimePeriodValues#getDomainDescription()": 0.0,
        "org.jfree.data.time$TimePeriodValues#getItemCount()": 0.0,
        "org.jfree.data.time$TimePeriodValues#getMaxEndIndex()": 0.0,
        "org.jfree.data.time$TimePeriodValues#getMaxMiddleIndex()": 0.7071067811865475,
        "org.jfree.data.time$TimePeriodValues#getMaxStartIndex()": 0.0,
        "org.jfree.data.time$TimePeriodValues#getMinEndIndex()": 0,
        "org.jfree.data.time$TimePeriodValues#getMinMiddleIndex()": 0.0,
        "org.jfree.data.time$TimePeriodValues#getMinStartIndex()": 0.0,
        "org.jfree.data.time$TimePeriodValues#getRangeDescription()": 0.0,
        "org.jfree.data.time$TimePeriodValues#getTimePeriod(int)": 0.0,
        "org.jfree.data.time$TimePeriodValues#getValue(int)": 0.0,
        "org.jfree.data.time$TimePeriodValues#hashCode()": 0,
        "org.jfree.data.time$TimePeriodValues#recalculateBounds()": 0.0,
        "org.jfree.data.time$TimePeriodValues#setDomainDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimePeriodValues#setRangeDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimePeriodValues#update(int,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimePeriodValues#updateBounds(org.jfree.data.time.TimePeriod,int)": 0.2773500981126146,
        "org.jfree.data.time$Year#Year()": 0.0,
        "org.jfree.data.time$Year#Year(int)": 0.10976425998969035,
        "org.jfree.data.time$Year#Year(java.util.Date)": 0.0,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Year#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Year#getFirstMillisecond()": 0.2581988897471611,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": 0.10783277320343841,
        "org.jfree.data.time$Year#getLastMillisecond()": 0.2581988897471611,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": 0.10783277320343841,
        "org.jfree.data.time$Year#getSerialIndex()": 0.0,
        "org.jfree.data.time$Year#getYear()": 0.0,
        "org.jfree.data.time$Year#hashCode()": 0.0,
        "org.jfree.data.time$Year#next()": 0.0,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": 0.10783277320343841,
        "org.jfree.data.time$Year#previous()": 0.0,
        "org.jfree.data.time$Year#toString()": 0
    },
    "Chart-8": {
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": 0.05892556509887897,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": 0.05976143046671968,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getStart()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": 0.0,
        "org.jfree.data.time$Week#Week()": 0,
        "org.jfree.data.time$Week#Week(int,int)": 0.20851441405707477,
        "org.jfree.data.time$Week#Week(int,org.jfree.data.time.Year)": 0,
        "org.jfree.data.time$Week#Week(java.util.Date)": 0,
        "org.jfree.data.time$Week#Week(java.util.Date,java.util.TimeZone)": 0.5773502691896258,
        "org.jfree.data.time$Week#Week(java.util.Date,java.util.TimeZone,java.util.Locale)": 0.5773502691896258,
        "org.jfree.data.time$Week#compareTo(java.lang.Object)": 0,
        "org.jfree.data.time$Week#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Week#evaluateAsYear(java.lang.String)": 0,
        "org.jfree.data.time$Week#findSeparator(java.lang.String)": 0,
        "org.jfree.data.time$Week#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Week#getFirstMillisecond(java.util.Calendar)": 0.20851441405707477,
        "org.jfree.data.time$Week#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Week#getLastMillisecond(java.util.Calendar)": 0.20851441405707477,
        "org.jfree.data.time$Week#getSerialIndex()": 0.0,
        "org.jfree.data.time$Week#getWeek()": 0.5,
        "org.jfree.data.time$Week#getYear()": 0.0,
        "org.jfree.data.time$Week#getYearValue()": 0.0,
        "org.jfree.data.time$Week#hashCode()": 0.0,
        "org.jfree.data.time$Week#next()": 0.0,
        "org.jfree.data.time$Week#parseWeek(java.lang.String)": 0,
        "org.jfree.data.time$Week#peg(java.util.Calendar)": 0.20851441405707477,
        "org.jfree.data.time$Week#previous()": 0.0,
        "org.jfree.data.time$Week#stringToWeek(java.lang.String)": 0,
        "org.jfree.data.time$Week#toString()": 0
    },
    "Chart-9": {
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.0594438298277764,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": 0.0594438298277764,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#clone()": 0.0,
        "org.jfree.data.general$Series#equals(java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": 0.0,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.06178020632152154,
        "org.jfree.data.general$Series#getDescription()": 0.0,
        "org.jfree.data.general$Series#getKey()": 0.0,
        "org.jfree.data.general$Series#getNotify()": 0,
        "org.jfree.data.general$Series#hashCode()": 0.0,
        "org.jfree.data.general$Series#isEmpty()": 0.0,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": 0.06178020632152154,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.0,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$Series#setNotify(boolean)": 0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 0.06178020632152154,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#<clinit>()": 0.08304547985373997,
        "org.jfree.data.time$Day#Day()": 0.0,
        "org.jfree.data.time$Day#Day(int,int,int)": 0.09901475429766744,
        "org.jfree.data.time$Day#Day(java.util.Date)": 0.0,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": 0.31622776601683794,
        "org.jfree.data.time$Day#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Day#getDayOfMonth()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": 0.08606629658238704,
        "org.jfree.data.time$Day#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": 0.08606629658238704,
        "org.jfree.data.time$Day#getMonth()": 0.0,
        "org.jfree.data.time$Day#getSerialDate()": 0.18257418583505536,
        "org.jfree.data.time$Day#getSerialIndex()": 0.2672612419124244,
        "org.jfree.data.time$Day#getYear()": 0.0,
        "org.jfree.data.time$Day#hashCode()": 0.0,
        "org.jfree.data.time$Day#next()": 0.0,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": 0.0,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": 0.08606629658238704,
        "org.jfree.data.time$Day#previous()": 0.0,
        "org.jfree.data.time$Day#toString()": 0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(java.util.Date)": 0.0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(long)": 0.0,
        "org.jfree.data.time$FixedMillisecond#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$FixedMillisecond#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond()": 0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond()": 0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#getSerialIndex()": 0,
        "org.jfree.data.time$FixedMillisecond#getTime()": 0,
        "org.jfree.data.time$FixedMillisecond#hashCode()": 0.0,
        "org.jfree.data.time$FixedMillisecond#next()": 0,
        "org.jfree.data.time$FixedMillisecond#peg(java.util.Calendar)": 0,
        "org.jfree.data.time$FixedMillisecond#previous()": 0,
        "org.jfree.data.time$Month#Month()": 0.0,
        "org.jfree.data.time$Month#Month(int,int)": 0.0,
        "org.jfree.data.time$Month#Month(int,org.jfree.data.time.Year)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date)": 0.0,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Month#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Month#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Month#evaluateAsYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#findSeparator(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Month#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Month#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#getMonth()": 0.0,
        "org.jfree.data.time$Month#getSerialIndex()": 0.0,
        "org.jfree.data.time$Month#getYear()": 0.0,
        "org.jfree.data.time$Month#getYearValue()": 0.0,
        "org.jfree.data.time$Month#hashCode()": 0.0,
        "org.jfree.data.time$Month#next()": 0.0,
        "org.jfree.data.time$Month#parseMonth(java.lang.String)": 0.0,
        "org.jfree.data.time$Month#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$Month#previous()": 0.0,
        "org.jfree.data.time$Month#toString()": 0,
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": 0.05892556509887897,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": 0.05976143046671968,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$RegularTimePeriod#getStart()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0,
        "org.jfree.data.time$SerialDate#<clinit>()": 0.07332355751067665,
        "org.jfree.data.time$SerialDate#SerialDate()": 0.08606629658238704,
        "org.jfree.data.time$SerialDate#addDays(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#addMonths(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#addYears(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#createInstance(int)": 0.0,
        "org.jfree.data.time$SerialDate#createInstance(int,int,int)": 0.08606629658238704,
        "org.jfree.data.time$SerialDate#createInstance(java.util.Date)": 0,
        "org.jfree.data.time$SerialDate#getDescription()": 0,
        "org.jfree.data.time$SerialDate#getEndOfCurrentMonth(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int)": 0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#getMonths()": 0,
        "org.jfree.data.time$SerialDate#getMonths(boolean)": 0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int)": 0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int)": 0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SerialDate#isLeapYear(int)": 0.08638684255813601,
        "org.jfree.data.time$SerialDate#isValidMonthCode(int)": 0,
        "org.jfree.data.time$SerialDate#isValidWeekInMonthCode(int)": 0,
        "org.jfree.data.time$SerialDate#isValidWeekdayCode(int)": 0,
        "org.jfree.data.time$SerialDate#lastDayOfMonth(int,int)": 0.07332355751067665,
        "org.jfree.data.time$SerialDate#leapYearCount(int)": 0.08606629658238704,
        "org.jfree.data.time$SerialDate#monthCodeToQuarter(int)": 0.0,
        "org.jfree.data.time$SerialDate#monthCodeToString(int)": 0,
        "org.jfree.data.time$SerialDate#monthCodeToString(int,boolean)": 0,
        "org.jfree.data.time$SerialDate#relativeToString(int)": 0,
        "org.jfree.data.time$SerialDate#setDescription(java.lang.String)": 0,
        "org.jfree.data.time$SerialDate#stringToMonthCode(java.lang.String)": 0.0,
        "org.jfree.data.time$SerialDate#stringToWeekdayCode(java.lang.String)": 0,
        "org.jfree.data.time$SerialDate#toString()": 0,
        "org.jfree.data.time$SerialDate#weekInMonthToString(int)": 0,
        "org.jfree.data.time$SerialDate#weekdayCodeToString(int)": 0,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int,int,int)": 0.08606629658238704,
        "org.jfree.data.time$SpreadsheetDate#calcSerial(int,int,int)": 0.08606629658238704,
        "org.jfree.data.time$SpreadsheetDate#compare(org.jfree.data.time.SerialDate)": 0.31622776601683794,
        "org.jfree.data.time$SpreadsheetDate#compareTo(java.lang.Object)": 0,
        "org.jfree.data.time$SpreadsheetDate#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#getDayOfMonth()": 0.08606629658238704,
        "org.jfree.data.time$SpreadsheetDate#getDayOfWeek()": 0,
        "org.jfree.data.time$SpreadsheetDate#getMonth()": 0.08606629658238704,
        "org.jfree.data.time$SpreadsheetDate#getYYYY()": 0.08606629658238704,
        "org.jfree.data.time$SpreadsheetDate#hashCode()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isAfter(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isBefore(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)": 0,
        "org.jfree.data.time$SpreadsheetDate#isOn(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrAfter(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrBefore(org.jfree.data.time.SerialDate)": 0,
        "org.jfree.data.time$SpreadsheetDate#toDate()": 0,
        "org.jfree.data.time$SpreadsheetDate#toSerial()": 0.13608276348795434,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable)": 0.2886751345948129,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.Class)": 0.19611613513818404,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)": 0.17677669529663687,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)": 0.2182178902359924,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)": 0.2182178902359924,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.20851441405707477,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)": 0.20851441405707477,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)": 0.0,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)": 0.1889822365046136,
        "org.jfree.data.time$TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)": 0.0,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#clear()": 0,
        "org.jfree.data.time$TimeSeries#clone()": 0.0,
        "org.jfree.data.time$TimeSeries#createCopy(int,int)": 0.5773502691896258,
        "org.jfree.data.time$TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": 0.7071067811865475,
        "org.jfree.data.time$TimeSeries#delete(int,int)": 0.0,
        "org.jfree.data.time$TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeries#getDataItem(int)": 0.1889822365046136,
        "org.jfree.data.time$TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#getDomainDescription()": 0.0,
        "org.jfree.data.time$TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)": 0.3333333333333333,
        "org.jfree.data.time$TimeSeries#getItemCount()": 0.18569533817705186,
        "org.jfree.data.time$TimeSeries#getItems()": 0,
        "org.jfree.data.time$TimeSeries#getMaximumItemAge()": 0.0,
        "org.jfree.data.time$TimeSeries#getMaximumItemCount()": 0.0,
        "org.jfree.data.time$TimeSeries#getNextTimePeriod()": 0,
        "org.jfree.data.time$TimeSeries#getRangeDescription()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriod(int)": 0.1889822365046136,
        "org.jfree.data.time$TimeSeries#getTimePeriodClass()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriods()": 0,
        "org.jfree.data.time$TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)": 0,
        "org.jfree.data.time$TimeSeries#getValue(int)": 0.0,
        "org.jfree.data.time$TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#hashCode()": 0.0,
        "org.jfree.data.time$TimeSeries#removeAgedItems(boolean)": 0.1889822365046136,
        "org.jfree.data.time$TimeSeries#removeAgedItems(long,boolean)": 0.0,
        "org.jfree.data.time$TimeSeries#setDomainDescription(java.lang.String)": 0,
        "org.jfree.data.time$TimeSeries#setMaximumItemAge(long)": 0.0,
        "org.jfree.data.time$TimeSeries#setMaximumItemCount(int)": 0.0,
        "org.jfree.data.time$TimeSeries#setRangeDescription(java.lang.String)": 0,
        "org.jfree.data.time$TimeSeries#update(int,java.lang.Number)": 0,
        "org.jfree.data.time$TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,double)": 0.1889822365046136,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.1796053020267749,
        "org.jfree.data.time$TimeSeriesDataItem#clone()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#compareTo(java.lang.Object)": 0.2672612419124244,
        "org.jfree.data.time$TimeSeriesDataItem#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#getPeriod()": 0.1889822365046136,
        "org.jfree.data.time$TimeSeriesDataItem#getValue()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#hashCode()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#setValue(java.lang.Number)": 0.0,
        "org.jfree.data.time$Year#Year()": 0.0,
        "org.jfree.data.time$Year#Year(int)": 0.10976425998969035,
        "org.jfree.data.time$Year#Year(java.util.Date)": 0.0,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": 0.17677669529663687,
        "org.jfree.data.time$Year#equals(java.lang.Object)": 0.0,
        "org.jfree.data.time$Year#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": 0.10783277320343841,
        "org.jfree.data.time$Year#getLastMillisecond()": 0.0,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": 0.10783277320343841,
        "org.jfree.data.time$Year#getSerialIndex()": 0.20851441405707477,
        "org.jfree.data.time$Year#getYear()": 0.12909944487358055,
        "org.jfree.data.time$Year#hashCode()": 0.0,
        "org.jfree.data.time$Year#next()": 0.0,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": 0.10783277320343841,
        "org.jfree.data.time$Year#previous()": 0.0,
        "org.jfree.data.time$Year#toString()": 0
    },
    "Lang-1": {
        "org.apache.commons.lang3$StringUtils#<clinit>()": 0.04920678313051229,
        "org.apache.commons.lang3$StringUtils#StringUtils()": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#appendIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#appendIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.1796053020267749,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(byte[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(byte[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(char[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(char[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(double[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(double[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(float[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(float[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(int[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(int[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(long[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(long[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(short[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(short[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#prependIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removePattern(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replacePattern(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#<clinit>()": 0.10660035817780521,
        "org.apache.commons.lang3.math$NumberUtils#NumberUtils()": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createBigDecimal(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createBigInteger(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createDouble(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createFloat(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createInteger(java.lang.String)": 0.4472135954999579,
        "org.apache.commons.lang3.math$NumberUtils#createLong(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createNumber(java.lang.String)": 0.31622776601683794,
        "org.apache.commons.lang3.math$NumberUtils#isAllZeros(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#isDigits(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#isNumber(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(byte,byte,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(byte[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(double,double,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(double[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(float,float,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(float[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(int,int,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(int[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(long,long,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(long[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(short,short,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(short[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(byte,byte,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(byte[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(double,double,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(double[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(float,float,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(float[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(int,int,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(int[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(long,long,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(long[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(short,short,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(short[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#validateArray(java.lang.Object)": 0.0
    },
    "Lang-10": {
        "org.apache.commons.lang3.time$FastDateFormat#<clinit>()": 0.07808688094430304,
        "org.apache.commons.lang3.time$FastDateFormat#FastDateFormat(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.07808688094430304,
        "org.apache.commons.lang3.time$FastDateFormat#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.10540925533894598,
        "org.apache.commons.lang3.time$FastDateFormat#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getMaxLengthEstimate()": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String)": 0.17149858514250882,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String,java.text.ParsePosition)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#parseObject(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$1#createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.07808688094430304,
        "org.apache.commons.lang3.time$FastDateParser#<clinit>()": 0.13671718540493266,
        "org.apache.commons.lang3.time$FastDateParser#FastDateParser(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.13801311186847084,
        "org.apache.commons.lang3.time$FastDateParser#adjustYear(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#copy(org.apache.commons.lang3.time.FastDateParser$KeyValue[],int,java.lang.String[])": 0.18107149208503706,
        "org.apache.commons.lang3.time$FastDateParser#count(java.lang.String[])": 0.18107149208503706,
        "org.apache.commons.lang3.time$FastDateParser#createKeyValues(java.lang.String[],java.lang.String[])": 0.18107149208503706,
        "org.apache.commons.lang3.time$FastDateParser#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#escapeRegex(java.lang.StringBuilder,java.lang.String,boolean)": 0.13934660285832354,
        "org.apache.commons.lang3.time$FastDateParser#getDisplayNames(int)": 0.18107149208503706,
        "org.apache.commons.lang3.time$FastDateParser#getFieldWidth()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getParsePattern()": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDateParser#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getStrategy(java.lang.String)": 0.13801311186847084,
        "org.apache.commons.lang3.time$FastDateParser#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#init()": 0.13801311186847084,
        "org.apache.commons.lang3.time$FastDateParser#isNextNumber()": 0.13801311186847084,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String)": 0.24253562503633297,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String,java.text.ParsePosition)": 0.23904572186687872,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String)": 0,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#toArray(java.util.Map)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$1#compare(org.apache.commons.lang3.time.FastDateParser$KeyValue,org.apache.commons.lang3.time.FastDateParser$KeyValue)": 0.18107149208503706,
        "org.apache.commons.lang3.time$FastDateParser$2#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$3#modify(int)": 0.2721655269759087,
        "org.apache.commons.lang3.time$FastDateParser$4#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$5#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#FastDateParser$CopyQuotedStrategy(java.lang.String)": 0.13934660285832354,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.13934660285832354,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#isNumber()": 0.14002800840280097,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0,
        "org.apache.commons.lang3.time$FastDateParser$KeyValue#FastDateParser$KeyValue(java.lang.String,int)": 0.18107149208503706,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#FastDateParser$NumberStrategy(int)": 0.13671718540493266,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.13801311186847084,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#isNumber()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.23904572186687872,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#FastDateParser$TextStrategy(int)": 0.13671718540493266,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.18107149208503706,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#isNumber()": 0,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.3333333333333333,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#FastDateParser$TimeZoneStrategy(java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#isNumber()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#<clinit>()": 0.07254762501100116,
        "org.apache.commons.lang3.time$FastDatePrinter#FastDatePrinter(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.07254762501100116,
        "org.apache.commons.lang3.time$FastDatePrinter#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getMaxLengthEstimate()": 0,
        "org.apache.commons.lang3.time$FastDatePrinter#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#init()": 0.07254762501100116,
        "org.apache.commons.lang3.time$FastDatePrinter#parsePattern()": 0.07254762501100116,
        "org.apache.commons.lang3.time$FastDatePrinter#parseToken(java.lang.String,int[])": 0.07254762501100116,
        "org.apache.commons.lang3.time$FastDatePrinter#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#selectNumberRule(int,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#FastDatePrinter$CharacterLiteral(char)": 0.07372097807744857,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#estimateLength()": 0.07372097807744857,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#FastDatePrinter$PaddedNumberField(int,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#FastDatePrinter$StringLiteral(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#FastDatePrinter$TextField(int,java.lang.String[])": 0.09622504486493763,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#estimateLength()": 0.09622504486493763,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#FastDatePrinter$TimeZoneDisplayKey(java.util.TimeZone,boolean,int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#FastDatePrinter$TimeZoneNameRule(java.util.TimeZone,java.util.Locale,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#FastDatePrinter$TimeZoneNumberRule(boolean)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#FastDatePrinter$TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,int)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#FastDatePrinter$TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,int)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#FastDatePrinter$TwoDigitMonthField()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#FastDatePrinter$TwoDigitNumberField(int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#FastDatePrinter$TwoDigitYearField()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#<clinit>()": 0.18257418583505536,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#FastDatePrinter$UnpaddedMonthField()": 0.18257418583505536,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#estimateLength()": 0.18257418583505536,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#FastDatePrinter$UnpaddedNumberField(int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FormatCache#<clinit>()": 0.07715167498104596,
        "org.apache.commons.lang3.time$FormatCache#FormatCache()": 0.07808688094430304,
        "org.apache.commons.lang3.time$FormatCache#getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FormatCache#getInstance()": 0.0,
        "org.apache.commons.lang3.time$FormatCache#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.07808688094430304,
        "org.apache.commons.lang3.time$FormatCache#getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#FormatCache$MultipartKey(java.lang.Object[])": 0.07715167498104596,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#hashCode()": 0.07715167498104596
    },
    "Lang-12": {
        "org.apache.commons.lang3$RandomStringUtils#<clinit>()": 0.6324555320336759,
        "org.apache.commons.lang3$RandomStringUtils#RandomStringUtils()": 0.0,
        "org.apache.commons.lang3$RandomStringUtils#random(int)": 0.4082482904638631,
        "org.apache.commons.lang3$RandomStringUtils#random(int,boolean,boolean)": 0.4082482904638631,
        "org.apache.commons.lang3$RandomStringUtils#random(int,char[])": 0.5,
        "org.apache.commons.lang3$RandomStringUtils#random(int,int,int,boolean,boolean)": 0.4082482904638631,
        "org.apache.commons.lang3$RandomStringUtils#random(int,int,int,boolean,boolean,char[])": 0,
        "org.apache.commons.lang3$RandomStringUtils#random(int,int,int,boolean,boolean,char[],java.util.Random)": 0.7071067811865475,
        "org.apache.commons.lang3$RandomStringUtils#random(int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$RandomStringUtils#randomAlphabetic(int)": 0.0,
        "org.apache.commons.lang3$RandomStringUtils#randomAlphanumeric(int)": 0.0,
        "org.apache.commons.lang3$RandomStringUtils#randomAscii(int)": 0.0,
        "org.apache.commons.lang3$RandomStringUtils#randomNumeric(int)": 0.0
    },
    "Lang-13": {
        "org.apache.commons.lang3$SerializationException#SerializationException()": 0.0,
        "org.apache.commons.lang3$SerializationException#SerializationException(java.lang.String)": 0.0,
        "org.apache.commons.lang3$SerializationException#SerializationException(java.lang.String,java.lang.Throwable)": 0.7071067811865475,
        "org.apache.commons.lang3$SerializationException#SerializationException(java.lang.Throwable)": 0.0,
        "org.apache.commons.lang3$SerializationUtils#SerializationUtils()": 0.0,
        "org.apache.commons.lang3$SerializationUtils#clone(java.io.Serializable)": 0.35355339059327373,
        "org.apache.commons.lang3$SerializationUtils#deserialize(byte[])": 0.0,
        "org.apache.commons.lang3$SerializationUtils#deserialize(java.io.InputStream)": 0.0,
        "org.apache.commons.lang3$SerializationUtils#serialize(java.io.Serializable)": 0.24253562503633297,
        "org.apache.commons.lang3$SerializationUtils#serialize(java.io.Serializable,java.io.OutputStream)": 0.20851441405707477,
        "org.apache.commons.lang3$SerializationUtils$ClassLoaderAwareObjectInputStream#SerializationUtils$ClassLoaderAwareObjectInputStream(java.io.InputStream,java.lang.ClassLoader)": 0.4082482904638631,
        "org.apache.commons.lang3$SerializationUtils$ClassLoaderAwareObjectInputStream#resolveClass(java.io.ObjectStreamClass)": 0.4082482904638631
    },
    "Lang-14": {
        "org.apache.commons.lang3$CharSequenceUtils#CharSequenceUtils()": 0.0,
        "org.apache.commons.lang3$CharSequenceUtils#indexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$CharSequenceUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$CharSequenceUtils#lastIndexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$CharSequenceUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$CharSequenceUtils#regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$CharSequenceUtils#subSequence(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$CharSequenceUtils#toCharArray(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#<clinit>()": 0.05652334189442215,
        "org.apache.commons.lang3$StringUtils#StringUtils()": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": 0.24253562503633297,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeAccentsJava6(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeAccentsSUN(java.lang.CharSequence)": 0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$StringUtils$InitStripAccents#<clinit>()": 0.0,
        "org.apache.commons.lang3$StringUtils$InitStripAccents#StringUtils$InitStripAccents()": 0
    },
    "Lang-15": {
        "org.apache.commons.lang3$ArrayUtils#<clinit>()": 0.03617873026462108,
        "org.apache.commons.lang3$ArrayUtils#ArrayUtils()": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],int,boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],int,byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(char[],int,char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(double[],int,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(float[],int,float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object,int,java.lang.Object,java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],int,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(long[],int,long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(short[],int,short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(boolean[],boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(byte[],byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(char[],char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(double[],double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(float[],float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(java.lang.Object[],java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(long[],long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(short[],short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(java.lang.Object[])": 0.1336306209562122,
        "org.apache.commons.lang3$ArrayUtils#clone(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#copyArrayGrow1(java.lang.Object,java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#extractIndices(java.util.HashSet)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#getLength(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#hashCode(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEquals(java.lang.Object,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(boolean[],boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(byte[],byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(char[],char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(double[],double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(float[],float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(java.lang.Object[],java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(long[],long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(short[],short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameType(java.lang.Object,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Character[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Integer[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(boolean[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(byte[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(char[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(double[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(float[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(long[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(short[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(boolean[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(byte[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(char[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(double[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(float[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object,int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(long[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(short[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(boolean[],boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(byte[],byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(char[],char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(double[],double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(float[],float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(java.lang.Object[],java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(long[],long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(short[],short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(boolean[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(byte[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(char[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(double[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(float[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(java.lang.Object[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(long[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(short[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toArray(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toMap(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object,java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#<clinit>()": 0.1414213562373095,
        "org.apache.commons.lang3$ClassUtils#ClassUtils()": 0.0,
        "org.apache.commons.lang3$ClassUtils#addAbbreviation(java.lang.String,java.lang.String)": 0.1414213562373095,
        "org.apache.commons.lang3$ClassUtils#convertClassNamesToClasses(java.util.List)": 0.0,
        "org.apache.commons.lang3$ClassUtils#convertClassesToClassNames(java.util.List)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getAllInterfaces(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getAllInterfaces(java.lang.Class,java.util.HashSet)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getAllSuperclasses(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getCanonicalName(java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getClass(java.lang.ClassLoader,java.lang.String)": 0,
        "org.apache.commons.lang3$ClassUtils#getClass(java.lang.ClassLoader,java.lang.String,boolean)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getClass(java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getClass(java.lang.String,boolean)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getPackageCanonicalName(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getPackageCanonicalName(java.lang.Object,java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getPackageCanonicalName(java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getPackageName(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getPackageName(java.lang.Object,java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getPackageName(java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])": 0.0,
        "org.apache.commons.lang3$ClassUtils#getShortCanonicalName(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getShortCanonicalName(java.lang.Object,java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getShortCanonicalName(java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getShortClassName(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getShortClassName(java.lang.Object,java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getShortClassName(java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getSimpleName(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getSimpleName(java.lang.Object,java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#isAssignable(java.lang.Class,java.lang.Class)": 0.4472135954999579,
        "org.apache.commons.lang3$ClassUtils#isAssignable(java.lang.Class,java.lang.Class,boolean)": 0.282842712474619,
        "org.apache.commons.lang3$ClassUtils#isAssignable(java.lang.Class[],java.lang.Class[])": 0.0,
        "org.apache.commons.lang3$ClassUtils#isAssignable(java.lang.Class[],java.lang.Class[],boolean)": 0.0,
        "org.apache.commons.lang3$ClassUtils#isInnerClass(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#isPrimitiveOrWrapper(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#isPrimitiveWrapper(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#primitiveToWrapper(java.lang.Class)": 0.22360679774997896,
        "org.apache.commons.lang3$ClassUtils#primitivesToWrappers(java.lang.Class[])": 0.0,
        "org.apache.commons.lang3$ClassUtils#toCanonicalName(java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#toClass(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ClassUtils#wrapperToPrimitive(java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ClassUtils#wrappersToPrimitives(java.lang.Class[])": 0.0,
        "org.apache.commons.lang3$JavaVersion#<clinit>()": 0.08856148855400953,
        "org.apache.commons.lang3$JavaVersion#JavaVersion(java.lang.String,int,float,java.lang.String)": 0.08856148855400953,
        "org.apache.commons.lang3$JavaVersion#atLeast(org.apache.commons.lang3.JavaVersion)": 0.2721655269759087,
        "org.apache.commons.lang3$JavaVersion#get(java.lang.String)": 0.08891084489487741,
        "org.apache.commons.lang3$JavaVersion#getJavaVersion(java.lang.String)": 0.0,
        "org.apache.commons.lang3$JavaVersion#toString()": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#<clinit>()": 0.14433756729740646,
        "org.apache.commons.lang3$StringEscapeUtils#StringEscapeUtils()": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeCsv(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeEcmaScript(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml3(java.lang.String)": 0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml4(java.lang.String)": 0.31622776601683794,
        "org.apache.commons.lang3$StringEscapeUtils#escapeJava(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeXml(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeCsv(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeEcmaScript(java.lang.String)": 0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml3(java.lang.String)": 0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml4(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeJava(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeXml(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#<clinit>()": 0.14433756729740646,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#StringEscapeUtils$CsvEscaper()": 0.14433756729740646,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#<clinit>()": 0.14433756729740646,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#StringEscapeUtils$CsvUnescaper()": 0.14433756729740646,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3$SystemUtils#<clinit>()": 0.0890870806374748,
        "org.apache.commons.lang3$SystemUtils#SystemUtils()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getJavaHome()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getJavaIoTmpDir()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getJavaVersionMatches(java.lang.String)": 0.0890870806374748,
        "org.apache.commons.lang3$SystemUtils#getOSMatches(java.lang.String,java.lang.String)": 0.0890870806374748,
        "org.apache.commons.lang3$SystemUtils#getOSMatchesName(java.lang.String)": 0.0890870806374748,
        "org.apache.commons.lang3$SystemUtils#getSystemProperty(java.lang.String)": 0.0890870806374748,
        "org.apache.commons.lang3$SystemUtils#getUserDir()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getUserHome()": 0.0,
        "org.apache.commons.lang3$SystemUtils#isJavaAwtHeadless()": 0.0,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)": 0.2773500981126146,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionMatch(java.lang.String,java.lang.String)": 0.0890870806374748,
        "org.apache.commons.lang3$SystemUtils#isOSMatch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0890870806374748,
        "org.apache.commons.lang3$SystemUtils#isOSNameMatch(java.lang.String,java.lang.String)": 0.0890870806374748,
        "org.apache.commons.lang3.reflect$TypeUtils#TypeUtils()": 0,
        "org.apache.commons.lang3.reflect$TypeUtils#determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#getArrayComponentType(java.lang.reflect.Type)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#getClosestParentType(java.lang.Class,java.lang.Class)": 0.5773502691896258,
        "org.apache.commons.lang3.reflect$TypeUtils#getImplicitBounds(java.lang.reflect.TypeVariable)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#getImplicitLowerBounds(java.lang.reflect.WildcardType)": 0.5,
        "org.apache.commons.lang3.reflect$TypeUtils#getImplicitUpperBounds(java.lang.reflect.WildcardType)": 0.5,
        "org.apache.commons.lang3.reflect$TypeUtils#getRawType(java.lang.reflect.ParameterizedType)": 0.5773502691896258,
        "org.apache.commons.lang3.reflect$TypeUtils#getRawType(java.lang.reflect.Type,java.lang.reflect.Type)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.Class,java.lang.Class,java.util.Map)": 0.6324555320336759,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.reflect.ParameterizedType)": 0,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)": 0.5773502691896258,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.reflect.Type,java.lang.Class)": 0.5,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)": 0.6324555320336759,
        "org.apache.commons.lang3.reflect$TypeUtils#isArrayType(java.lang.reflect.Type)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.Class)": 0.5773502691896258,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)": 0.7071067811865475,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)": 0.4082482904638631,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)": 0.5773502691896258,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)": 0.5773502691896258,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.util.Map)": 0,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)": 0.5,
        "org.apache.commons.lang3.reflect$TypeUtils#isInstance(java.lang.Object,java.lang.reflect.Type)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#normalizeUpperBounds(java.lang.reflect.Type[])": 0.5,
        "org.apache.commons.lang3.reflect$TypeUtils#substituteTypeVariables(java.lang.reflect.Type,java.util.Map)": 0.5,
        "org.apache.commons.lang3.reflect$TypeUtils#typesSatisfyVariables(java.util.Map)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)": 0,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.16222142113076254,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": 0.11322770341445956,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": 0.11952286093343936,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": 0.11624763874381928,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#CodePointTranslator()": 0.1270001270001905,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$EntityArrays#<clinit>()": 0.13608276348795434,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_ESCAPE()": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_UNESCAPE()": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_ESCAPE()": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_UNESCAPE()": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$EntityArrays#EntityArrays()": 0.0,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_ESCAPE()": 0.1414213562373095,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_UNESCAPE()": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_ESCAPE()": 0.1414213562373095,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_UNESCAPE()": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_ESCAPE()": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_UNESCAPE()": 0.14433756729740646,
        "org.apache.commons.lang3.text.translate$EntityArrays#invert(java.lang.String[][])": 0.13608276348795434,
        "org.apache.commons.lang3.text.translate$LookupTranslator#LookupTranslator(java.lang.CharSequence[][])": 0.1414213562373095,
        "org.apache.commons.lang3.text.translate$LookupTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.15811388300841897,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[])": 0.13608276348795434,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION)": 0.0,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#<clinit>()": 0.13608276348795434,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#NumericEntityUnescaper$OPTION(java.lang.String,int)": 0.13608276348795434,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#<clinit>()": 0.1414213562373095,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#OctalUnescaper()": 0.1414213562373095,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper()": 0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper(int,int,boolean)": 0.13608276348795434,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#above(int)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#below(int)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#between(int,int)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#outsideOf(int,int)": 0.1386750490563073,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#translate(int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#UnicodeUnescaper()": 0.13608276348795434,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0
    },
    "Lang-16": {
        "org.apache.commons.lang3$JavaVersion#<clinit>()": 0.0,
        "org.apache.commons.lang3$JavaVersion#JavaVersion(java.lang.String,int,float,java.lang.String)": 0.0,
        "org.apache.commons.lang3$JavaVersion#atLeast(org.apache.commons.lang3.JavaVersion)": 0.0,
        "org.apache.commons.lang3$JavaVersion#get(java.lang.String)": 0.0,
        "org.apache.commons.lang3$JavaVersion#getJavaVersion(java.lang.String)": 0.0,
        "org.apache.commons.lang3$JavaVersion#toString()": 0.0,
        "org.apache.commons.lang3$StringUtils#<clinit>()": 0.05670479771237427,
        "org.apache.commons.lang3$StringUtils#StringUtils()": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.20412414523193154,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": 0.07832604499879574,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeAccentsJava6(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeAccentsSUN(java.lang.CharSequence)": 0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$SystemUtils#<clinit>()": 0.0,
        "org.apache.commons.lang3$SystemUtils#SystemUtils()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getJavaHome()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getJavaIoTmpDir()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getJavaVersionMatches(java.lang.String)": 0.0,
        "org.apache.commons.lang3$SystemUtils#getOSMatches(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$SystemUtils#getOSMatchesName(java.lang.String)": 0.0,
        "org.apache.commons.lang3$SystemUtils#getSystemProperty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$SystemUtils#getUserDir()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getUserHome()": 0.0,
        "org.apache.commons.lang3$SystemUtils#isJavaAwtHeadless()": 0.0,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)": 0.0,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionMatch(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$SystemUtils#isOSMatch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$SystemUtils#isOSNameMatch(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#<clinit>()": 0.1111111111111111,
        "org.apache.commons.lang3.math$NumberUtils#NumberUtils()": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createBigDecimal(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createBigInteger(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createDouble(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#createFloat(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#createInteger(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#createLong(java.lang.String)": 0.5,
        "org.apache.commons.lang3.math$NumberUtils#createNumber(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#isAllZeros(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#isDigits(java.lang.String)": 0.5,
        "org.apache.commons.lang3.math$NumberUtils#isNumber(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(byte,byte,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(byte[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(double,double,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(double[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(float,float,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(float[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(int,int,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(int[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(long,long,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(long[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(short,short,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(short[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(byte,byte,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(byte[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(double,double,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(double[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(float,float,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(float[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(int,int,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(int[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(long,long,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(long[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(short,short,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(short[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String,short)": 0.0
    },
    "Lang-17": {
        "org.apache.commons.lang3$ArrayUtils#<clinit>()": 0.05616559563017304,
        "org.apache.commons.lang3$ArrayUtils#ArrayUtils()": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],int,boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],int,byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(char[],int,char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(double[],int,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(float[],int,float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object,int,java.lang.Object,java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],int,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(long[],int,long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(short[],int,short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(boolean[],boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(byte[],byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(char[],char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(double[],double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(float[],float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(java.lang.Object[],java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(long[],long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(short[],short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(java.lang.Object[])": 0.20412414523193154,
        "org.apache.commons.lang3$ArrayUtils#clone(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#copyArrayGrow1(java.lang.Object,java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#getLength(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#hashCode(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEquals(java.lang.Object,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(boolean[],boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(byte[],byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(char[],char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(double[],double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(float[],float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(java.lang.Object[],java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(long[],long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(short[],short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameType(java.lang.Object,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Character[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Integer[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(boolean[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(byte[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(char[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(double[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(float[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(long[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(short[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(boolean[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(byte[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(char[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(double[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(float[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(java.lang.Object[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(long[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(short[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toArray(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toMap(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#<clinit>()": 0.2182178902359924,
        "org.apache.commons.lang3$StringEscapeUtils#StringEscapeUtils()": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeCsv(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeEcmaScript(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml3(java.lang.String)": 0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml4(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeJava(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeXml(java.lang.String)": 0.7071067811865475,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeCsv(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeEcmaScript(java.lang.String)": 0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml3(java.lang.String)": 0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml4(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeJava(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeXml(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#<clinit>()": 0.2182178902359924,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#StringEscapeUtils$CsvEscaper()": 0.2182178902359924,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#<clinit>()": 0.2182178902359924,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#StringEscapeUtils$CsvUnescaper()": 0.2182178902359924,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.25,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": 0.16666666666666666,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": 0.17677669529663687,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": 0.17149858514250882,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#CodePointTranslator()": 0.1889822365046136,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$EntityArrays#<clinit>()": 0.20412414523193154,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_ESCAPE()": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_UNESCAPE()": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_ESCAPE()": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_UNESCAPE()": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$EntityArrays#EntityArrays()": 0.0,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_ESCAPE()": 0.21320071635561041,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_UNESCAPE()": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_ESCAPE()": 0.21320071635561041,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_UNESCAPE()": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_ESCAPE()": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_UNESCAPE()": 0.2182178902359924,
        "org.apache.commons.lang3.text.translate$EntityArrays#invert(java.lang.String[][])": 0.20412414523193154,
        "org.apache.commons.lang3.text.translate$LookupTranslator#LookupTranslator(java.lang.CharSequence[][])": 0.21320071635561041,
        "org.apache.commons.lang3.text.translate$LookupTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.24253562503633297,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[])": 0.20412414523193154,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION)": 0.0,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#<clinit>()": 0.20412414523193154,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#NumericEntityUnescaper$OPTION(java.lang.String,int)": 0.20412414523193154,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#<clinit>()": 0.21320071635561041,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#OctalUnescaper()": 0.21320071635561041,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper()": 0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper(int,int,boolean)": 0.20412414523193154,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#above(int)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#below(int)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#between(int,int)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#outsideOf(int,int)": 0.20851441405707477,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#translate(int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#UnicodeUnescaper()": 0.20412414523193154,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0
    },
    "Lang-18": {
        "org.apache.commons.lang3$Validate#Validate()": 0.0,
        "org.apache.commons.lang3$Validate#exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)": 0.0,
        "org.apache.commons.lang3$Validate#exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)": 0.0,
        "org.apache.commons.lang3$Validate#inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#isAssignableFrom(java.lang.Class,java.lang.Class)": 0.0,
        "org.apache.commons.lang3$Validate#isAssignableFrom(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#isInstanceOf(java.lang.Class,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$Validate#isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#isTrue(boolean)": 0.0,
        "org.apache.commons.lang3$Validate#isTrue(boolean,java.lang.String,double)": 0.0,
        "org.apache.commons.lang3$Validate#isTrue(boolean,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#isTrue(boolean,java.lang.String,long)": 0.1643989873053573,
        "org.apache.commons.lang3$Validate#matchesPattern(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$Validate#matchesPattern(java.lang.CharSequence,java.lang.String,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#noNullElements(java.lang.Iterable)": 0.0,
        "org.apache.commons.lang3$Validate#noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#noNullElements(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#notBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$Validate#notBlank(java.lang.CharSequence,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#notEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$Validate#notEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#notEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#notEmpty(java.util.Collection)": 0.0,
        "org.apache.commons.lang3$Validate#notEmpty(java.util.Collection,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#notEmpty(java.util.Map)": 0.0,
        "org.apache.commons.lang3$Validate#notEmpty(java.util.Map,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#notNull(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$Validate#notNull(java.lang.Object,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#validIndex(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$Validate#validIndex(java.lang.CharSequence,int,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#validIndex(java.lang.Object[],int)": 0.0,
        "org.apache.commons.lang3$Validate#validIndex(java.lang.Object[],int,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#validIndex(java.util.Collection,int)": 0.0,
        "org.apache.commons.lang3$Validate#validIndex(java.util.Collection,int,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$Validate#validState(boolean)": 0,
        "org.apache.commons.lang3$Validate#validState(boolean,java.lang.String,java.lang.Object[])": 0,
        "org.apache.commons.lang3.time$FastDateFormat#<clinit>()": 0.14433756729740646,
        "org.apache.commons.lang3.time$FastDateFormat#FastDateFormat(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.14433756729740646,
        "org.apache.commons.lang3.time$FastDateFormat#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0.16012815380508713,
        "org.apache.commons.lang3.time$FastDateFormat#equals(java.lang.Object)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar)": 0.1690308509457033,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar,java.lang.StringBuffer)": 0.1690308509457033,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date)": 0.17407765595569785,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long)": 1.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone,java.util.Locale)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String)": 0.15617376188860607,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getMaxLengthEstimate()": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.Locale)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone,java.util.Locale)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDateFormat#hashCode()": 0,
        "org.apache.commons.lang3.time$FastDateFormat#init()": 0.14433756729740646,
        "org.apache.commons.lang3.time$FastDateFormat#parseObject(java.lang.String,java.text.ParsePosition)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#parsePattern()": 0.14433756729740646,
        "org.apache.commons.lang3.time$FastDateFormat#parseToken(java.lang.String,int[])": 0.14433756729740646,
        "org.apache.commons.lang3.time$FastDateFormat#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#selectNumberRule(int,int)": 0.14433756729740646,
        "org.apache.commons.lang3.time$FastDateFormat#toString()": 0,
        "org.apache.commons.lang3.time$FastDateFormat$1#createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.14433756729740646,
        "org.apache.commons.lang3.time$FastDateFormat$CharacterLiteral#FastDateFormat$CharacterLiteral(char)": 0.14586499149789456,
        "org.apache.commons.lang3.time$FastDateFormat$CharacterLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.16666666666666666,
        "org.apache.commons.lang3.time$FastDateFormat$CharacterLiteral#estimateLength()": 0.14586499149789456,
        "org.apache.commons.lang3.time$FastDateFormat$PaddedNumberField#FastDateFormat$PaddedNumberField(int,int)": 0.14744195615489714,
        "org.apache.commons.lang3.time$FastDateFormat$PaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.16666666666666666,
        "org.apache.commons.lang3.time$FastDateFormat$PaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.16666666666666666,
        "org.apache.commons.lang3.time$FastDateFormat$PaddedNumberField#estimateLength()": 0.14744195615489714,
        "org.apache.commons.lang3.time$FastDateFormat$StringLiteral#FastDateFormat$StringLiteral(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$StringLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$StringLiteral#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$TextField#FastDateFormat$TextField(int,java.lang.String[])": 0.16222142113076254,
        "org.apache.commons.lang3.time$FastDateFormat$TextField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.5773502691896258,
        "org.apache.commons.lang3.time$FastDateFormat$TextField#estimateLength()": 0.16222142113076254,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneDisplayKey#FastDateFormat$TimeZoneDisplayKey(java.util.TimeZone,boolean,int,java.util.Locale)": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneDisplayKey#equals(java.lang.Object)": 1.0,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneDisplayKey#hashCode()": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNameRule#FastDateFormat$TimeZoneNameRule(java.util.TimeZone,java.util.Locale,int)": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNameRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.0,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNameRule#estimateLength()": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNumberRule#<clinit>()": 0.17149858514250882,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNumberRule#FastDateFormat$TimeZoneNumberRule(boolean)": 0.17149858514250882,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNumberRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.35355339059327373,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNumberRule#estimateLength()": 0.17149858514250882,
        "org.apache.commons.lang3.time$FastDateFormat$TwelveHourField#FastDateFormat$TwelveHourField(org.apache.commons.lang3.time.FastDateFormat$NumberRule)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$TwelveHourField#appendTo(java.lang.StringBuffer,int)": 0,
        "org.apache.commons.lang3.time$FastDateFormat$TwelveHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0,
        "org.apache.commons.lang3.time$FastDateFormat$TwelveHourField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#<clinit>()": 0.15075567228888181,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#FastDateFormat$TwoDigitMonthField()": 0.15075567228888181,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#appendTo(java.lang.StringBuffer,int)": 0.17407765595569785,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.17407765595569785,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#estimateLength()": 0.15075567228888181,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitNumberField#FastDateFormat$TwoDigitNumberField(int)": 0.14586499149789456,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitNumberField#appendTo(java.lang.StringBuffer,int)": 0.1643989873053573,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.1643989873053573,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitNumberField#estimateLength()": 0.14586499149789456,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#<clinit>()": 0.5773502691896258,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#FastDateFormat$TwoDigitYearField()": 0.5773502691896258,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#appendTo(java.lang.StringBuffer,int)": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#estimateLength()": 0.5773502691896258,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#<clinit>()": 0.4472135954999579,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#FastDateFormat$UnpaddedMonthField()": 0.4472135954999579,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#appendTo(java.lang.StringBuffer,int)": 0.5,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.5,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#estimateLength()": 0.4472135954999579,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedNumberField#FastDateFormat$UnpaddedNumberField(int)": 0.3779644730092272,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.5,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.5,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedNumberField#estimateLength()": 0.3779644730092272,
        "org.apache.commons.lang3.time$FormatCache#FormatCache()": 0.14433756729740646,
        "org.apache.commons.lang3.time$FormatCache#getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FormatCache#getInstance()": 0,
        "org.apache.commons.lang3.time$FormatCache#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.14433756729740646,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#FormatCache$MultipartKey(java.lang.Object[])": 0.14433756729740646,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#hashCode()": 0.14433756729740646
    },
    "Lang-19": {
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.0,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": 0.24253562503633297,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": 0.2581988897471611,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": 0.25,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.0,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#NumericEntityUnescaper()": 0.29488391230979427,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.42640143271122083
    },
    "Lang-20": {
        "org.apache.commons.lang3$StringUtils#<clinit>()": 0.0922531208028885,
        "org.apache.commons.lang3$StringUtils#StringUtils()": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": 0.4082482904638631,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": 0.5,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": 0.5,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": 0.35355339059327373,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": 0.35355339059327373,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeAccentsJava6(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeAccentsSUN(java.lang.CharSequence)": 0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": 0.0
    },
    "Lang-22": {},
    "Lang-24": {},
    "Lang-26": {},
    "Lang-27": {},
    "Lang-28": {},
    "Lang-3": {
        "org.apache.commons.lang3$StringUtils#<clinit>()": 0.04926646390821466,
        "org.apache.commons.lang3$StringUtils#StringUtils()": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#appendIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#appendIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.18257418583505536,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(byte[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(byte[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(char[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(char[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(double[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(double[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(float[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(float[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(int[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(int[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(long[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(long[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(short[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(short[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#prependIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removePattern(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replacePattern(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#<clinit>()": 0.10721125348377948,
        "org.apache.commons.lang3.math$NumberUtils#NumberUtils()": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createBigDecimal(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createBigInteger(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createDouble(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createFloat(java.lang.String)": 0.3779644730092272,
        "org.apache.commons.lang3.math$NumberUtils#createInteger(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createLong(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createNumber(java.lang.String)": 0.3333333333333333,
        "org.apache.commons.lang3.math$NumberUtils#isAllZeros(java.lang.String)": 0.3779644730092272,
        "org.apache.commons.lang3.math$NumberUtils#isDigits(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#isNumber(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(byte,byte,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(byte[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(double,double,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(double[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(float,float,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(float[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(int,int,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(int[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(long,long,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(long[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(short,short,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(short[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(byte,byte,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(byte[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(double,double,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(double[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(float,float,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(float[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(int,int,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(int[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(long,long,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(long[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(short,short,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(short[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#validateArray(java.lang.Object)": 0.0
    },
    "Lang-30": {},
    "Lang-31": {},
    "Lang-32": {},
    "Lang-33": {},
    "Lang-34": {},
    "Lang-35": {},
    "Lang-36": {},
    "Lang-37": {},
    "Lang-38": {},
    "Lang-39": {},
    "Lang-4": {
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.0,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": 0.14907119849998599,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.0,
        "org.apache.commons.lang3.text.translate$LookupTranslator#LookupTranslator(java.lang.CharSequence[][])": 0.1796053020267749,
        "org.apache.commons.lang3.text.translate$LookupTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.19611613513818404
    },
    "Lang-40": {},
    "Lang-5": {
        "org.apache.commons.lang3$LocaleUtils#<clinit>()": 0.2773500981126146,
        "org.apache.commons.lang3$LocaleUtils#LocaleUtils()": 0.0,
        "org.apache.commons.lang3$LocaleUtils#availableLocaleList()": 0.2773500981126146,
        "org.apache.commons.lang3$LocaleUtils#availableLocaleSet()": 0.0,
        "org.apache.commons.lang3$LocaleUtils#countriesByLanguage(java.lang.String)": 0.0,
        "org.apache.commons.lang3$LocaleUtils#isAvailableLocale(java.util.Locale)": 0.2773500981126146,
        "org.apache.commons.lang3$LocaleUtils#languagesByCountry(java.lang.String)": 0.0,
        "org.apache.commons.lang3$LocaleUtils#localeLookupList(java.util.Locale)": 0.0,
        "org.apache.commons.lang3$LocaleUtils#localeLookupList(java.util.Locale,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$LocaleUtils#toLocale(java.lang.String)": 0.4472135954999579,
        "org.apache.commons.lang3$LocaleUtils$SyncAvoid#<clinit>()": 0.2773500981126146,
        "org.apache.commons.lang3$LocaleUtils$SyncAvoid#LocaleUtils$SyncAvoid()": 0
    },
    "Lang-6": {
        "org.apache.commons.lang3$ArrayUtils#<clinit>()": 0.050507627227610534,
        "org.apache.commons.lang3$ArrayUtils#ArrayUtils()": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],int,boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],int,byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(char[],int,char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(double[],int,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(float[],int,float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object,int,java.lang.Object,java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],int,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(long[],int,long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(short[],int,short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#add(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(boolean[],boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(byte[],byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(char[],char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(double[],double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(float[],float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(java.lang.Object[],java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(long[],long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#addAll(short[],short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(java.lang.Object[])": 0.18569533817705186,
        "org.apache.commons.lang3$ArrayUtils#clone(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#clone(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#contains(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#copyArrayGrow1(java.lang.Object,java.lang.Class)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#getLength(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#hashCode(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isEquals(java.lang.Object,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(boolean[],boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(byte[],byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(char[],char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(double[],double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(float[],float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(java.lang.Object[],java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(long[],long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(short[],short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#isSameType(java.lang.Object,java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int,double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Character[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Integer[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(boolean[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(byte[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(char[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(double[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(float[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(long[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#remove(short[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(boolean[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(byte[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(char[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(double[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(float[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object,int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object,java.util.BitSet)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(long[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeAll(short[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(char[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(int[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(java.lang.Object[],java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElement(short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(boolean[],boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(byte[],byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(char[],char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(double[],double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(float[],float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(int[],int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(java.lang.Object[],java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(long[],long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#removeElements(short[],short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#reverse(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(boolean[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(byte[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(char[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(double[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(float[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(int[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(java.lang.Object[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(long[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#subarray(short[],int,int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toArray(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toMap(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(char[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(int[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toObject(short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[],boolean)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[],byte)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[],char)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[],double)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[],float)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[],int)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[],long)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[])": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[],short)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object)": 0.0,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#<clinit>()": 0.2,
        "org.apache.commons.lang3$StringEscapeUtils#StringEscapeUtils()": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeCsv(java.lang.String)": 0.7071067811865475,
        "org.apache.commons.lang3$StringEscapeUtils#escapeEcmaScript(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml3(java.lang.String)": 0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml4(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeJava(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeXml(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeCsv(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeEcmaScript(java.lang.String)": 0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml3(java.lang.String)": 0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml4(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeJava(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeXml(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#<clinit>()": 0.2,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#StringEscapeUtils$CsvEscaper()": 0.2,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.5773502691896258,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#<clinit>()": 0.2,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#StringEscapeUtils$CsvUnescaper()": 0.2,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3$StringUtils#<clinit>()": 0.04993761694389223,
        "org.apache.commons.lang3$StringUtils#StringUtils()": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": 0.3333333333333333,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(byte[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(byte[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(char[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(char[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(double[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(double[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(float[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(float[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(int[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(int[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(long[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(long[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(short[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(short[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removePattern(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replacePattern(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.2,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": 0.15811388300841897,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": 0.0,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": 0.16666666666666666,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": 0.16222142113076254,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.2,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#CodePointTranslator()": 0.17677669529663687,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$EntityArrays#<clinit>()": 0.1889822365046136,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_ESCAPE()": 0.2,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_UNESCAPE()": 0.2,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_ESCAPE()": 0.2,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_UNESCAPE()": 0.2,
        "org.apache.commons.lang3.text.translate$EntityArrays#EntityArrays()": 0.0,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_ESCAPE()": 0.19611613513818404,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_UNESCAPE()": 0.2,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_ESCAPE()": 0.19611613513818404,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_UNESCAPE()": 0.2,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_ESCAPE()": 0.2,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_UNESCAPE()": 0.2,
        "org.apache.commons.lang3.text.translate$EntityArrays#invert(java.lang.String[][])": 0.1889822365046136,
        "org.apache.commons.lang3.text.translate$LookupTranslator#LookupTranslator(java.lang.CharSequence[][])": 0.19611613513818404,
        "org.apache.commons.lang3.text.translate$LookupTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[])": 0.1889822365046136,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION)": 0.0,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#<clinit>()": 0.1889822365046136,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#NumericEntityUnescaper$OPTION(java.lang.String,int)": 0.1889822365046136,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#<clinit>()": 0.19611613513818404,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#OctalUnescaper()": 0.19611613513818404,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper()": 0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper(int,int,boolean)": 0.1889822365046136,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#above(int)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#below(int)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#between(int,int)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#outsideOf(int,int)": 0.19245008972987526,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#translate(int,java.io.Writer)": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#UnicodeUnescaper()": 0.1889822365046136,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": 0.0
    },
    "Lang-7": {
        "org.apache.commons.lang3$JavaVersion#<clinit>()": 0.062257280636469035,
        "org.apache.commons.lang3$JavaVersion#JavaVersion(java.lang.String,int,float,java.lang.String)": 0.062257280636469035,
        "org.apache.commons.lang3$JavaVersion#atLeast(org.apache.commons.lang3.JavaVersion)": 0.19245008972987526,
        "org.apache.commons.lang3$JavaVersion#get(java.lang.String)": 0.0625,
        "org.apache.commons.lang3$JavaVersion#getJavaVersion(java.lang.String)": 0.0,
        "org.apache.commons.lang3$JavaVersion#toString()": 0.0,
        "org.apache.commons.lang3$StringUtils#<clinit>()": 0.05006261743217589,
        "org.apache.commons.lang3$StringUtils#StringUtils()": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.20412414523193154,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": 0.06441566264008308,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(byte[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(byte[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(char[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(char[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(double[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(double[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(float[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(float[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(int[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(int[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(long[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(long[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(short[],char)": 0.0,
        "org.apache.commons.lang3$StringUtils#join(short[],char,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removePattern(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#replacePattern(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": 0.0,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": 0.0,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3$SystemUtils#<clinit>()": 0.06262242910851495,
        "org.apache.commons.lang3$SystemUtils#SystemUtils()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getJavaHome()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getJavaIoTmpDir()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getJavaVersionMatches(java.lang.String)": 0.06262242910851495,
        "org.apache.commons.lang3$SystemUtils#getOSMatches(java.lang.String,java.lang.String)": 0.06262242910851495,
        "org.apache.commons.lang3$SystemUtils#getOSMatchesName(java.lang.String)": 0.06262242910851495,
        "org.apache.commons.lang3$SystemUtils#getSystemProperty(java.lang.String)": 0.06262242910851495,
        "org.apache.commons.lang3$SystemUtils#getUserDir()": 0.0,
        "org.apache.commons.lang3$SystemUtils#getUserHome()": 0.0,
        "org.apache.commons.lang3$SystemUtils#isJavaAwtHeadless()": 0.0,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)": 0.19611613513818404,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionMatch(java.lang.String,java.lang.String)": 0.06262242910851495,
        "org.apache.commons.lang3$SystemUtils#isOSMatch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.06262242910851495,
        "org.apache.commons.lang3$SystemUtils#isOSNameMatch(java.lang.String,java.lang.String)": 0.06262242910851495,
        "org.apache.commons.lang3.math$NumberUtils#<clinit>()": 0.1111111111111111,
        "org.apache.commons.lang3.math$NumberUtils#NumberUtils()": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#createBigDecimal(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#createBigInteger(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#createDouble(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#createFloat(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#createInteger(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#createLong(java.lang.String)": 0.5,
        "org.apache.commons.lang3.math$NumberUtils#createNumber(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#isAllZeros(java.lang.String)": 0.5773502691896258,
        "org.apache.commons.lang3.math$NumberUtils#isDigits(java.lang.String)": 0.5,
        "org.apache.commons.lang3.math$NumberUtils#isNumber(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(byte,byte,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(byte[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(double,double,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(double[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(float,float,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(float[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(int,int,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(int[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(long,long,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(long[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(short,short,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#max(short[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(byte,byte,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(byte[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(double,double,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(double[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(float,float,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(float[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(int,int,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(int[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(long,long,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(long[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(short,short,short)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#min(short[])": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String,byte)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String,double)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String,float)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String,long)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String)": 0.0,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String,short)": 0.0
    },
    "Lang-8": {
        "org.apache.commons.lang3.time$FastDateFormat#<clinit>()": 0.15075567228888181,
        "org.apache.commons.lang3.time$FastDateFormat#FastDateFormat(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.15075567228888181,
        "org.apache.commons.lang3.time$FastDateFormat#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar)": 0.23249527748763857,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String)": 0.22645540682891913,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getMaxLengthEstimate()": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String,java.text.ParsePosition)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#parseObject(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$1#createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.15075567228888181,
        "org.apache.commons.lang3.time$FastDateParser#<clinit>()": 0.13074409009212268,
        "org.apache.commons.lang3.time$FastDateParser#FastDateParser(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.1318760946791574,
        "org.apache.commons.lang3.time$FastDateParser#adjustYear(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#escapeRegex(java.lang.StringBuilder,java.lang.String,boolean)": 0.13303802104754786,
        "org.apache.commons.lang3.time$FastDateParser#getCache(int)": 0.16222142113076254,
        "org.apache.commons.lang3.time$FastDateParser#getDisplayNames(int,java.util.Calendar,java.util.Locale)": 0.17277368511627203,
        "org.apache.commons.lang3.time$FastDateParser#getFieldWidth()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getLocaleSpecificStrategy(int,java.util.Calendar)": 0.16222142113076254,
        "org.apache.commons.lang3.time$FastDateParser#getParsePattern()": 0,
        "org.apache.commons.lang3.time$FastDateParser#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getStrategy(java.lang.String,java.util.Calendar)": 0.1318760946791574,
        "org.apache.commons.lang3.time$FastDateParser#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#init()": 0.1318760946791574,
        "org.apache.commons.lang3.time$FastDateParser#isNextNumber()": 0.1318760946791574,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String)": 0,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$1#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$2#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$3#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$4#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#FastDateParser$CopyQuotedStrategy(java.lang.String)": 0.13303802104754786,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.13303802104754786,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#isNumber()": 0.13483997249264842,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#FastDateParser$NumberStrategy(int)": 0.13074409009212268,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.1318760946791574,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#isNumber()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#FastDateParser$TextStrategy(int,java.util.Calendar,java.util.Locale)": 0.17277368511627203,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.17277368511627203,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#isNumber()": 1.0,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#FastDateParser$TimeZoneStrategy(java.util.Locale)": 0.17407765595569785,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.17407765595569785,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#isNumber()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#<clinit>()": 0.14071950894605836,
        "org.apache.commons.lang3.time$FastDatePrinter#FastDatePrinter(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.14071950894605836,
        "org.apache.commons.lang3.time$FastDatePrinter#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0.2,
        "org.apache.commons.lang3.time$FastDatePrinter#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar)": 0.21320071635561041,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar,java.lang.StringBuffer)": 0.21320071635561041,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getMaxLengthEstimate()": 0,
        "org.apache.commons.lang3.time$FastDatePrinter#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": 0.5345224838248488,
        "org.apache.commons.lang3.time$FastDatePrinter#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#init()": 0.14071950894605836,
        "org.apache.commons.lang3.time$FastDatePrinter#parsePattern()": 0.14071950894605836,
        "org.apache.commons.lang3.time$FastDatePrinter#parseToken(java.lang.String,int[])": 0.14071950894605836,
        "org.apache.commons.lang3.time$FastDatePrinter#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#selectNumberRule(int,int)": 0.1414213562373095,
        "org.apache.commons.lang3.time$FastDatePrinter#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#FastDatePrinter$CharacterLiteral(char)": 0.14285714285714285,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.20851441405707477,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#estimateLength()": 0.14285714285714285,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#FastDatePrinter$PaddedNumberField(int,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#FastDatePrinter$StringLiteral(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#FastDatePrinter$TextField(int,java.lang.String[])": 0.18569533817705186,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.5345224838248488,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#estimateLength()": 0.18569533817705186,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#FastDatePrinter$TimeZoneDisplayKey(java.util.TimeZone,boolean,int,java.util.Locale)": 0.5345224838248488,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#equals(java.lang.Object)": 0.6324555320336759,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#hashCode()": 0.5345224838248488,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#FastDatePrinter$TimeZoneNameRule(java.util.TimeZone,java.util.Locale,int)": 0.5345224838248488,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#estimateLength()": 0.5345224838248488,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#FastDatePrinter$TimeZoneNumberRule(boolean)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#FastDatePrinter$TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": 0.34299717028501764,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,int)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#estimateLength()": 0.34299717028501764,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#FastDatePrinter$TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,int)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#FastDatePrinter$TwoDigitMonthField()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#FastDatePrinter$TwoDigitNumberField(int)": 0.15161960871578067,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,int)": 0.20412414523193154,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.20412414523193154,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#estimateLength()": 0.15161960871578067,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#FastDatePrinter$TwoDigitYearField()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#FastDatePrinter$UnpaddedMonthField()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#FastDatePrinter$UnpaddedNumberField(int)": 0.282842712474619,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.5,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#estimateLength()": 0.282842712474619,
        "org.apache.commons.lang3.time$FormatCache#<clinit>()": 0.14907119849998599,
        "org.apache.commons.lang3.time$FormatCache#FormatCache()": 0.15075567228888181,
        "org.apache.commons.lang3.time$FormatCache#getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FormatCache#getInstance()": 0.0,
        "org.apache.commons.lang3.time$FormatCache#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.15075567228888181,
        "org.apache.commons.lang3.time$FormatCache#getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#FormatCache$MultipartKey(java.lang.Object[])": 0.14907119849998599,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#hashCode()": 0.14907119849998599
    },
    "Lang-9": {
        "org.apache.commons.lang3.time$FastDateFormat#<clinit>()": 0.07761505257063328,
        "org.apache.commons.lang3.time$FastDateFormat#FastDateFormat(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.07761505257063328,
        "org.apache.commons.lang3.time$FastDateFormat#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.10425720702853739,
        "org.apache.commons.lang3.time$FastDateFormat#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getMaxLengthEstimate()": 0,
        "org.apache.commons.lang3.time$FastDateFormat#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String)": 0.16666666666666666,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String,java.text.ParsePosition)": 0,
        "org.apache.commons.lang3.time$FastDateFormat#parseObject(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$1#createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.07761505257063328,
        "org.apache.commons.lang3.time$FastDateParser#<clinit>()": 0.13545709229571928,
        "org.apache.commons.lang3.time$FastDateParser#FastDateParser(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.13671718540493266,
        "org.apache.commons.lang3.time$FastDateParser#adjustYear(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#copy(org.apache.commons.lang3.time.FastDateParser$KeyValue[],int,java.lang.String[])": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#count(java.lang.String[])": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#createKeyValues(java.lang.String[],java.lang.String[])": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#escapeRegex(java.lang.StringBuilder,java.lang.String,boolean)": 0.13801311186847084,
        "org.apache.commons.lang3.time$FastDateParser#getDisplayNames(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getFieldWidth()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getParsePattern()": 0.7071067811865475,
        "org.apache.commons.lang3.time$FastDateParser#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getStrategy(java.lang.String)": 0.13671718540493266,
        "org.apache.commons.lang3.time$FastDateParser#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#init()": 0.13671718540493266,
        "org.apache.commons.lang3.time$FastDateParser#isNextNumber()": 0.13671718540493266,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String)": 0.23570226039551587,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String,java.text.ParsePosition)": 0.23249527748763857,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String)": 0,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#toArray(java.util.Map)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$1#compare(org.apache.commons.lang3.time.FastDateParser$KeyValue,org.apache.commons.lang3.time.FastDateParser$KeyValue)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$2#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$3#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$4#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$5#modify(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#FastDateParser$CopyQuotedStrategy(java.lang.String)": 0.13801311186847084,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.13801311186847084,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#isNumber()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0,
        "org.apache.commons.lang3.time$FastDateParser$KeyValue#FastDateParser$KeyValue(java.lang.String,int)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#FastDateParser$NumberStrategy(int)": 0.13545709229571928,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.13671718540493266,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#isNumber()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#modify(int)": 0.23904572186687872,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.23904572186687872,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#FastDateParser$TextStrategy(int)": 0.13545709229571928,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#isNumber()": 0,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#FastDateParser$TimeZoneStrategy(java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#isNumber()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#<clinit>()": 0.07216878364870323,
        "org.apache.commons.lang3.time$FastDatePrinter#FastDatePrinter(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.07216878364870323,
        "org.apache.commons.lang3.time$FastDatePrinter#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long,java.lang.StringBuffer)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter#getLocale()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getMaxLengthEstimate()": 0,
        "org.apache.commons.lang3.time$FastDatePrinter#getPattern()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZone()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#init()": 0.07216878364870323,
        "org.apache.commons.lang3.time$FastDatePrinter#parsePattern()": 0.07216878364870323,
        "org.apache.commons.lang3.time$FastDatePrinter#parseToken(java.lang.String,int[])": 0.07216878364870323,
        "org.apache.commons.lang3.time$FastDatePrinter#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#selectNumberRule(int,int)": 0.07254762501100116,
        "org.apache.commons.lang3.time$FastDatePrinter#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#FastDatePrinter$CharacterLiteral(char)": 0.07332355751067665,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#estimateLength()": 0.07332355751067665,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#FastDatePrinter$PaddedNumberField(int,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#FastDatePrinter$StringLiteral(java.lang.String)": 0.1091089451179962,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#estimateLength()": 0.1091089451179962,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#FastDatePrinter$TextField(int,java.lang.String[])": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#FastDatePrinter$TimeZoneDisplayKey(java.util.TimeZone,boolean,int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#FastDatePrinter$TimeZoneNameRule(java.util.TimeZone,java.util.Locale,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#FastDatePrinter$TimeZoneNumberRule(boolean)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#FastDatePrinter$TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,int)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#FastDatePrinter$TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,int)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#FastDatePrinter$TwoDigitMonthField()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#FastDatePrinter$TwoDigitNumberField(int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#FastDatePrinter$TwoDigitYearField()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#<clinit>()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#FastDatePrinter$UnpaddedMonthField()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#estimateLength()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#FastDatePrinter$UnpaddedNumberField(int)": 0.1543033499620919,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#estimateLength()": 0.1543033499620919,
        "org.apache.commons.lang3.time$FormatCache#<clinit>()": 0.07669649888473704,
        "org.apache.commons.lang3.time$FormatCache#FormatCache()": 0.07761505257063328,
        "org.apache.commons.lang3.time$FormatCache#getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FormatCache#getInstance()": 0.0,
        "org.apache.commons.lang3.time$FormatCache#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.07761505257063328,
        "org.apache.commons.lang3.time$FormatCache#getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#FormatCache$MultipartKey(java.lang.Object[])": 0.07669649888473704,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#hashCode()": 0.07669649888473704
    },
    "Math-1": {
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.2773500981126146,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.16222142113076254,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.13934660285832354,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.1655211777204736,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.6324555320336759,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()": 0.04159451654038515,
        "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)": 0.04159451654038515,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)": 0.3779644730092272,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getSourceString()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#<clinit>()": 0.07715167498104596,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(double)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)": 0.2672612419124244,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)": 0.5,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)": 0.07715167498104596,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)": 0.07715167498104596,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)": 0.07715167498104596,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#abs()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#add(int)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#add(long)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#bigDecimalValue()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#bigDecimalValue(int)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#bigDecimalValue(int,int)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#compareTo(org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#divide(int)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#divide(long)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#doubleValue()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#floatValue()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#getDenominator()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#getDenominatorAsInt()": 0.18257418583505536,
        "org.apache.commons.math3.fraction$BigFraction#getDenominatorAsLong()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#getField()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#getNumerator()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#getNumeratorAsInt()": 0.17677669529663687,
        "org.apache.commons.math3.fraction$BigFraction#getNumeratorAsLong()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#hashCode()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#intValue()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#longValue()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#multiply(int)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#multiply(long)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#negate()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#percentageValue()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#pow(double)": 0,
        "org.apache.commons.math3.fraction$BigFraction#pow(int)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#pow(long)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#reciprocal()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#reduce()": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#subtract(int)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#subtract(long)": 0,
        "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#toString()": 0,
        "org.apache.commons.math3.fraction$Fraction#<clinit>()": 0.04856429311786321,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)": 0.0944911182523068,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)": 0.5,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)": 0.04856429311786321,
        "org.apache.commons.math3.fraction$Fraction#abs()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#add(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#compareTo(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#divide(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#doubleValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#floatValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getDenominator()": 0.1336306209562122,
        "org.apache.commons.math3.fraction$Fraction#getField()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getNumerator()": 0.13130643285972254,
        "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#hashCode()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#intValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#longValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#multiply(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#negate()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#percentageValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#reciprocal()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#subtract(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#toString()": 0.0,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)": 0.0,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)": 0.6324555320336759,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": 0.04778184825674966,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)": 0.04778184825674966,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#stirlingS2(int,int)": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.02323069967623409,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.030042088406305484,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.03869116162670684,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.022680460581325723,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.05012547071170855,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.07580980435789034,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0
    },
    "Math-10": {
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()": 0.06523280730534423,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.06523280730534423,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)": 0.09245003270420485,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)": 0.4472135954999579,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)": 0.5773502691896258,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.08032193289024989,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])": 0.06523280730534423,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.06523280730534423,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.06523280730534423,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])": 0.06523280730534423,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.06523280730534423,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)": 0.1,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])": 0.10783277320343841,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)": 0.2182178902359924,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)": 0.06523280730534423,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])": 0.06565321642986127,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()": 0.06523280730534423,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)": 0.10259783520851541,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)": 0.1690308509457033,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)": 0.17677669529663687,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)": 0.06622661785325219,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)": 0.06651901052377393,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)": 0.06696495301824251,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.06622661785325219,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.5773502691896258,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getAllDerivatives()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getValue()": 0.08032193289024989,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getOne()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getRuntimeClass()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getZero()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#DerivativeStructure$DataTransferObject(int,int,double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.017592660465641983,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.17407765595569785,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.09534625892455924,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0419960525565808,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.03544406025041679,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.07235746052924216,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.023408229439226113,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0
    },
    "Math-11": {
        "org.apache.commons.math3.distribution$AbstractMultivariateRealDistribution#AbstractMultivariateRealDistribution(org.apache.commons.math3.random.RandomGenerator,int)": 0.31622776601683794,
        "org.apache.commons.math3.distribution$AbstractMultivariateRealDistribution#getDimension()": 0.3333333333333333,
        "org.apache.commons.math3.distribution$AbstractMultivariateRealDistribution#reseedRandomGenerator(long)": 0.0,
        "org.apache.commons.math3.distribution$AbstractMultivariateRealDistribution#sample(int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution(org.apache.commons.math3.random.RandomGenerator)": 0.039314056698537575,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double)": 0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": 0.0,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#MultivariateNormalDistribution(double[],double[][])": 0.31622776601683794,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#MultivariateNormalDistribution(org.apache.commons.math3.random.RandomGenerator,double[],double[][])": 0.31622776601683794,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#density(double[])": 0.5773502691896258,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#getCovariances()": 0.0,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#getExponentTerm(double[])": 0.5773502691896258,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#getMeans()": 0.5,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#getStandardDeviations()": 0,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#sample()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()": 0.09759000729485333,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution()": 0,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(double,double)": 0.1386750490563073,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(double,double,double)": 0.1386750490563073,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(org.apache.commons.math3.random.RandomGenerator,double,double,double)": 0.09759000729485333,
        "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#density(double)": 0.1796053020267749,
        "org.apache.commons.math3.distribution$NormalDistribution#getMean()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportLowerBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportUpperBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#probability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#sample()": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotANumberException#NotANumberException()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 0.0363216356146074,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.04218245406095978,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.039344473768231684,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.07088812050083358,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.08111071056538127,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.30151134457776363,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.07124704998790965,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.07088812050083358,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.07124704998790965,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.045083481733371615,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.045834924851410566,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.04499212706658475,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.05322462954123495,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.05399492471560388,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.04052204492365539,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.05383819020581655,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.04356068418690321,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.040555355282690636,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.31622776601683794,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.4472135954999579,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.046274481338274755,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.04499212706658475,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.07106690545187015,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.03949762527666821,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.047619047619047616,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.08770580193070293,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.08804509063256238,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.06509445549041194,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.07432941462471664,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.07018624063435965,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.07018624063435965,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.07088812050083358,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[],double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.12126781251816648,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#cdiv(double,double,double,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectors(double[][])": 0.1203858530857692,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getD()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getDeterminant()": 0.31622776601683794,
        "org.apache.commons.math3.linear$EigenDecomposition#getEigenvector(int)": 0.2672612419124244,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalue(int)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalues()": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalue(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalues()": 0.22941573387056174,
        "org.apache.commons.math3.linear$EigenDecomposition#getSolver()": 0.2672612419124244,
        "org.apache.commons.math3.linear$EigenDecomposition#getSquareRoot()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getV()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getVT()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#hasComplexEigenvalues()": 0.2672612419124244,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToSchur(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)": 0.12403473458920847,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#EigenDecomposition$Solver(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])": 0.2672612419124244,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#getInverse()": 0.2886751345948129,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#isNonSingular()": 0.2672612419124244,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 0.0377694787300249,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.038984058779272523,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.04,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.053916386601719206,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.038984058779272523,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.05116445100966508,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 0.11952286093343936,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)": 0.11785113019775793,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#NonPositiveDefiniteMatrixException(double,int,double)": 0.0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getColumn()": 0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getRow()": 0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getThreshold()": 0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.0354886720493838,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0377694787300249,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.036107907233705945,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 0.036107907233705945,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": 0.036297700432031385,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 0.0377694787300249,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 0.036107907233705945,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.03479445003196105,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.03919309008348103,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 0.03919309008348103,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 0.03949762527666821,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 0.03919309008348103,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$SingularMatrixException#SingularMatrixException()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#TriDiagonalTransformer(org.apache.commons.math3.linear.RealMatrix)": 0.11624763874381928,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getHouseholderVectorsRef()": 0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getMainDiagonalRef()": 0.12309149097933272,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQ()": 0.11952286093343936,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQT()": 0.11867816581938533,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getSecondaryDiagonalRef()": 0.12309149097933272,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getT()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#transform()": 0.11704114719613057,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)": 0.03834824944236852,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])": 0.03117398431942748,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int[])": 0.03117398431942748,
        "org.apache.commons.math3.random$AbstractWell#setSeed(long)": 0.031591201180328175,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": 0.0298142396999972,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": 0.0298142396999972,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()": 0.03143473067309657,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#initRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 0.03143473067309657,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#getDelegate()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$Well19937c#Well19937c()": 0.03834824944236852,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int)": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int[])": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c(long)": 0.0,
        "org.apache.commons.math3.random$Well19937c#next(int)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.03724194613619294,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": 0.03027524209883363,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.017639126052343954,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.023106337435539137,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0328443092721431,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.03624997167972069,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.031830350703961514,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.030485538042484616,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.035623524993954825,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.03980937143290165,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.07235746052924216,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.02347262634065101,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.032091527190284,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.032157832069216574,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.03070027799227584,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.029285370632871136,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.032091527190284,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.032091527190284,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.032157832069216574,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.032157832069216574,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.03070027799227584,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.1336306209562122,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.10976425998969035,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.030934411244487297,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.027918152281484514,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.04512936824065242,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.03396178054056622,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-13": {
        "org.apache.commons.math3.analysis$FunctionUtils#FunctionUtils()": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#combine(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#fix1stArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableMultivariateFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)": 0.105999788000636,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateFunction)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)": 0.105999788000636,
        "org.apache.commons.math3.analysis$FunctionUtils#toUnivariateDifferential(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$15#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$15#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$16#gradient()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$16#partialDerivative(int)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$16#value(double[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$16$2#value(double[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$17#value(double[])": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$17#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$18#jacobian()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$18#value(double[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$18$1#value(double[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$19#value(double[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$19#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$5#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$5#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$8#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$8#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getAllDerivatives()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getValue()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getOne()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getRuntimeClass()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getZero()": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#DerivativeStructure$DataTransferObject(int,int,double[])": 0.0,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])": 0.11396057645963795,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#degree()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)": 0.12909944487358055,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#getCoefficients()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#hashCode()": 0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()": 0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString(double)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)": 0.13608276348795434,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#PolynomialFunction$Parametric()": 0.2182178902359924,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 0.036661778755338326,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.04256282653793743,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.061662641597820735,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix()": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])": 0.07432941462471664,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#copy()": 0.07432941462471664,
        "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()": 0.07432941462471664,
        "org.apache.commons.math3.linear$DiagonalMatrix#getData()": 0.105999788000636,
        "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)": 0.07432941462471664,
        "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()": 0.07432941462471664,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#setSubMatrix(double[][],int,int)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 0.03809696588797296,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.03925343359894298,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.04032389192727559,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.039283710065919304,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 0.079555728417573,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)": 0.07905694150420949,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.03580574370197165,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.03809696588797296,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.03644202585395018,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 0.03644202585395018,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": 0.03663716527236558,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 0.03809696588797296,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 0.03644202585395018,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.optimization$InitialGuess#InitialGuess(double[])": 0.07647191129018725,
        "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()": 0.07669649888473704,
        "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])": 0.0,
        "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)": 0.0,
        "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()": 0.0,
        "org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()": 0.0,
        "org.apache.commons.math3.optimization$PointVectorValuePair#getValue()": 0.0,
        "org.apache.commons.math3.optimization$PointVectorValuePair#getValueRef()": 0.0,
        "org.apache.commons.math3.optimization$PointVectorValuePair#writeReplace()": 0.0,
        "org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#PointVectorValuePair$DataTransferObject(double[],double[])": 0.0,
        "org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#readResolve()": 0.0,
        "org.apache.commons.math3.optimization$Target#Target(double[])": 0.105999788000636,
        "org.apache.commons.math3.optimization$Target#getTarget()": 0.105999788000636,
        "org.apache.commons.math3.optimization$Weight#Weight(double[])": 0.105999788000636,
        "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)": 0,
        "org.apache.commons.math3.optimization$Weight#getWeight()": 0.105999788000636,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 0.10425720702853739,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()": 0.105999788000636,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getEvaluations()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getMaxEvaluations()": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTargetRef()": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()": 0.105999788000636,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeightRef()": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])": 0.105999788000636,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])": 0.105999788000636,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()": 0.105999788000636,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)": 0.19245008972987526,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer)": 0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double)": 0.0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double,double)": 0.2,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint)": 0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#clearObservations()": 0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])": 0.20412414523193154,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])": 0.2182178902359924,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#getObservations()": 0.0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#jacobian()": 0.0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])": 0.0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction$1#value(double[])": 0.0,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(int,org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)": 0,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)": 0.4082482904638631,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()": 0,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])": 0.4082482904638631,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])": 0,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)": 0.19611613513818404,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()": 0.0,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()": 0.2,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()": 0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 0.10425720702853739,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getChiSquare()": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()": 0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)": 0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getJacobianEvaluations()": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getRMS()": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])": 0.20412414523193154,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])": 0.105999788000636,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()": 0.105999788000636,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)": 0.105999788000636,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()": 0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()": 0,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()": 0.15249857033260467,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)": 0.0,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)": 0.1270001270001905,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)": 0.0,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 0.0,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])": 0.0,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])": 0.0,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()": 0.0,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])": 0.0,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.037555788309433985,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": 0.03047138176680026,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.017677669529663688,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.023124864503144014,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.03344500310453256,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.040723148118768406,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.03895446935658099,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 0.034001020045902296,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#resetCount()": 0.03485780871878749,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": 0.03566881875032108,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.03103854276221004,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#getFirst()": 0.0,
        "org.apache.commons.math3.util$Pair#getKey()": 0.0,
        "org.apache.commons.math3.util$Pair#getSecond()": 0.0,
        "org.apache.commons.math3.util$Pair#getValue()": 0.0,
        "org.apache.commons.math3.util$Pair#hashCode()": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.02793993781135563,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-14": {
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])": 0.11470786693528087,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#degree()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)": 0.13018891098082389,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#getCoefficients()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#hashCode()": 0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()": 0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString(double)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)": 0.13736056394868904,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#PolynomialFunction$Parametric()": 0.22360679774997896,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)": 0.18257418583505536,
        "org.apache.commons.math3.fitting$CurveFitter#addObservedPoint(double,double)": 0.0,
        "org.apache.commons.math3.fitting$CurveFitter#addObservedPoint(double,double,double)": 0.1889822365046136,
        "org.apache.commons.math3.fitting$CurveFitter#addObservedPoint(org.apache.commons.math3.fitting.WeightedObservedPoint)": 0,
        "org.apache.commons.math3.fitting$CurveFitter#clearObservations()": 0.0,
        "org.apache.commons.math3.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])": 0.19245008972987526,
        "org.apache.commons.math3.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])": 0.20412414523193154,
        "org.apache.commons.math3.fitting$CurveFitter#getObservations()": 0.0,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction#CurveFitter$TheoreticalValuesFunction(org.apache.commons.math3.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)": 0.19245008972987526,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction#getModelFunction()": 0.19245008972987526,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction#getModelFunctionJacobian()": 0.19245008972987526,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction$1#value(double[])": 0.0,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction$2#value(double[])": 0.0,
        "org.apache.commons.math3.fitting$PolynomialFitter#PolynomialFitter(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)": 0.3333333333333333,
        "org.apache.commons.math3.fitting$PolynomialFitter#fit(double[])": 0.3333333333333333,
        "org.apache.commons.math3.fitting$PolynomialFitter#fit(int,double[])": 0,
        "org.apache.commons.math3.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)": 0.18569533817705186,
        "org.apache.commons.math3.fitting$WeightedObservedPoint#getWeight()": 0.19245008972987526,
        "org.apache.commons.math3.fitting$WeightedObservedPoint#getX()": 0.0,
        "org.apache.commons.math3.fitting$WeightedObservedPoint#getY()": 0.1889822365046136,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 0.03668644191235265,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.03955938860646178,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.09090909090909091,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.0854357657716761,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 0.038124642583151166,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 0.05555555555555555,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.03582871819500093,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.038124642583151166,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.03646624787447364,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 0.03646624787447364,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": 0.036661778755338326,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 0.038124642583151166,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 0.03646624787447364,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#BaseMultivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.06950480468569159,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#checkParameters()": 0.0,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getLowerBound()": 0.0,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getStartPoint()": 0.0,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getUpperBound()": 0.0,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#BaseOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.06711560552140243,
        "org.apache.commons.math3.optim$BaseOptimizer#getConvergenceChecker()": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#getEvaluations()": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#getIterations()": 0,
        "org.apache.commons.math3.optim$BaseOptimizer#getMaxEvaluations()": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#getMaxIterations()": 0,
        "org.apache.commons.math3.optim$BaseOptimizer#incrementEvaluationCount()": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#incrementIterationCount()": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxEvalCallback#BaseOptimizer$MaxEvalCallback()": 0.06711560552140243,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxEvalCallback#trigger(int)": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxIterCallback#BaseOptimizer$MaxIterCallback()": 0.06711560552140243,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxIterCallback#trigger(int)": 0,
        "org.apache.commons.math3.optim$InitialGuess#InitialGuess(double[])": 0.0,
        "org.apache.commons.math3.optim$InitialGuess#getInitialGuess()": 0.0,
        "org.apache.commons.math3.optim$MaxEval#MaxEval(int)": 0.07235746052924216,
        "org.apache.commons.math3.optim$MaxEval#getMaxEval()": 0.0,
        "org.apache.commons.math3.optim$MaxEval#unlimited()": 0,
        "org.apache.commons.math3.optim$MaxIter#MaxIter(int)": 0.0,
        "org.apache.commons.math3.optim$MaxIter#getMaxIter()": 0.0,
        "org.apache.commons.math3.optim$MaxIter#unlimited()": 0,
        "org.apache.commons.math3.optim$PointVectorValuePair#PointVectorValuePair(double[],double[])": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#getPoint()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#getPointRef()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#getValue()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#getValueRef()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#writeReplace()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair$DataTransferObject#PointVectorValuePair$DataTransferObject(double[],double[])": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair$DataTransferObject#readResolve()": 0.0,
        "org.apache.commons.math3.optim$SimpleBounds#SimpleBounds(double[],double[])": 0.0,
        "org.apache.commons.math3.optim$SimpleBounds#getLower()": 0.0,
        "org.apache.commons.math3.optim$SimpleBounds#getUpper()": 0.0,
        "org.apache.commons.math3.optim$SimpleBounds#unbounded(int)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#JacobianMultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.10206207261596577,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#computeJacobian(double[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunction#ModelFunction(org.apache.commons.math3.analysis.MultivariateVectorFunction)": 0.10425720702853739,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunction#getModelFunction()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunctionJacobian#ModelFunctionJacobian(org.apache.commons.math3.analysis.MultivariateMatrixFunction)": 0.10482848367219183,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunctionJacobian#getModelFunctionJacobian()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#MultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.10206207261596577,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#checkParameters()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#computeObjectiveValue(double[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getTarget()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getTargetSize()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getWeight()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$Target#Target(double[])": 0.10425720702853739,
        "org.apache.commons.math3.optim.nonlinear.vector$Target#getTarget()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#Weight(double[])": 0.10425720702853739,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)": 0,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#getWeight()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.10206207261596577,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeCost(double[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeResiduals(double[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeSigma(double[],double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getChiSquare()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getRMS()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getWeightSquareRoot()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#setCost(double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,org.apache.commons.math3.optim.ConvergenceChecker)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#GaussNewtonOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#doOptimize()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()": 0.15249857033260467,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)": 0.1270001270001905,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#doOptimize()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#qTy(double[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.037582301400141446,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": 0.030485538042484616,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.017680432313071925,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.03569153051241249,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.0,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 0.034020690871988585,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#resetCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.03103854276221004,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#getFirst()": 0.0,
        "org.apache.commons.math3.util$Pair#getKey()": 0.0,
        "org.apache.commons.math3.util$Pair#getSecond()": 0.0,
        "org.apache.commons.math3.util$Pair#getValue()": 0.0,
        "org.apache.commons.math3.util$Pair#hashCode()": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.02765006318046655,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-15": {
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte,byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,double)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,int)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,java.lang.String)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,long)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#abs()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#align(int)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#ceil()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#classify()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#complement(int)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#dfp2sci()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#dfp2string()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#divide(int)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#floor()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#getField()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#getOne()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#getRadixDigits()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#getTwo()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#getZero()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#hashCode()": 0,
        "org.apache.commons.math3.dfp$Dfp#intValue()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#isInfinite()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#isNaN()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#isZero()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#log10()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#log10K()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#multiply(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#negate()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#negativeOrNull()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance()": 0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte)": 0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte,byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(double)": 0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(long)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#positiveOrNull()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#power10(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#power10K(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#reciprocal()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#rint()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#round(int)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#shiftLeft()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#shiftRight()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#sqrt()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#strictlyNegative()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#strictlyPositive()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#toDouble()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#toSplitDouble()": 0,
        "org.apache.commons.math3.dfp$Dfp#toString()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$Dfp$1#<clinit>()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int,boolean)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#clearIEEEFlags()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#getE()": 0,
        "org.apache.commons.math3.dfp$DfpField#getESplit()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getIEEEFlags()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn10()": 0,
        "org.apache.commons.math3.dfp$DfpField#getLn2()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn2Split()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn5()": 0,
        "org.apache.commons.math3.dfp$DfpField#getLn5Split()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getOne()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getPi()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getPiSplit()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getRadixDigits()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#getRoundingMode()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#getRuntimeClass()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Reciprocal()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Split()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr3()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr3Reciprocal()": 0,
        "org.apache.commons.math3.dfp$DfpField#getTwo()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getZero()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#newDfp()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte)": 0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte,byte)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(double)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(int)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(java.lang.String)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(long)": 0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(org.apache.commons.math3.dfp.Dfp)": 0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlags(int)": 0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField#setRoundingMode(org.apache.commons.math3.dfp.DfpField$RoundingMode)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#split(java.lang.String)": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()": 0.1091089451179962,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#DfpField$RoundingMode(java.lang.String,int)": 0.1091089451179962,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": 0.03071475584169756,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": 0.03071475584169756,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.08703882797784893,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": 0.14586499149789456,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 0.08703882797784893,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 0.10783277320343841,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 0.10846522890932808,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.01831858263618279,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.03263376665824188,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.031219527052723135,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.04389512813061471,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.04003203845127178,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.03291540093383166,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.03298695623770211,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.031450273186121945,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.03002854067691021,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.03291540093383166,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.03291540093383166,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.03298695623770211,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.03298695623770211,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.031450273186121945
    },
    "Math-16": {
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte,byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,double)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,int)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,java.lang.String)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,long)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#abs()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#align(int)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#ceil()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#classify()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#complement(int)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#dfp2sci()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#dfp2string()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#divide(int)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#floor()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#getField()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#getOne()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#getRadixDigits()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#getTwo()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#getZero()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#hashCode()": 0,
        "org.apache.commons.math3.dfp$Dfp#intValue()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#isInfinite()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#isNaN()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#isZero()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#log10()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#log10K()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#multiply(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#negate()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#negativeOrNull()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance()": 0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte)": 0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte,byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(double)": 0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(long)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#positiveOrNull()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#power10(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#power10K(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#reciprocal()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#rint()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#round(int)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#shiftLeft()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#shiftRight()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#sqrt()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#strictlyNegative()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#strictlyPositive()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#toDouble()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#toSplitDouble()": 0,
        "org.apache.commons.math3.dfp$Dfp#toString()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$Dfp$1#<clinit>()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int,boolean)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#clearIEEEFlags()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#getE()": 0,
        "org.apache.commons.math3.dfp$DfpField#getESplit()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getIEEEFlags()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn10()": 0,
        "org.apache.commons.math3.dfp$DfpField#getLn2()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn2Split()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn5()": 0,
        "org.apache.commons.math3.dfp$DfpField#getLn5Split()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getOne()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getPi()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getPiSplit()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getRadixDigits()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#getRoundingMode()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#getRuntimeClass()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Reciprocal()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Split()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr3()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr3Reciprocal()": 0,
        "org.apache.commons.math3.dfp$DfpField#getTwo()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getZero()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#newDfp()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte)": 0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte,byte)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(double)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(int)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(java.lang.String)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(long)": 0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(org.apache.commons.math3.dfp.Dfp)": 0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlags(int)": 0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField#setRoundingMode(org.apache.commons.math3.dfp.DfpField$RoundingMode)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#split(java.lang.String)": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()": 0.15523010514126656,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#DfpField$RoundingMode(java.lang.String,int)": 0.15523010514126656,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": 0.04345772804156318,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": 0.04345772804156318,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.12356041264304309,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": 0.20851441405707477,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 0.12356041264304309,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 0.15339299776947407,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 0.1543033499620919,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.02591508580466721,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.0349002406379888,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.2581988897471611,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.05288858853479451,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.04617570965396102,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0564782494724905,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.062136976600120006,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.08944271909999159,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.04657464328326223,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.04667600280093366,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.04250511420422255,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.04657464328326223,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.04657464328326223,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.04667600280093366,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.04667600280093366,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.0
    },
    "Math-17": {
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte,byte)": 0.18257418583505536,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,double)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,int)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,java.lang.String)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,long)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#abs()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#align(int)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#ceil()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#classify()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#complement(int)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#dfp2sci()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#dfp2string()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#divide(int)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#floor()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#getField()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#getOne()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#getRadixDigits()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#getTwo()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#getZero()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#hashCode()": 0,
        "org.apache.commons.math3.dfp$Dfp#intValue()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#isInfinite()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#isNaN()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#isZero()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#log10()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#log10K()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#multiply(int)": 0.19245008972987526,
        "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)": 0.19245008972987526,
        "org.apache.commons.math3.dfp$Dfp#negate()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#negativeOrNull()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance()": 0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte)": 0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte,byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(double)": 0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(long)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#positiveOrNull()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#power10(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#power10K(int)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#reciprocal()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#rint()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#round(int)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#shiftLeft()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#shiftRight()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#sqrt()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#strictlyNegative()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#strictlyPositive()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#toDouble()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#toSplitDouble()": 0,
        "org.apache.commons.math3.dfp$Dfp#toString()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$Dfp$1#<clinit>()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int,boolean)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#clearIEEEFlags()": 0.1796053020267749,
        "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#getE()": 0,
        "org.apache.commons.math3.dfp$DfpField#getESplit()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getIEEEFlags()": 0.2182178902359924,
        "org.apache.commons.math3.dfp$DfpField#getLn10()": 0,
        "org.apache.commons.math3.dfp$DfpField#getLn2()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn2Split()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn5()": 0,
        "org.apache.commons.math3.dfp$DfpField#getLn5Split()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getOne()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getPi()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getPiSplit()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getRadixDigits()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#getRoundingMode()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#getRuntimeClass()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Reciprocal()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Split()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr3()": 0,
        "org.apache.commons.math3.dfp$DfpField#getSqr3Reciprocal()": 0,
        "org.apache.commons.math3.dfp$DfpField#getTwo()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getZero()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#newDfp()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte)": 0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte,byte)": 0.18257418583505536,
        "org.apache.commons.math3.dfp$DfpField#newDfp(double)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(int)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(java.lang.String)": 0.18569533817705186,
        "org.apache.commons.math3.dfp$DfpField#newDfp(long)": 0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(org.apache.commons.math3.dfp.Dfp)": 0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlags(int)": 0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField#setRoundingMode(org.apache.commons.math3.dfp.DfpField$RoundingMode)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#split(java.lang.String)": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()": 0.1111111111111111,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#DfpField$RoundingMode(java.lang.String,int)": 0.1111111111111111
    },
    "Math-18": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 0.043852900965351466,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.0553001263609331,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.048621663832631515,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.23570226039551587,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.1643989873053573,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.23570226039551587,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.2581988897471611,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.14285714285714285,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.08247860988423225,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.09667364890456635,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.25,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.22941573387056174,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.20412414523193154,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.10783277320343841,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.07808688094430304,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.07761505257063328,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.2581988897471611,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.2581988897471611,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.2581988897471611,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.07808688094430304,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.060302268915552716,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.09578262852211514,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.05933908290969266,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.06008417681261097,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.07018624063435965,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.0716114874039433,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.0524863881081478,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.07142857142857142,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.0601929265428846,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.052558833122763673,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.060302268915552716,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.06008417681261097,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0778498944161523,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.0490880693673816,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.06984302957695782,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.05773502691896257,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.06362847629757777,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.07669649888473704,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.07669649888473704,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.07761505257063328,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[],double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.15617376188860607,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#cdiv(double,double,double,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectors(double[][])": 0.15249857033260467,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getD()": 0.22941573387056174,
        "org.apache.commons.math3.linear$EigenDecomposition#getDeterminant()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getEigenvector(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalue(int)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalues()": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalue(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getSolver()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getV()": 0.20851441405707477,
        "org.apache.commons.math3.linear$EigenDecomposition#getVT()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#hasComplexEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#isSymmetric(org.apache.commons.math3.linear.RealMatrix,boolean)": 0.15617376188860607,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToSchur(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)": 0.16012815380508713,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#EigenDecomposition$Solver(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#getInverse()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#isNonSingular()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 0.04612656040144425,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.17677669529663687,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.04822428221704121,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.050251890762960605,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.086710996952412,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.04828045495852676,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.09759000729485333,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 0.2581988897471611,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 0.21320071635561041,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.07312724241271307,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 0.09325048082403138,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.042409446483998546,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.04612656040144425,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.043478260869565216,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 0.043478260869565216,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": 0.04381079543383235,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 0.04612656040144425,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 0.043478260869565216,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.04079085082240021,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.048507125007266595,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 0.048507125007266595,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 0.0490880693673816,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 0.048507125007266595,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#TriDiagonalTransformer(org.apache.commons.math3.linear.RealMatrix)": 0.14433756729740646,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getHouseholderVectorsRef()": 0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getMainDiagonalRef()": 0.15811388300841897,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQ()": 0.15075567228888181,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQT()": 0.14907119849998599,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getSecondaryDiagonalRef()": 0.15811388300841897,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getT()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#transform()": 0.14586499149789456,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#<clinit>()": 0.10259783520851541,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#AbstractConvergenceChecker()": 0.19611613513818404,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)": 0.0,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#getAbsoluteThreshold()": 0.1111111111111111,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#getRelativeThreshold()": 0.11043152607484653,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 0.0873704056661038,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.0873704056661038,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double)": 0.09901475429766744,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double,boolean)": 0.09901475429766744,
        "org.apache.commons.math3.optimization$PointValuePair#getPoint()": 0.11470786693528087,
        "org.apache.commons.math3.optimization$PointValuePair#getPointRef()": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair#writeReplace()": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#PointValuePair$DataTransferObject(double[],double)": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#readResolve()": 0.0,
        "org.apache.commons.math3.optimization$SimpleValueChecker#SimpleValueChecker()": 0.20851441405707477,
        "org.apache.commons.math3.optimization$SimpleValueChecker#SimpleValueChecker(double,double)": 0.0,
        "org.apache.commons.math3.optimization$SimpleValueChecker#converged(int,org.apache.commons.math3.optimization.PointValuePair,org.apache.commons.math3.optimization.PointValuePair)": 0.1386750490563073,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer()": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 0.1091089451179962,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])": 0.11785113019775793,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getConvergenceChecker()": 0.13130643285972254,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getEvaluations()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getGoalType()": 0.11785113019775793,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getMaxEvaluations()": 0.19245008972987526,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getStartPoint()": 0.1125087900926024,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 0.12309149097933272,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 0.1125087900926024,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer()": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 0.15811388300841897,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#getLowerBound()": 0.1690308509457033,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#getUpperBound()": 0.1690308509457033,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 1.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[],double[],double[])": 0.15811388300841897,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#<clinit>()": 0.20851441405707477,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer()": 0.5773502691896258,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int)": 0.5773502691896258,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[])": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean)": 0.20851441405707477,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean,org.apache.commons.math3.optimization.ConvergenceChecker)": 0.20851441405707477,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#checkParameters()": 0.22360679774997896,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#copyColumn(org.apache.commons.math3.linear.RealMatrix,int,org.apache.commons.math3.linear.RealMatrix,int)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#diag(org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#divide(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#doOptimize()": 0.22360679774997896,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#eye(int,int)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsDHistory()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsFitnessHistory()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsMeanHistory()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsSigmaHistory()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#initializeCMA(double[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#inverse(int[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#log(org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#max(double[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#max(org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#min(double[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#min(org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#ones(int,int)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#push(double[],double)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#randn(int)": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#randn1(int,int)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#repmat(org.apache.commons.math3.linear.RealMatrix,int,int)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#reverse(int[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sequence(double,double,double)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sortedIndices(double[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sqrt(org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#square(org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sumRows(org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#triu(org.apache.commons.math3.linear.RealMatrix,int)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateBD(double)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateCovariance(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,int[],org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#zeros(int,int)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#CMAESOptimizer$DoubleIndex(double,int)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#compareTo(org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#hashCode()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#CMAESOptimizer$FitnessFunction(org.apache.commons.math3.optimization.direct.CMAESOptimizer)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#decode(double[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#encode(double[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#isFeasible(double[])": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#penalty(double[],double[])": 0.5773502691896258,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#repair(double[])": 0.5773502691896258,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#repairAndDecode(double[])": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#setValueRange(double)": 0.2672612419124244,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#value(double[])": 0.2672612419124244,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": 0.03102360242788488,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": 0.03102360242788488,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.04751143381455799,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 0.11785113019775793,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.08804509063256238,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": 0.2,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": 0.1111111111111111,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 0.08804509063256238,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 0.1091089451179962,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 0.10976425998969035,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.045175395145262566,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": 0.034239347869895034,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.018493168036382727,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.02497659540757031,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.03511474936103118,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.06401843996644799,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.05616559563017304,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.03594425773447947,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.03167031776097682,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.040824829046386304,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.045407660918649985,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.03916302249939787,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.052999894000318,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.052999894000318,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.05488212999484517,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.05439282932204212,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.02486055050818142,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.0607456739230787,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0607456739230787,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0607456739230787,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0607456739230787,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.03191128231363014,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.03045724519365863,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.03191128231363014,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.041415768328129106,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.03955938860646178,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 0.03952847075210474,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.17149858514250882,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 0.041344911529736156,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#resetCount()": 0.04068942293855797,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": 0.041959067914834454,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.21320071635561041,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.03544406025041679,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.05923488777590923,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#getFirst()": 0.0,
        "org.apache.commons.math3.util$Pair#getKey()": 0.07669649888473704,
        "org.apache.commons.math3.util$Pair#getSecond()": 0.0,
        "org.apache.commons.math3.util$Pair#getValue()": 0.08838834764831843,
        "org.apache.commons.math3.util$Pair#hashCode()": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.03027524209883363,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.14285714285714285,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.04962916669854651,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.03649051825844134,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-2": {
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution()": 0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution(org.apache.commons.math3.random.RandomGenerator)": 0.05997601439040672,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)": 0.10846522890932808,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)": 0.0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()": 0.13608276348795434,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)": 0.11952286093343936,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(int,int,int)": 0.1889822365046136,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)": 0.1889822365046136,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()": 0.22941573387056174,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)": 0.0,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)": 0.0,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)": 0.0,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()": 0.2182178902359924,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()": 0.22941573387056174,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()": 0.22941573387056174,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()": 0.2182178902359924,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()": 0.2182178902359924,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()": 0.22941573387056174,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()": 0.22941573387056174,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)": 0.0,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)": 0.0,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#isSupportConnected()": 0,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)": 0.0,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)": 0.0,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()": 0.0,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#SaddlePointExpansion()": 0,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)": 0.0,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)": 0.0,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$NotANumberException#NotANumberException()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)": 0.03578281334822566,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])": 0.028409549486356805,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int[])": 0.028409549486356805,
        "org.apache.commons.math3.random$AbstractWell#setSeed(long)": 0.029399051601892736,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": 0.027358782758229137,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": 0.027358782758229137,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.04789131426105757,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)": 0,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()": 0.0291111254869791,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#initRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)": 0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 0.03406013516450858,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#getDelegate()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": 0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": 0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$Well19937c#Well19937c()": 0.03578281334822566,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int)": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int[])": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c(long)": 0.0,
        "org.apache.commons.math3.random$Well19937c#next(int)": 0.07372097807744857,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.01647108978476456,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.03779644730092272,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.031128640318234518,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.02196343933976307,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.0
    },
    "Math-20": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 0.04402254531628119,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.055641488407465724,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.04885319687460315,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.24253562503633297,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.16666666666666666,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.24253562503633297,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.2672612419124244,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.14433756729740646,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.08333333333333333,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.09853292781642932,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.2581988897471611,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.24253562503633297,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.21320071635561041,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.11043152607484653,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.07905694150420949,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.07856742013183861,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.2672612419124244,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.2672612419124244,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.2672612419124244,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.07905694150420949,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.0607456739230787,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.09712858623572641,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.05976143046671968,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.060522753266880246,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.07088812050083358,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.07235746052924216,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.05277798139692595,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.07216878364870323,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.06063390625908324,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.05285164225816899,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.0607456739230787,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.060522753266880246,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.07881104062391006,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.04920678313051229,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.07018624063435965,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.057928444636349226,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.06388765649999399,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.07761505257063328,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.07761505257063328,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.07856742013183861,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[],double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.16012815380508713,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#cdiv(double,double,double,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectors(double[][])": 0.1543033499620919,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getD()": 0.24253562503633297,
        "org.apache.commons.math3.linear$EigenDecomposition#getDeterminant()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getEigenvector(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalue(int)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalues()": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalue(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getSolver()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getV()": 0.2182178902359924,
        "org.apache.commons.math3.linear$EigenDecomposition#getVT()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#hasComplexEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#isSymmetric(org.apache.commons.math3.linear.RealMatrix,boolean)": 0.16012815380508713,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToSchur(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)": 0.16222142113076254,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#EigenDecomposition$Solver(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#getInverse()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#isNonSingular()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 0.04632410546120795,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.1796053020267749,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.04845015831115092,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.050507627227610534,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.08804509063256238,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.048507125007266595,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.09950371902099892,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 0.2672612419124244,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 0.22360679774997896,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.07392212709545729,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 0.09407208683835973,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.04256282653793743,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.04632410546120795,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.04364357804719848,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 0.04364357804719848,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": 0.04397994971335425,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 0.04632410546120795,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 0.04364357804719848,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.04085889232227185,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.048621663832631515,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 0.048621663832631515,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 0.04920678313051229,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 0.048621663832631515,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#TriDiagonalTransformer(org.apache.commons.math3.linear.RealMatrix)": 0.14586499149789456,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getHouseholderVectorsRef()": 0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getMainDiagonalRef()": 0.16012815380508713,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQ()": 0.15249857033260467,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQT()": 0.15075567228888181,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getSecondaryDiagonalRef()": 0.16012815380508713,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getT()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#transform()": 0.14744195615489714,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#<clinit>()": 0.10369516947304253,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#AbstractConvergenceChecker()": 0.20412414523193154,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)": 0.0,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#getAbsoluteThreshold()": 0.11180339887498948,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#getRelativeThreshold()": 0.1111111111111111,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 0.08804509063256238,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.08804509063256238,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double)": 0.09950371902099892,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double,boolean)": 0.09950371902099892,
        "org.apache.commons.math3.optimization$PointValuePair#getPoint()": 0.11547005383792514,
        "org.apache.commons.math3.optimization$PointValuePair#getPointRef()": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair#writeReplace()": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#PointValuePair$DataTransferObject(double[],double)": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#readResolve()": 0.0,
        "org.apache.commons.math3.optimization$SimpleValueChecker#SimpleValueChecker()": 0.2182178902359924,
        "org.apache.commons.math3.optimization$SimpleValueChecker#SimpleValueChecker(double,double)": 0.0,
        "org.apache.commons.math3.optimization$SimpleValueChecker#converged(int,org.apache.commons.math3.optimization.PointValuePair,org.apache.commons.math3.optimization.PointValuePair)": 0.14002800840280097,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer()": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 0.11043152607484653,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])": 0.11867816581938533,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getConvergenceChecker()": 0.13245323570650439,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getEvaluations()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getGoalType()": 0.11867816581938533,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getMaxEvaluations()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getStartPoint()": 0.11396057645963795,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 0.125,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 0.11396057645963795,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer()": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 0.16222142113076254,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#getLowerBound()": 0.17407765595569785,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#getUpperBound()": 0.17407765595569785,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[],double[],double[])": 0.16222142113076254,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#<clinit>()": 0.2182178902359924,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer()": 1.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int)": 1.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[])": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean)": 0.2182178902359924,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean,org.apache.commons.math3.optimization.ConvergenceChecker)": 0.2182178902359924,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#checkParameters()": 0.23570226039551587,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#copyColumn(org.apache.commons.math3.linear.RealMatrix,int,org.apache.commons.math3.linear.RealMatrix,int)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#diag(org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#divide(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#doOptimize()": 0.23570226039551587,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#eye(int,int)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsDHistory()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsFitnessHistory()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsMeanHistory()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsSigmaHistory()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#initializeCMA(double[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#inverse(int[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#log(org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#max(double[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#max(org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#min(double[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#min(org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#ones(int,int)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#push(double[],double)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#randn(int)": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#randn1(int,int)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#repmat(org.apache.commons.math3.linear.RealMatrix,int,int)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#reverse(int[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sequence(double,double,double)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sortedIndices(double[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sqrt(org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#square(org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sumRows(org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#triu(org.apache.commons.math3.linear.RealMatrix,int)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateBD(double)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateCovariance(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,int[],org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#zeros(int,int)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#CMAESOptimizer$DoubleIndex(double,int)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#compareTo(org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#hashCode()": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#CMAESOptimizer$FitnessFunction(org.apache.commons.math3.optimization.direct.CMAESOptimizer)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#decode(double[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#encode(double[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#isFeasible(double[])": 0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#penalty(double[],double[])": 0.7071067811865475,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#repair(double[])": 0.7071067811865475,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#repairAndDecode(double[])": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#setValueRange(double)": 0.2773500981126146,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#value(double[])": 0.2773500981126146,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": 0.031053504702226845,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": 0.031053504702226845,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.047565149415449405,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 0.11867816581938533,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.08873565094161139,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": 0.20851441405707477,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": 0.11180339887498948,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 0.08873565094161139,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 0.11043152607484653,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 0.1111111111111111,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.045360921162651446,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": 0.03431991115272901,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.018512171125523655,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.02499219116020307,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.03517987723651459,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.06415002990995841,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0562543950463012,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.03596750006328032,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.031686212526223896,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.04096159602595203,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.04569116623849538,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.039314056698537575,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.053074489243427524,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.053074489243427524,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.05496497099293127,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.05447347107028433,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.024899052235614633,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.0607456739230787,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0607456739230787,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0607456739230787,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0607456739230787,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.031927542840705044,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.03047138176680026,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.031927542840705044,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.04148699068225112,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.03962144258751637,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 0.03959037912324479,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.17407765595569785,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 0.0413802944301184,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#resetCount()": 0.04075695729696112,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": 0.04203313517091986,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.2182178902359924,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.035533452725935076,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.05933908290969266,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#getFirst()": 0.0,
        "org.apache.commons.math3.util$Pair#getKey()": 0.07692307692307693,
        "org.apache.commons.math3.util$Pair#getSecond()": 0.0,
        "org.apache.commons.math3.util$Pair#getValue()": 0.08873565094161139,
        "org.apache.commons.math3.util$Pair#hashCode()": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.030344856451720224,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.14586499149789456,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.04981354813867179,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.036563621206356534,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-21": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 0.07632327769721765,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.09652341781316803,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.08471737420873575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.19487094073848926,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.17149858514250885,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.12830005981991682,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.13736056394868904,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.136504726557987,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.19487094073848926,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.19487094073848926,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.19487094073848926,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.13736056394868904,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.10540925533894598,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.10369516947304253,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.10502100630210073,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.12309149097933272,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.12565617248750865,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.091541729654603,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.12532679794330703,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.10521459357478416,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.09166984970282113,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.10540925533894598,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.10502100630210073,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.2013468165642073,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.13693063937629152,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.13483997249264842,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.13483997249264842,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.136504726557987,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 0.08372183582789214,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.08793155726408239,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.09205746178983233,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.15309310892394865,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.08804509063256238,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.11547005383792514,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.08559209850218258,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 0.1636634176769943,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#NonPositiveDefiniteMatrixException(double,int,double)": 0.0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getColumn()": 0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getRow()": 0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getThreshold()": 0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.07378784519149227,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.08372183582789214,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.07566499084579774,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 0.07566499084579774,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": 0.07624928516630233,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 0.08372183582789214,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 0.07566499084579774,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$RectangularCholeskyDecomposition#RectangularCholeskyDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0.5773502691896257,
        "org.apache.commons.math3.linear$RectangularCholeskyDecomposition#getRank()": 0.23570226039551587,
        "org.apache.commons.math3.linear$RectangularCholeskyDecomposition#getRootMatrix()": 0.5773502691896257,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.08183170883849715,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": 0.05947886892886081,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.032202264328154824,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.043423571211604964,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.020399668712070152,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.07124704998790965,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.04327423224079155,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.061584636959891775,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0
    },
    "Math-22": {
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double)": 0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getEvaluations()": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getIterations()": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMax()": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMaximalIterationCount()": 0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMin()": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMinimalIterationCount()": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getRelativeAccuracy()": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#<clinit>()": 0.0,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,double,double)": 0.0,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,double,double,int,int)": 0.0,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,int,int)": 0.0,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()": 0.0,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#stage(int)": 0.0,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution(org.apache.commons.math3.random.RandomGenerator)": 0.05812381937190964,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double)": 0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(double,double)": 0.1270001270001905,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(double,double,double)": 0.1270001270001905,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(org.apache.commons.math3.random.RandomGenerator,double,double,double)": 0.1270001270001905,
        "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#density(double)": 0.35355339059327373,
        "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()": 0.16666666666666666,
        "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#isSupportLowerBoundInclusive()": 0.7071067811865475,
        "org.apache.commons.math3.distribution$FDistribution#isSupportUpperBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#UniformRealDistribution()": 0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#UniformRealDistribution(double,double)": 0.16666666666666666,
        "org.apache.commons.math3.distribution$UniformRealDistribution#UniformRealDistribution(double,double,double)": 0.16666666666666666,
        "org.apache.commons.math3.distribution$UniformRealDistribution#UniformRealDistribution(org.apache.commons.math3.random.RandomGenerator,double,double,double)": 0.1543033499620919,
        "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)": 0.0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#density(double)": 0.35355339059327373,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()": 0.0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()": 0.0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()": 0.0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()": 0.35355339059327373,
        "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()": 0.0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportLowerBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportUpperBoundInclusive()": 0.7071067811865475,
        "org.apache.commons.math3.distribution$UniformRealDistribution#sample()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)": 0.0565685424949238,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])": 0.045407660918649985,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int[])": 0.045407660918649985,
        "org.apache.commons.math3.random$AbstractWell#setSeed(long)": 0.045859016797805525,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": 0.04393747751637468,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": 0.04393747751637468,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()": 0.045221563164613454,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#initRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 0.045221563164613454,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$Well19937c#Well19937c()": 0.0565685424949238,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int)": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int[])": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c(long)": 0.0,
        "org.apache.commons.math3.random$Well19937c#next(int)": 0.0,
        "org.apache.commons.math3.special$Beta#Beta()": 0,
        "org.apache.commons.math3.special$Beta#logBeta(double,double)": 0.21320071635561041,
        "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)": 0.0604122093330177,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)": 0.0,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)": 0,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)": 0.0,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)": 0,
        "org.apache.commons.math3.special$Beta$1#getA(int,double)": 0.0,
        "org.apache.commons.math3.special$Beta$1#getB(int,double)": 0.0,
        "org.apache.commons.math3.special$Gamma#<clinit>()": 0.031559720154890156,
        "org.apache.commons.math3.special$Gamma#Gamma()": 0,
        "org.apache.commons.math3.special$Gamma#digamma(double)": 0.0,
        "org.apache.commons.math3.special$Gamma#gamma(double)": 0.0,
        "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)": 0.033370432213299994,
        "org.apache.commons.math3.special$Gamma#lanczos(double)": 0.0,
        "org.apache.commons.math3.special$Gamma#logGamma(double)": 0.03289758474798845,
        "org.apache.commons.math3.special$Gamma#logGamma1p(double)": 0.03344500310453256,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)": 0.0,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)": 0.0,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)": 0.0,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)": 0.0,
        "org.apache.commons.math3.special$Gamma#trigamma(double)": 0.0,
        "org.apache.commons.math3.special$Gamma$1#getA(int,double)": 0.0,
        "org.apache.commons.math3.special$Gamma$1#getB(int,double)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#ContinuedFraction()": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)": 0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)": 0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.013164734152397188,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.026783579200279007,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.02333800140046683,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.024112141108520606,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.025449329927964382,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.022416791983111015,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.03289758474798845,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.023544080467400554,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.023596458909150436,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.022587697572631283,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.021586644588817278,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.023544080467400554,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.023544080467400554,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.023596458909150436,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.023596458909150436,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.022587697572631283
    },
    "Math-23": {
        "org.apache.commons.math3.analysis$FunctionUtils#FunctionUtils()": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.5773502691896258,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#combine(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#fix1stArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#toUnivariateDifferential(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)": 0.5773502691896258,
        "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis.function$Sin#Sin()": 0.10153461651336192,
        "org.apache.commons.math3.analysis.function$Sin#derivative()": 0.0,
        "org.apache.commons.math3.analysis.function$Sin#value(double)": 0.1125087900926024,
        "org.apache.commons.math3.analysis.function$Sin#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.function$StepFunction#StepFunction(double[],double[])": 0.30151134457776363,
        "org.apache.commons.math3.analysis.function$StepFunction#value(double)": 0.4472135954999579,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 0.08838834764831843,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.08838834764831843,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#BaseAbstractUnivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getConvergenceChecker()": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getEvaluations()": 0.35355339059327373,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getGoalType()": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMax()": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMaxEvaluations()": 0.0,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMin()": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getStartValue()": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)": 0.0,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#BrentOptimizer(double,double)": 0.2886751345948129,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#BrentOptimizer(double,double,org.apache.commons.math3.optimization.ConvergenceChecker)": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)": 0.25,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()": 0.24253562503633297,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#UnivariatePointValuePair(double,double)": 0.25,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#getPoint()": 0.25,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#getValue()": 0.25,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.018676098402828818,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.025141822757713452,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.03544406025041679,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.05679618342470648,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.039968038348871575,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.05352877275721892,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.05352877275721892,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.05547001962252291,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.05496497099293127,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.02509428066142478,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.06415002990995841,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.06131393394849658,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.06131393394849658,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.06131393394849658,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.06131393394849658,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.041522739926869986,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.03965257928590721,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 0.03962144258751637,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.0778498944161523,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 0.041415768328129106,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#resetCount()": 0.04079085082240021,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": 0.04207031619116713,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.14586499149789456,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.14433756729740646,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.08391813582966891,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.1643989873053573,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.125,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.08391813582966891,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.08247860988423225,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.08247860988423225,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.030570892025787156,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0827605888602368,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.036860489038724284,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-24": {
        "org.apache.commons.math3.analysis$FunctionUtils#FunctionUtils()": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.7071067811865475,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#combine(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#fix1stArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0,
        "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#toUnivariateDifferential(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)": 0.7071067811865475,
        "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)": 0,
        "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)": 0.0,
        "org.apache.commons.math3.analysis.function$Sin#Sin()": 0.10206207261596577,
        "org.apache.commons.math3.analysis.function$Sin#derivative()": 0.0,
        "org.apache.commons.math3.analysis.function$Sin#value(double)": 0.11322770341445956,
        "org.apache.commons.math3.analysis.function$Sin#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.function$StepFunction#StepFunction(double[],double[])": 0.31622776601683794,
        "org.apache.commons.math3.analysis.function$StepFunction#value(double)": 0.5,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 0.08873565094161139,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.08873565094161139,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#BaseAbstractUnivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 0.25,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)": 0.25,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getConvergenceChecker()": 0.25,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getEvaluations()": 0.3779644730092272,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getGoalType()": 0.25,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMax()": 0.25,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMaxEvaluations()": 0.0,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMin()": 0.25,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getStartValue()": 0.25,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)": 0.35355339059327373,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)": 0.25,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()": 0.25,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#BrentOptimizer(double,double)": 0.30151134457776363,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#BrentOptimizer(double,double,org.apache.commons.math3.optimization.ConvergenceChecker)": 0.25,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)": 0,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()": 0.25,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#UnivariatePointValuePair(double,double)": 0.2581988897471611,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#getPoint()": 0.2581988897471611,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#getValue()": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.01867935633541406,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.025149772741392844,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0354886720493838,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.05688801239885743,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.04,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.05360562674188974,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.05360562674188974,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.05555555555555555,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.055048188256318034,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.025102185616940248,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0642824346533225,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.06142951168339512,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.06142951168339512,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.06142951168339512,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.06142951168339512,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.04155858174616913,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.03968378950662725,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 0.03965257928590721,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.07808688094430304,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 0.041451333614483915,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#resetCount()": 0.040824829046386304,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": 0.04210759605332595,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.14744195615489714,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.14586499149789456,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0842151921066519,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.16666666666666666,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.1259881576697424,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.0842151921066519,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0827605888602368,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0827605888602368,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.03059950306810523,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.08304547985373997,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.03691067352627811,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-25": {
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception.util$ArgUtils#ArgUtils()": 0,
        "org.apache.commons.math3.exception.util$ArgUtils#flatten(java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#ExceptionContext(java.lang.Throwable)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeContext(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeMessages(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getKeys()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale,java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getThrowable()": 0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getValue(java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#nonSerializableReplacement(java.lang.Object)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeContext(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeMessages(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#setValue(java.lang.String,java.lang.Object)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getSourceString()": 0.0,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter#HarmonicFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)": 0.0,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter#fit()": 0.0,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter#fit(double[])": 0.0,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#HarmonicFitter$ParameterGuesser(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])": 0.4082482904638631,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#guess()": 0.4472135954999579,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#guessAOmega()": 0.4472135954999579,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#guessPhi()": 0.4472135954999579,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#sortObservations()": 0.4472135954999579,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)": 0.19245008972987526,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()": 0.0,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()": 0.19611613513818404
    },
    "Math-26": {
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.2773500981126146,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.14433756729740646,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.1203858530857692,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.14586499149789456,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception.util$ArgUtils#ArgUtils()": 0,
        "org.apache.commons.math3.exception.util$ArgUtils#flatten(java.lang.Object[])": 0.03413943709994594,
        "org.apache.commons.math3.exception.util$ExceptionContext#ExceptionContext(java.lang.Throwable)": 0.03413943709994594,
        "org.apache.commons.math3.exception.util$ExceptionContext#addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.034159349284257755,
        "org.apache.commons.math3.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeContext(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeMessages(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getKeys()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale,java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getThrowable()": 0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getValue(java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#nonSerializableReplacement(java.lang.Object)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeContext(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeMessages(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#setValue(java.lang.String,java.lang.Object)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()": 0.03293324609693921,
        "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)": 0.03293324609693921,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getSourceString()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#<clinit>()": 0.06967330142916177,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)": 0.13608276348795434,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)": 0.1336306209562122,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)": 0.06967330142916177,
        "org.apache.commons.math3.fraction$Fraction#abs()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#add(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#compareTo(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#divide(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#doubleValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#floatValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getDenominator()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getField()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getNumerator()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#hashCode()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#intValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#longValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#multiply(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#negate()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#percentageValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#reciprocal()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#subtract(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#toString()": 0.0,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)": 0.0,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)": 0.5773502691896258,
        "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()": 0.02853650727676748,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": 0.06868028197434452,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.018287923898986376,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.02540822292337563,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.05555555555555555,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.026948402781814772,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0
    },
    "Math-27": {
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#<clinit>()": 0.06967330142916177,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)": 0.06967330142916177,
        "org.apache.commons.math3.fraction$Fraction#abs()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#add(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#compareTo(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#divide(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#doubleValue()": 0.19245008972987526,
        "org.apache.commons.math3.fraction$Fraction#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#floatValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getDenominator()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getField()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getNumerator()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#hashCode()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#intValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#longValue()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#multiply(int)": 0.5773502691896258,
        "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#negate()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#percentageValue()": 0.7071067811865475,
        "org.apache.commons.math3.fraction$Fraction#reciprocal()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#subtract(int)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.fraction$Fraction#toString()": 0.0,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)": 0.0,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()": 0.02853650727676748,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": 0.06868028197434452,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.018287923898986376,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.05555555555555555,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0
    },
    "Math-28": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.14285714285714285,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.11952286093343936,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.14433756729740646,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.5773502691896258,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.21320071635561041,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.21320071635561041,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 0.04432422071779363,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.0562543950463012,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.04926646390821466,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.14586499149789456,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.1889822365046136,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.18569533817705186,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.06154574548966636,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.060522753266880246,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.06131393394849658,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.053300179088902604,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.15249857033260467,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.06142951168339512,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.05337605126836238,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.06154574548966636,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.06131393394849658,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.04938647983247948,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.07071067811865475,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.058722021951470346,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.08574929257125441,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.08333333333333333,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.05783149319662402,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.06375767130633382,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.11470786693528087,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.10101525445522107,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 0.04867923835112355,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.05116445100966508,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.05360562674188974,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.051231551957855996,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.042835293687811936,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.04867923835112355,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.04393747751637468,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 0.04393747751637468,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": 0.04428074427700476,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 0.044151078568834795,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 0.04393747751637468,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.04096159602595203,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.048795003647426664,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 0.048795003647426664,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 0.04938647983247948,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 0.048795003647426664,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 0.0890870806374748,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.0890870806374748,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double)": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double,boolean)": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair#getPoint()": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair#getPointRef()": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair#writeReplace()": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#PointValuePair$DataTransferObject(double[],double)": 0.0,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#readResolve()": 0.0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#AbstractLinearOptimizer()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getConstraints()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getFunction()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getGoalType()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getIterations()": 0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getMaxIterations()": 0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#incrementIterationsCounter()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#optimize(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean)": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#restrictToNonNegative()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#setMaxIterations(int)": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(double[],double,org.apache.commons.math3.optimization.linear.Relationship,double[],double)": 0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(double[],org.apache.commons.math3.optimization.linear.Relationship,double)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(org.apache.commons.math3.linear.RealVector,double,org.apache.commons.math3.optimization.linear.Relationship,org.apache.commons.math3.linear.RealVector,double)": 0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.optimization.linear.Relationship,double)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getCoefficients()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getRelationship()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getValue()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#hashCode()": 0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#LinearObjectiveFunction(double[],double)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#LinearObjectiveFunction(org.apache.commons.math3.linear.RealVector,double)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getCoefficients()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getConstantTerm()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getValue(double[])": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getValue(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#hashCode()": 0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$NoFeasibleSolutionException#NoFeasibleSolutionException()": 0.0,
        "org.apache.commons.math3.optimization.linear$Relationship#<clinit>()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$Relationship#Relationship(java.lang.String,int,java.lang.String)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$Relationship#oppositeRelationship()": 0.0,
        "org.apache.commons.math3.optimization.linear$Relationship#toString()": 0,
        "org.apache.commons.math3.optimization.linear$Relationship$1#<clinit>()": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#SimplexSolver()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#SimplexSolver(double,int)": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#doOptimize()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau,int)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau)": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double)": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double,int)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#copyArray(double[],double[])": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#createTableau(boolean)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#divideRow(int,double)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#dropPhase1Objective()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getArtificialVariableOffset()": 0.2,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getBasicRow(int)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getData()": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getEntry(int,int)": 0.19245008972987526,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getHeight()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getInvertedCoefficientSum(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumArtificialVariables()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumDecisionVariables()": 0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumObjectiveFunctions()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumSlackVariables()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getOriginalNumDecisionVariables()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getRhsOffset()": 0.2,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getSlackVariableOffset()": 0.19245008972987526,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getSolution()": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getWidth()": 0.19245008972987526,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#hashCode()": 0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#initializeColumnLabels()": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#isOptimal()": 0.19611613513818404,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#normalize(org.apache.commons.math3.optimization.linear.LinearConstraint)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#normalizeConstraints(java.util.Collection)": 0.18257418583505536,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#setEntry(int,int,double)": 0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#subtractRow(int,int,double)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$UnboundedSolutionException#UnboundedSolutionException()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.04740454631399772,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": 0.03446227583977888,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.018290982847556567,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.02540822292337563,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.037011660509880265,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.03601412030328099,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#getFirst()": 0.0,
        "org.apache.commons.math3.util$Pair#getKey()": 0.0,
        "org.apache.commons.math3.util$Pair#getSecond()": 0.0,
        "org.apache.commons.math3.util$Pair#getValue()": 0.0,
        "org.apache.commons.math3.util$Pair#hashCode()": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.030860669992418384,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.13608276348795434,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.19611613513818404,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.05063696835418333,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.037113480951260276,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-29": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(double[])": 0.21004201260420147,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(double[],double)": 0.21004201260420147,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(int,int)": 0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(java.lang.Double[],double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(org.apache.commons.math3.linear.OpenMapRealVector)": 0.42008402520840293,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(org.apache.commons.math3.linear.OpenMapRealVector,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#add(org.apache.commons.math3.linear.OpenMapRealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#append(org.apache.commons.math3.linear.OpenMapRealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#dotProduct(org.apache.commons.math3.linear.OpenMapRealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.3333333333333333,
        "org.apache.commons.math3.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.5773502691896258,
        "org.apache.commons.math3.linear$OpenMapRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#getDimension()": 0.2013468165642073,
        "org.apache.commons.math3.linear$OpenMapRealVector#getDistance(org.apache.commons.math3.linear.OpenMapRealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#getEntries()": 0.408248290463863,
        "org.apache.commons.math3.linear$OpenMapRealVector#getEntry(int)": 0.2672612419124244,
        "org.apache.commons.math3.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math3.linear.OpenMapRealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math3.linear.OpenMapRealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#getSparsity()": 0,
        "org.apache.commons.math3.linear$OpenMapRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#isDefaultValue(double)": 0.19867985355975656,
        "org.apache.commons.math3.linear$OpenMapRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#setEntry(int,double)": 0.2847473987257497,
        "org.apache.commons.math3.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#subtract(org.apache.commons.math3.linear.OpenMapRealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapEntry#OpenMapRealVector$OpenMapEntry(org.apache.commons.math3.linear.OpenMapRealVector,org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapEntry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapSparseIterator#OpenMapRealVector$OpenMapSparseIterator(org.apache.commons.math3.linear.OpenMapRealVector)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapSparseIterator#next()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapSparseIterator#remove()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.07761505257063328,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.21483446221182986,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.26413527189768715,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$SparseRealVector#SparseRealVector()": 0.19867985355975656,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.03224129401095805,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.04496179869976355,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.05061534248586659,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.04728075135384592,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap()": 0.0,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(double)": 0.17066403719657228,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int)": 0.0,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int,double)": 0.15811388300841897,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(org.apache.commons.math3.util.OpenIntToDoubleHashMap)": 0.3216337604513384,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#changeIndexSign(int)": 0.29277002188455997,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#computeCapacity(int)": 0.15811388300841897,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#containsKey(int)": 0.3535533905932738,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#containsKey(int,int)": 0.1901172751573434,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#doRemove(int)": 0.3535533905932738,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#findInsertionIndex(int)": 0.17066403719657228,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)": 0.17066403719657228,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#get(int)": 0.19487094073848926,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#growTable()": 0.3333333333333333,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#hashOf(int)": 0.1690308509457033,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#iterator()": 0.2773500981126145,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#nextPowerOfTwo(int)": 0.0,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#perturb(int)": 0.2970442628930023,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#probe(int,int)": 0.2970442628930023,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#put(int,double)": 0.17066403719657228,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#remove(int)": 0.2773500981126145,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#shouldGrowTable()": 0.17066403719657228,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#size()": 0.0,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#OpenIntToDoubleHashMap$Iterator(org.apache.commons.math3.util.OpenIntToDoubleHashMap)": 0.2773500981126145,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#advance()": 0.2773500981126145,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#hasNext()": 0.2809757434745082,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#key()": 0.3061862178478973,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#value()": 0.2809757434745082
    },
    "Math-3": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#convolve(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.2886751345948129,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#scale(double,double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#scaleInPlace(double,double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$3#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0
    },
    "Math-30": {
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 0.043314808182421,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()": 0.13608276348795434,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution()": 0,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(double,double)": 0.13608276348795434,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(double,double,double)": 0.13608276348795434,
        "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)": 0.30151134457776363,
        "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#density(double)": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getMean()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportLowerBoundInclusive()": 0,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportUpperBoundInclusive()": 0,
        "org.apache.commons.math3.distribution$NormalDistribution#probability(double)": 0,
        "org.apache.commons.math3.distribution$NormalDistribution#sample()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#<clinit>()": 0.0325644804512918,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 0.03263376665824188,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#getNatural(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#getRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#getSecRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#initRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)": 0.0,
        "org.apache.commons.math3.special$Erf#Erf()": 0,
        "org.apache.commons.math3.special$Erf#erf(double)": 0.2,
        "org.apache.commons.math3.special$Erf#erf(double,double)": 0.0,
        "org.apache.commons.math3.special$Erf#erfc(double)": 0.0,
        "org.apache.commons.math3.special$Gamma#<clinit>()": 0.04578685464956301,
        "org.apache.commons.math3.special$Gamma#Gamma()": 0,
        "org.apache.commons.math3.special$Gamma#digamma(double)": 0.0,
        "org.apache.commons.math3.special$Gamma#lanczos(double)": 0.0,
        "org.apache.commons.math3.special$Gamma#logGamma(double)": 0.0,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)": 0.0,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)": 0.051231551957855996,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)": 0.0,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)": 0.0,
        "org.apache.commons.math3.special$Gamma#trigamma(double)": 0.0,
        "org.apache.commons.math3.special$Gamma$1#getA(int,double)": 0.0,
        "org.apache.commons.math3.special$Gamma$1#getB(int,double)": 0.0,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#MannWhitneyUTest()": 0.5773502691896258,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#MannWhitneyUTest(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.stat.ranking.TiesStrategy)": 0,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)": 0.7071067811865475,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#concatenateSamples(double[],double[])": 0.7071067811865475,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#ensureDataConformance(double[],double[])": 0.5773502691896258,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])": 0.7071067811865475,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])": 0.5773502691896258,
        "org.apache.commons.math3.stat.ranking$NaNStrategy#<clinit>()": 0.24253562503633297,
        "org.apache.commons.math3.stat.ranking$NaNStrategy#NaNStrategy(java.lang.String,int)": 0.24253562503633297,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#<clinit>()": 0.24253562503633297,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking()": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.random.RandomGenerator)": 0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.stat.ranking.NaNStrategy)": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.stat.ranking.TiesStrategy)": 0.3779644730092272,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.stat.ranking.TiesStrategy)": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#fill(double[],java.util.List,double)": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])": 0.4472135954999579,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#getNanStrategy()": 0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#getTiesStrategy()": 0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])": 0.25,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#restoreNaNs(double[],java.util.List)": 0.4472135954999579,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$1#<clinit>()": 0.25,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#NaturalRanking$IntDoublePair(double,int)": 0.25,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#compareTo(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair)": 0.25,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getPosition()": 0.25,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getValue()": 0.25,
        "org.apache.commons.math3.stat.ranking$TiesStrategy#<clinit>()": 0.24253562503633297,
        "org.apache.commons.math3.stat.ranking$TiesStrategy#TiesStrategy(java.lang.String,int)": 0.24253562503633297,
        "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()": 0.028606478384531155,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": 0.03253000243161777,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#ContinuedFraction()": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)": 0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)": 0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.018689140372576664,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.026108681666265243,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.029437240470473185,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.028227871846881837,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.027472112789737803,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0301237616564389,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.028194193721730047,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.042601432284230495,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.030015011259383207,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0256326007925508,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0282842712474619,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.028329634983503674,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.028341010063256785,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.02743073910242014,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.0282842712474619,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.0282842712474619,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.028329634983503674,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.028329634983503674,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.028341010063256785,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(double[])": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int)": 0.03254722774520597,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float,float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float,float,int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(org.apache.commons.math3.util.ResizableDoubleArray)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)": 0.03191128231363014,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElements(double[])": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#checkContractExpand(float,float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#clear()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#contract()": 0.031927542840705044,
        "org.apache.commons.math3.util$ResizableDoubleArray#copy()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#copy(org.apache.commons.math3.util.ResizableDoubleArray,org.apache.commons.math3.util.ResizableDoubleArray)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardExtremeElements(int,boolean)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardFrontElements(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardMostRecentElements(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#expand()": 0.032009219983223994,
        "org.apache.commons.math3.util$ResizableDoubleArray#expandTo(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getContractionCriteria()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getElement(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getElements()": 0.03244428422615251,
        "org.apache.commons.math3.util$ResizableDoubleArray#getExpansionFactor()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getExpansionMode()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getInternalLength()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getInternalValues()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getNumElements()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#hashCode()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setContractionCriteria(float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setElement(int,double)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionFactor(float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionMode(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setInitialCapacity(int)": 0.032478490123081544,
        "org.apache.commons.math3.util$ResizableDoubleArray#setNumElements(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()": 0.03191128231363014,
        "org.apache.commons.math3.util$ResizableDoubleArray#start()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#substituteMostRecentElement(double)": 0.0
    },
    "Math-31": {
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double)": 0.051031036307982884,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)": 0.05012547071170855,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)": 0.04891159880445185,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)": 0.049875466805381644,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()": 0.05184758473652126,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()": 0.05,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMaxEvaluations()": 0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()": 0.05,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()": 0.05661385170722978,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()": 0.049875466805381644,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isSequence(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.04975185951049946,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.05423261445466404,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.04975185951049946,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyInterval(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)": 0.05698028822981897,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double)": 0.06537204504606134,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double,double,double)": 0,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#brent(double,double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#doSolve()": 0.06482037235521644,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#UnivariateSolverUtils()": 0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isSequence(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#midpoint(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.07142857142857142,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)": 0.04789131426105757,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)": 0.0562543950463012,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution()": 0.06178020632152154,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)": 0.09284766908852593,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)": 0.08111071056538127,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)": 0.0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()": 0.0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)": 0.0890870806374748,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 0.031341957040361135,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": 0.06868028197434452,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": 0.07293249574894728,
        "org.apache.commons.math3.distribution$BinomialDistribution#BinomialDistribution(int,double)": 0.1543033499620919,
        "org.apache.commons.math3.distribution$BinomialDistribution#cumulativeProbability(int)": 0.16666666666666666,
        "org.apache.commons.math3.distribution$BinomialDistribution#getNumberOfTrials()": 0.0,
        "org.apache.commons.math3.distribution$BinomialDistribution#getNumericalMean()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$BinomialDistribution#getNumericalVariance()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$BinomialDistribution#getProbabilityOfSuccess()": 0.0,
        "org.apache.commons.math3.distribution$BinomialDistribution#getSupportLowerBound()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$BinomialDistribution#getSupportUpperBound()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$BinomialDistribution#isSupportConnected()": 0,
        "org.apache.commons.math3.distribution$BinomialDistribution#probability(int)": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(double,double)": 0.1336306209562122,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(double,double,double)": 0.1336306209562122,
        "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)": 0.15075567228888181,
        "org.apache.commons.math3.distribution$FDistribution#density(double)": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()": 0.16666666666666666,
        "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()": 0.17677669529663687,
        "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()": 0.17149858514250882,
        "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#isSupportLowerBoundInclusive()": 0,
        "org.apache.commons.math3.distribution$FDistribution#isSupportUpperBoundInclusive()": 0,
        "org.apache.commons.math3.distribution$FDistribution#probability(double)": 0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.3651483716701107,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.20412414523193154,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.17149858514250882,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.20851441405707477,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.4082482904638631,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(double,double,double,double)": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(org.apache.commons.math3.exception.util.Localizable,double,double,double,double,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getFHi()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#getFLo()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#getHi()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#getLo()": 0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#<clinit>()": 0.04612656040144425,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 0.046225016352102424,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#getNatural(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#getRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#getSecRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#initRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)": 0.0,
        "org.apache.commons.math3.special$Beta#Beta()": 0,
        "org.apache.commons.math3.special$Beta#logBeta(double,double)": 0.0,
        "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)": 0.12262786789699316,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)": 0.12262786789699316,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)": 0,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)": 0.12262786789699316,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)": 0,
        "org.apache.commons.math3.special$Beta$1#getA(int,double)": 0.12649110640673517,
        "org.apache.commons.math3.special$Beta$1#getB(int,double)": 0.12649110640673517,
        "org.apache.commons.math3.special$Gamma#<clinit>()": 0.06644554941850954,
        "org.apache.commons.math3.special$Gamma#Gamma()": 0,
        "org.apache.commons.math3.special$Gamma#digamma(double)": 0.0,
        "org.apache.commons.math3.special$Gamma#lanczos(double)": 0.06741998624632421,
        "org.apache.commons.math3.special$Gamma#logGamma(double)": 0.06819943394704735,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)": 0.0,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)": 0.0,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)": 0.0,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)": 0.0,
        "org.apache.commons.math3.special$Gamma#trigamma(double)": 0.0,
        "org.apache.commons.math3.special$Gamma$1#getA(int,double)": 0.0,
        "org.apache.commons.math3.special$Gamma$1#getB(int,double)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()": 0.0405054204942691,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": 0.04607756775840914,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#ContinuedFraction()": 0.07868894753646337,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)": 0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)": 0.07868894753646337,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)": 0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.026846242208560973,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.037502930030867465,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.053186975040914186,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.042409446483998546,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.05620994273193427,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.03998400959360447,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.039482229592872765,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.04267895997763199,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.03993615319154358,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.04252432555625623,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.03668644191235265,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0400641540107502,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.040128617695256406,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.04014478229518501,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.038851434494290564,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.0400641540107502,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.0400641540107502,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.040128617695256406,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.040128617695256406,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.04014478229518501,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.028700578896514575,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.028629916715693413,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 0.028606478384531155,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 0.029961075885598987,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#resetCount()": 0.029488391230979426,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": 0.02906190968595482,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.026279416561381837,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.0435813633640409,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.07322520259382125,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.053338074706266496,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(double[])": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int)": 0.04610204455575741,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float,float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float,float,int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(org.apache.commons.math3.util.ResizableDoubleArray)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)": 0.045198461470556874,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElements(double[])": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#checkContractExpand(float,float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#clear()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#contract()": 0.045221563164613454,
        "org.apache.commons.math3.util$ResizableDoubleArray#copy()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#copy(org.apache.commons.math3.util.ResizableDoubleArray,org.apache.commons.math3.util.ResizableDoubleArray)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardExtremeElements(int,boolean)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardFrontElements(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardMostRecentElements(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#expand()": 0.045337605344527805,
        "org.apache.commons.math3.util$ResizableDoubleArray#expandTo(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getContractionCriteria()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getElement(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getElements()": 0.045955765885932295,
        "org.apache.commons.math3.util$ResizableDoubleArray#getExpansionFactor()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getExpansionMode()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getInternalLength()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getInternalValues()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#getNumElements()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#hashCode()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setContractionCriteria(float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setElement(int,double)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionFactor(float)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionMode(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#setInitialCapacity(int)": 0.046004370622823615,
        "org.apache.commons.math3.util$ResizableDoubleArray#setNumElements(int)": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()": 0.045198461470556874,
        "org.apache.commons.math3.util$ResizableDoubleArray#start()": 0.0,
        "org.apache.commons.math3.util$ResizableDoubleArray#substituteMostRecentElement(double)": 0.0
    },
    "Math-32": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#Interval(double,double)": 0.1643989873053573,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()": 0.1796053020267749,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()": 0.1796053020267749,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()": 0.19245008972987526,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)": 0.15617376188860607,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.18569533817705186,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()": 0.16012815380508713,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.19245008972987526,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)": 0.15617376188860607,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)": 0.16012815380508713,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)": 0.14586499149789456,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()": 0.1690308509457033,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)": 0.15811388300841897,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()": 0.1690308509457033,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#revertSelf()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.20851441405707477,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()": 0.14586499149789456,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.14586499149789456,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.19245008972987526,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()": 0.1386750490563073,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)": 0.1386750490563073,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormSq()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getSpace()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()": 0.1386750490563073,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getZero()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#hashCode()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isInfinite()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#negate()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#toString()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#toString(java.text.NumberFormat)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()": 0.3333333333333333,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getOrigin()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)": 0.2886751345948129,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)": 0.2886751345948129,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#Plane(org.apache.commons.math3.geometry.euclidean.threed.Plane)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.3779644730092272,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.25,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.35355339059327373,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()": 0.30151134457776363,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)": 0.5,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getU()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getV()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)": 0.3779644730092272,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)": 0.35355339059327373,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Plane)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#revertSelf()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.5,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()": 0.25,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.25,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#PolyhedronsSet()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#PolyhedronsSet(double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#PolyhedronsSet(java.util.Collection)": 1.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#PolyhedronsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#PolyhedronsSet$FacetsContributionVisitor(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#PolyhedronsSet$RotationTransform(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#PolyhedronsSet$TranslationTransform(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#SubPlane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()": 0.09090909090909091,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)": 0.09090909090909091,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.16222142113076254,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.17407765595569785,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.3779644730092272,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)": 0.2581988897471611,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)": 0.19245008972987526,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0.15075567228888181,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()": 0.14285714285714285,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()": 0.1889822365046136,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getSpace()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()": 0.1336306209562122,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()": 0.1336306209562122,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()": 0.1336306209562122,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()": 0.2182178902359924,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)": 0.15075567228888181,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toArray()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString(java.text.NumberFormat)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(double,double,double,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.20851441405707477,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.1543033499620919,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()": 0.20412414523193154,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.21320071635561041,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOriginOffset()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.18257418583505536,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.1543033499620919,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#revertSelf()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.3779644730092272,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#setOriginOffset(double)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": 0.17677669529663687,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()": 0.20412414523193154,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeSpace()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#Line$LineTransform(java.awt.geom.AffineTransform)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#PolygonsSet()": 0.4082482904638631,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#PolygonsSet(double,double,double,double)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#PolygonsSet(java.util.Collection)": 0.2581988897471611,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#PolygonsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.25,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#boxBoundary(double,double,double,double)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.2672612419124244,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()": 0.3779644730092272,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#PolygonsSet$ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#PolygonsSet$ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#PolygonsSet$SegmentsBuilder()": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.euclidean.twod$Segment#Segment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.3779644730092272,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.1889822365046136,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.35355339059327373,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.20851441405707477,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.20851441405707477,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.20851441405707477,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()": 0.15249857033260467,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)": 0.15249857033260467,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double[])": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)": 0.2,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormSq()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getSpace()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()": 0.15249857033260467,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()": 0.15249857033260467,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getZero()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isInfinite()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#negate()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toArray()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toString()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toString(java.text.NumberFormat)": 0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()": 0.19245008972987526,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)": 0.2581988897471611,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.14285714285714285,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])": 0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)": 0.14586499149789456,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()": 0.3333333333333333,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()": 0.2,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)": 0.16012815380508713,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)": 0.2581988897471611,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)": 0.2,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)": 0.2,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.2581988897471611,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.2581988897471611,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.2581988897471611,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.2581988897471611,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.14285714285714285,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()": 0.19245008972987526,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()": 0.14285714285714285,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()": 0.1690308509457033,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.2182178902359924,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)": 0.14002800840280097,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)": 0.14586499149789456,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.2182178902359924,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()": 0.14002800840280097,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)": 0.14586499149789456,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()": 0.14002800840280097,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()": 0.15617376188860607,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()": 0.2581988897471611,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()": 0.15617376188860607,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#BoundaryAttribute(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#BoundarySizeVisitor()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#getSize()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$Characterization#Characterization()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()": 0.14586499149789456,
        "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)": 0.14586499149789456,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#RegionFactory()": 0.18569533817705186,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#RegionFactory$DifferenceMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#RegionFactory$IntersectionMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#RegionFactory$NodesCleaner(org.apache.commons.math3.geometry.partitioning.RegionFactory)": 0.18569533817705186,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#RegionFactory$UnionMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#RegionFactory$XorMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$Side#Side(java.lang.String,int)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#AVLTree()": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)": 0.0,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getLargest()": 0.0,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotLarger(java.lang.Comparable)": 0.0,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#size()": 0.0,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#AVLTree$Node(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,java.lang.Comparable,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()": 0.24253562503633297,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getPrevious()": 0.0,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()": 0.22360679774997896,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()": 0.20851441405707477,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#size()": 0.0,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#AVLTree$Skew(java.lang.String,int)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#OrderedTuple(double[])": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#computeLSB(long)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#computeMSB(long)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getComponents()": 0,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#hashCode()": 0,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)": 0.22941573387056174,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)": 0.22941573387056174,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.019014018499356047,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.026602896148920738,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.11322770341445956,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.11547005383792514,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.06788442333021306,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.059028133610095526,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.125,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.02801659073402629,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.12403473458920847,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.1270001270001905,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.061662641597820735,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.04481107149482209,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.05547001962252291,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.05547001962252291,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.14586499149789456,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0574484989621426,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.05698028822981897,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.02796177442102841,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.14744195615489714,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.14433756729740646,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.16666666666666666,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.03500700210070024,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-33": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.06097107608496923,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.05076730825668096,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.14433756729740646,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.18569533817705186,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.18569533817705186,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.06788442333021306,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.06311944030978031,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.06757373783994859,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.0574484989621426,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.15617376188860607,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.06726727939963124,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.0574484989621426,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.0642824346533225,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.06757373783994859,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.05555555555555555,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.06950480468569159,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.07198157507486945,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.0854357657716761,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.10101525445522107,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.09128709291752768,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.10153461651336192,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.1125087900926024,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.06375767130633382,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.07035975447302918,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.1270001270001905,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.11547005383792514,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.1,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.0545544725589981,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.0575435337648436,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.05463583647081531,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.04499212706658475,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.05360562674188974,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.125,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.054717565516458275,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 0.054717565516458275,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 0.05555555555555555,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 0.054717565516458275,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 0.09016696346674323,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.09016696346674323,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double)": 0.10153461651336192,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double,boolean)": 0.10153461651336192,
        "org.apache.commons.math3.optimization$PointValuePair#getPoint()": 0.11785113019775793,
        "org.apache.commons.math3.optimization$PointValuePair#getPointRef()": 0.0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#AbstractLinearOptimizer()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getConstraints()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getFunction()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getGoalType()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getIterations()": 0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getMaxIterations()": 0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#incrementIterationsCounter()": 0.21320071635561041,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#optimize(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#restrictToNonNegative()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#setMaxIterations(int)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(double[],double,org.apache.commons.math3.optimization.linear.Relationship,double[],double)": 0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(double[],org.apache.commons.math3.optimization.linear.Relationship,double)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(org.apache.commons.math3.linear.RealVector,double,org.apache.commons.math3.optimization.linear.Relationship,org.apache.commons.math3.linear.RealVector,double)": 0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.optimization.linear.Relationship,double)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getCoefficients()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getRelationship()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getValue()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#hashCode()": 0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#LinearObjectiveFunction(double[],double)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#LinearObjectiveFunction(org.apache.commons.math3.linear.RealVector,double)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getCoefficients()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getConstantTerm()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getValue(double[])": 0.22360679774997896,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getValue(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#hashCode()": 0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$NoFeasibleSolutionException#NoFeasibleSolutionException()": 0.0,
        "org.apache.commons.math3.optimization.linear$Relationship#<clinit>()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$Relationship#Relationship(java.lang.String,int,java.lang.String)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$Relationship#oppositeRelationship()": 0.4472135954999579,
        "org.apache.commons.math3.optimization.linear$Relationship#toString()": 0,
        "org.apache.commons.math3.optimization.linear$Relationship$1#<clinit>()": 0.4472135954999579,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#SimplexSolver()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#SimplexSolver(double,int)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau)": 0.21320071635561041,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#doOptimize()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau)": 0.21320071635561041,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau,int)": 0.21320071635561041,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau)": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double)": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double,int)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#copyArray(double[],double[])": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#createTableau(boolean)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#divideRow(int,double)": 0.21320071635561041,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#dropPhase1Objective()": 0.21320071635561041,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getArtificialVariableOffset()": 0.20851441405707477,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getBasicRow(int)": 0.21320071635561041,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getData()": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getEntry(int,int)": 0.2,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getHeight()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getInvertedCoefficientSum(org.apache.commons.math3.linear.RealVector)": 0.25,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumArtificialVariables()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumDecisionVariables()": 0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumObjectiveFunctions()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumSlackVariables()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getOriginalNumDecisionVariables()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getRhsOffset()": 0.20851441405707477,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getSlackVariableOffset()": 0.2,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getSolution()": 0.22360679774997896,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getWidth()": 0.2,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#hashCode()": 0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#initializeColumnLabels()": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#isOptimal()": 0.20412414523193154,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#normalize(org.apache.commons.math3.optimization.linear.LinearConstraint)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#normalizeConstraints(java.util.Collection)": 0.1889822365046136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#setEntry(int,int,double)": 0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#subtractRow(int,int,double)": 0.21320071635561041,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.optimization.linear$UnboundedSolutionException#UnboundedSolutionException()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": 0.047036043419179864,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.01905885887736274,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.02673567435205868,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.04735137238103784,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.03760887072223008,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.07293249574894728,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#getKey()": 0.07905694150420949,
        "org.apache.commons.math3.util$Pair#getValue()": 0.0,
        "org.apache.commons.math3.util$Pair#hashCode()": 0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.035311227577322434,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.19245008972987526,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.20412414523193154,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.18569533817705186,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.047565149415449405,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-34": {
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.genetics$AbstractListChromosome#AbstractListChromosome(java.lang.Object[])": 0.0,
        "org.apache.commons.math3.genetics$AbstractListChromosome#AbstractListChromosome(java.util.List)": 0.19611613513818404,
        "org.apache.commons.math3.genetics$AbstractListChromosome#getLength()": 0.0,
        "org.apache.commons.math3.genetics$AbstractListChromosome#getRepresentation()": 0.0,
        "org.apache.commons.math3.genetics$AbstractListChromosome#toString()": 0.0,
        "org.apache.commons.math3.genetics$BinaryChromosome#BinaryChromosome(java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.genetics$BinaryChromosome#BinaryChromosome(java.util.List)": 0.2886751345948129,
        "org.apache.commons.math3.genetics$BinaryChromosome#checkValidity(java.util.List)": 0.2672612419124244,
        "org.apache.commons.math3.genetics$BinaryChromosome#isSame(org.apache.commons.math3.genetics.Chromosome)": 0.0,
        "org.apache.commons.math3.genetics$BinaryChromosome#randomBinaryRepresentation(int)": 0.30151134457776363,
        "org.apache.commons.math3.genetics$Chromosome#Chromosome()": 0.1796053020267749,
        "org.apache.commons.math3.genetics$Chromosome#compareTo(org.apache.commons.math3.genetics.Chromosome)": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#findSameChromosome(org.apache.commons.math3.genetics.Population)": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#getFitness()": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#isSame(org.apache.commons.math3.genetics.Chromosome)": 0,
        "org.apache.commons.math3.genetics$Chromosome#searchForFitnessUpdate(org.apache.commons.math3.genetics.Population)": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#<clinit>()": 0.25,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#GeneticAlgorithm(org.apache.commons.math3.genetics.CrossoverPolicy,double,org.apache.commons.math3.genetics.MutationPolicy,double,org.apache.commons.math3.genetics.SelectionPolicy)": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#evolve(org.apache.commons.math3.genetics.Population,org.apache.commons.math3.genetics.StoppingCondition)": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getCrossoverPolicy()": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getCrossoverRate()": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getGenerationsEvolved()": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getMutationPolicy()": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getMutationRate()": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getRandomGenerator()": 0.25,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getSelectionPolicy()": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#nextGeneration(org.apache.commons.math3.genetics.Population)": 0.0,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#setRandomGenerator(org.apache.commons.math3.random.RandomGenerator)": 0,
        "org.apache.commons.math3.genetics$InvalidRepresentationException#InvalidRepresentationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#ListPopulation(int)": 0.25,
        "org.apache.commons.math3.genetics$ListPopulation#ListPopulation(java.util.List,int)": 0.20851441405707477,
        "org.apache.commons.math3.genetics$ListPopulation#addChromosome(org.apache.commons.math3.genetics.Chromosome)": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#addChromosomes(java.util.Collection)": 0.5773502691896258,
        "org.apache.commons.math3.genetics$ListPopulation#getChromosomeList()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#getChromosomes()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#getFittestChromosome()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#getPopulationLimit()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#getPopulationSize()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#iterator()": 0.7071067811865475,
        "org.apache.commons.math3.genetics$ListPopulation#setChromosomes(java.util.List)": 0,
        "org.apache.commons.math3.genetics$ListPopulation#setPopulationLimit(int)": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#toString()": 0.0,
        "org.apache.commons.math3.random$JDKRandomGenerator#JDKRandomGenerator()": 0.17149858514250882,
        "org.apache.commons.math3.random$JDKRandomGenerator#setSeed(int)": 0.0,
        "org.apache.commons.math3.random$JDKRandomGenerator#setSeed(int[])": 0
    },
    "Math-35": {
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception.util$ArgUtils#ArgUtils()": 0,
        "org.apache.commons.math3.exception.util$ArgUtils#flatten(java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#ExceptionContext(java.lang.Throwable)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeContext(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeMessages(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getKeys()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale,java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getThrowable()": 0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getValue(java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#nonSerializableReplacement(java.lang.Object)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#readObject(java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeContext(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeMessages(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#setValue(java.lang.String,java.lang.Object)": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)": 0.0,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getSourceString()": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#Chromosome()": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#compareTo(org.apache.commons.math3.genetics.Chromosome)": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#findSameChromosome(org.apache.commons.math3.genetics.Population)": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#getFitness()": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#isSame(org.apache.commons.math3.genetics.Chromosome)": 0,
        "org.apache.commons.math3.genetics$Chromosome#searchForFitnessUpdate(org.apache.commons.math3.genetics.Population)": 0.0,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#ElitisticListPopulation(int,double)": 0.31622776601683794,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#ElitisticListPopulation(java.util.List,int,double)": 0.4472135954999579,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#getElitismRate()": 0.0,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#nextGeneration()": 0.0,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#setElitismRate(double)": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#ListPopulation(int)": 0.31622776601683794,
        "org.apache.commons.math3.genetics$ListPopulation#ListPopulation(java.util.List,int)": 0.3779644730092272,
        "org.apache.commons.math3.genetics$ListPopulation#addChromosome(org.apache.commons.math3.genetics.Chromosome)": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#getChromosomes()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#getFittestChromosome()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#getPopulationLimit()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#getPopulationSize()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#iterator()": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#setChromosomes(java.util.List)": 0,
        "org.apache.commons.math3.genetics$ListPopulation#setPopulationLimit(int)": 0,
        "org.apache.commons.math3.genetics$ListPopulation#toString()": 0
    },
    "Math-36": {},
    "Math-37": {},
    "Math-38": {},
    "Math-39": {},
    "Math-4": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)": 0.21566554640687682,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)": 0.21566554640687682,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#revertSelf()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()": 0.19611613513818404,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()": 0.1873171623163388,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)": 0.1873171623163388,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormSq()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getSpace()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()": 0.1873171623163388,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getZero()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#hashCode()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isInfinite()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#negate()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#toString()": 0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#toString(java.text.NumberFormat)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.1336306209562122,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.23570226039551587,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.20412414523193154,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.1889822365046136,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.25,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getOrigin()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.25,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.1336306209562122,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": 0.25,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.2672612419124244,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.25,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)": 0.2672612419124244,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()": 0.05538487756217113,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)": 0.05538487756217113,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.11470786693528087,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.12309149097933272,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0.10101525445522107,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()": 0.09128709291752768,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()": 0.13130643285972254,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)": 0.10314212462587934,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toArray()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString(java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(double,double,double,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.10206207261596577,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOriginOffset()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.12126781251816648,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.10206207261596577,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#revertSelf()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#setOriginOffset(double)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": 0.11785113019775793,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeSpace()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#Line$LineTransform(java.awt.geom.AffineTransform)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.25,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.23570226039551587,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)": 0.2672612419124244,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()": 0.08391813582966891,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)": 0.08391813582966891,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double[])": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormSq()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getSpace()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()": 0.08391813582966891,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()": 0.08391813582966891,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getZero()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isInfinite()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#negate()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(org.apache.commons.math3.geometry.Vector)": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toArray()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toString()": 0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toString(java.text.NumberFormat)": 0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.19245008972987526,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])": 0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#AbstractRegion$BoundaryBuilder()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.19245008972987526,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()": 0.09712858623572641,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()": 0.11322770341445956,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)": 0.1889822365046136,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)": 0.19611613513818404,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()": 0.0,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.0237758517182737,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.015426662418507235,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.07254762501100116,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.03946685189819292,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.035267280792929914,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.07856742013183861,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.08111071056538127,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.033482476509121256,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.033482476509121256,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.03462716805322218,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.03434014098717226,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.01606645980340262,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#convolve(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.08219949365267865,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.08111071056538127,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#scale(double,double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#scaleInPlace(double,double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.019316685232156395,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-40": {},
    "Math-41": {},
    "Math-42": {},
    "Math-43": {},
    "Math-44": {},
    "Math-45": {},
    "Math-46": {},
    "Math-47": {},
    "Math-48": {},
    "Math-49": {},
    "Math-5": {
        "org.apache.commons.math3.complex$Complex#<clinit>()": 0.06835859270246633,
        "org.apache.commons.math3.complex$Complex#Complex(double)": 0.0,
        "org.apache.commons.math3.complex$Complex#Complex(double,double)": 0.06835859270246633,
        "org.apache.commons.math3.complex$Complex#abs()": 0.0,
        "org.apache.commons.math3.complex$Complex#acos()": 0.0,
        "org.apache.commons.math3.complex$Complex#add(double)": 0.0,
        "org.apache.commons.math3.complex$Complex#add(org.apache.commons.math3.complex.Complex)": 0.0,
        "org.apache.commons.math3.complex$Complex#asin()": 0.0,
        "org.apache.commons.math3.complex$Complex#atan()": 0.0,
        "org.apache.commons.math3.complex$Complex#conjugate()": 0.0,
        "org.apache.commons.math3.complex$Complex#cos()": 0.0,
        "org.apache.commons.math3.complex$Complex#cosh()": 0.0,
        "org.apache.commons.math3.complex$Complex#createComplex(double,double)": 0.0,
        "org.apache.commons.math3.complex$Complex#divide(double)": 0.0,
        "org.apache.commons.math3.complex$Complex#divide(org.apache.commons.math3.complex.Complex)": 0.0,
        "org.apache.commons.math3.complex$Complex#equals(java.lang.Object)": 0.1259881576697424,
        "org.apache.commons.math3.complex$Complex#exp()": 0.0,
        "org.apache.commons.math3.complex$Complex#getArgument()": 0.0,
        "org.apache.commons.math3.complex$Complex#getField()": 0,
        "org.apache.commons.math3.complex$Complex#getImaginary()": 0.0,
        "org.apache.commons.math3.complex$Complex#getReal()": 0.0,
        "org.apache.commons.math3.complex$Complex#hashCode()": 0.0,
        "org.apache.commons.math3.complex$Complex#isInfinite()": 0.0,
        "org.apache.commons.math3.complex$Complex#isNaN()": 0.0,
        "org.apache.commons.math3.complex$Complex#log()": 0.0,
        "org.apache.commons.math3.complex$Complex#multiply(double)": 0.0,
        "org.apache.commons.math3.complex$Complex#multiply(int)": 0.0,
        "org.apache.commons.math3.complex$Complex#multiply(org.apache.commons.math3.complex.Complex)": 0.0,
        "org.apache.commons.math3.complex$Complex#negate()": 0.0,
        "org.apache.commons.math3.complex$Complex#nthRoot(int)": 0.0,
        "org.apache.commons.math3.complex$Complex#pow(double)": 0.0,
        "org.apache.commons.math3.complex$Complex#pow(org.apache.commons.math3.complex.Complex)": 0.0,
        "org.apache.commons.math3.complex$Complex#readResolve()": 0.0,
        "org.apache.commons.math3.complex$Complex#reciprocal()": 0.4082482904638631,
        "org.apache.commons.math3.complex$Complex#sin()": 0.0,
        "org.apache.commons.math3.complex$Complex#sinh()": 0.0,
        "org.apache.commons.math3.complex$Complex#sqrt()": 0.0,
        "org.apache.commons.math3.complex$Complex#sqrt1z()": 0.0,
        "org.apache.commons.math3.complex$Complex#subtract(double)": 0.0,
        "org.apache.commons.math3.complex$Complex#subtract(org.apache.commons.math3.complex.Complex)": 0.0,
        "org.apache.commons.math3.complex$Complex#tan()": 0.0,
        "org.apache.commons.math3.complex$Complex#tanh()": 0.0,
        "org.apache.commons.math3.complex$Complex#toString()": 1.0,
        "org.apache.commons.math3.complex$Complex#valueOf(double)": 0,
        "org.apache.commons.math3.complex$Complex#valueOf(double,double)": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0
    },
    "Math-50": {},
    "Math-6": {
        "org.apache.commons.math3.analysis.function$Sinc#Sinc()": 0.03779644730092272,
        "org.apache.commons.math3.analysis.function$Sinc#Sinc(boolean)": 0.03509312031717982,
        "org.apache.commons.math3.analysis.function$Sinc#derivative()": 0,
        "org.apache.commons.math3.analysis.function$Sinc#value(double)": 0.0472455591261534,
        "org.apache.commons.math3.analysis.function$Sinc#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double)": 0.013041013273932527,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)": 0.012741179785940639,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)": 0.012407291674636627,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)": 0.012741179785940639,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()": 0.013135173437318345,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()": 0.02727723627949905,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()": 0.013167016328743083,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()": 0.012770236105969923,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMaxEvaluations()": 0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()": 0.012770236105969923,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()": 0.013396595553856082,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()": 0.014204774743178402,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()": 0.012655186588813844,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isSequence(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.012626906806902633,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.012655186588813844,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyInterval(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)": 0.014368053378451954,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver()": 0.03340765523905305,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double)": 0.016511454667095662,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double,double,double)": 0,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#brent(double,double,double,double)": 0.016769461772638442,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#doSolve()": 0.016325578711208478,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#UnivariateSolverUtils()": 0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isSequence(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#midpoint(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)": 0.011857800136281224,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)": 0.014204774743178402,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(double,double,double,double)": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(org.apache.commons.math3.exception.util.Localizable,double,double,double,double,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getFHi()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#getFLo()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#getHi()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#getLo()": 0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": 0.0,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 0.1275886359706852,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.14040237001200886,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.13830715153048476,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.49709581280096005,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 0.39365426504409834,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 0.49709581280096005,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 0.5111012519999519,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 0.2502444988359418,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.21327646718989116,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.24209101306752098,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.02536731447159205,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 0.5111012519999519,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 0.25319607421216217,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.43229281327817626,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.29095718698132317,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.20965696734438366,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.20865621238292043,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.5111012519999519,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.5111012519999519,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.5111012519999519,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.20965696734438366,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.14254042506742676,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 0.1925822216299108,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.14498703201669916,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.1422606594884729,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.1580521559387199,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.17027265454568832,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.13595848696569446,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.1598083449102484,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.14652074116239164,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.13606721028332178,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.1464864207299484,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.1422606594884729,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.20915479424640082,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.12620669756975597,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.15229649210939905,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 0.017022663741204886,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 0.0200320770053751,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.022587697572631283,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.024397501823713332,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.1523326004989225,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.1664500757152958,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.01389425035941821,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.028409549486356805,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.021128856368212913,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.02639818386742273,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": 0.026020147394144395,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": 0.025540472211939846,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.01844277783908294,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": 0.026082026547865053,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.017857142857142856,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": 0.026020147394144395,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.021128856368212913,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.028409549486356805,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.03241018617760822,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.20573779994945587,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.20573779994945587,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.20865621238292043,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])": 0.026860765467512676,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)": 0.026593487520457093,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)": 0.02699746235780194,
        "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#copy()": 0.027639499641139105,
        "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#ensureZero(double)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()": 0.02639818386742273,
        "org.apache.commons.math3.linear$DiagonalMatrix#getData()": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()": 0.028988551782622423,
        "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)": 0.026793191107712163,
        "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()": 0.02627034687463669,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)": 0.028903665650804,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.02817180849095055,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])": 0.028988551782622423,
        "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)": 0.02727723627949905,
        "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[])": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[],double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.3437619363855793,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#cdiv(double,double,double,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectors(double[][])": 0.34126181639496755,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getD()": 0.4660273245009,
        "org.apache.commons.math3.linear$EigenDecomposition#getDeterminant()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getEigenvector(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalue(int)": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalues()": 0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalue(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getSolver()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getSquareRoot()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getV()": 0.4374088826398532,
        "org.apache.commons.math3.linear$EigenDecomposition#getVT()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#hasComplexEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToSchur(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)": 0.35160542320387156,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#EigenDecomposition$Solver(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#getInverse()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#isNonSingular()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$LUDecomposition#LUDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.020261022461827694,
        "org.apache.commons.math3.linear$LUDecomposition#LUDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0.020145574100634507,
        "org.apache.commons.math3.linear$LUDecomposition#getDeterminant()": 0.0,
        "org.apache.commons.math3.linear$LUDecomposition#getL()": 0.0,
        "org.apache.commons.math3.linear$LUDecomposition#getP()": 0.0,
        "org.apache.commons.math3.linear$LUDecomposition#getPivot()": 0.0,
        "org.apache.commons.math3.linear$LUDecomposition#getSolver()": 0.021128856368212913,
        "org.apache.commons.math3.linear$LUDecomposition#getU()": 0.0,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#LUDecomposition$Solver(double[][],int[],boolean)": 0.021128856368212913,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#getInverse()": 0.0,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#isNonSingular()": 0.0,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": 0.025031308716087945,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 0.1258156892005647,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.4193139346887673,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.12987675572814136,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.1333223607510547,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.18105317150097794,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.1297821967380098,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.26519741765271837,
        "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 0.5185629788417315,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 0.34893157889942655,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.1610380005360682,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 0.230556167081694,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 0.33881546358946923,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)": 0.33407655239053047,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": 0.0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": 0.12478414765452428,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.1258156892005647,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.1268698210340423,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 0.1268698210340423,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": 0.12750816378609772,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 0.1258156892005647,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 0.1268698210340423,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.11131338892485422,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0,
        "org.apache.commons.math3.linear$RealVector#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#copy()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": 0.0,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": 0.0,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.12524400847428205,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 0.12524400847428205,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 0.12620669756975597,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 0.12524400847428205,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.linear$SingularMatrixException#SingularMatrixException()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#TriDiagonalTransformer(org.apache.commons.math3.linear.RealMatrix)": 0.3295310813728101,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getHouseholderVectorsRef()": 0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getMainDiagonalRef()": 0.34893157889942655,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQ()": 0.33881546358946923,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQT()": 0.33642097801219245,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getSecondaryDiagonalRef()": 0.34893157889942655,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getT()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#transform()": 0.33178046640285663,
        "org.apache.commons.math3.optim$AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)": 0.21556199545914564,
        "org.apache.commons.math3.optim$AbstractConvergenceChecker#getAbsoluteThreshold()": 0.24165612634006073,
        "org.apache.commons.math3.optim$AbstractConvergenceChecker#getRelativeThreshold()": 0.24003967925959163,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#BaseMultivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.3592106040535498,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#checkParameters()": 0.3634218921558155,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getLowerBound()": 0.4,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getStartPoint()": 0.401147778542877,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getUpperBound()": 0.40703866324070626,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.3634218921558155,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.3634218921558155,
        "org.apache.commons.math3.optim$BaseOptimizer#BaseOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.34740416688982556,
        "org.apache.commons.math3.optim$BaseOptimizer#getConvergenceChecker()": 0.40824829046386296,
        "org.apache.commons.math3.optim$BaseOptimizer#getEvaluations()": 0.21170244960998524,
        "org.apache.commons.math3.optim$BaseOptimizer#getIterations()": 1.0,
        "org.apache.commons.math3.optim$BaseOptimizer#getMaxEvaluations()": 0.03706246583305506,
        "org.apache.commons.math3.optim$BaseOptimizer#getMaxIterations()": 0,
        "org.apache.commons.math3.optim$BaseOptimizer#incrementEvaluationCount()": 0.39009474880274697,
        "org.apache.commons.math3.optim$BaseOptimizer#incrementIterationCount()": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.35120936436995154,
        "org.apache.commons.math3.optim$BaseOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.35120936436995154,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxEvalCallback#BaseOptimizer$MaxEvalCallback()": 0.34740416688982556,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxEvalCallback#trigger(int)": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxIterCallback#BaseOptimizer$MaxIterCallback()": 0.34740416688982556,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxIterCallback#trigger(int)": 0,
        "org.apache.commons.math3.optim$InitialGuess#InitialGuess(double[])": 0.3879917968315853,
        "org.apache.commons.math3.optim$InitialGuess#getInitialGuess()": 0.3890390100637099,
        "org.apache.commons.math3.optim$MaxEval#MaxEval(int)": 0.3741657386773941,
        "org.apache.commons.math3.optim$MaxEval#getMaxEval()": 0.3751046755079703,
        "org.apache.commons.math3.optim$MaxEval#unlimited()": 0,
        "org.apache.commons.math3.optim$MaxIter#MaxIter(int)": 0.0,
        "org.apache.commons.math3.optim$MaxIter#getMaxIter()": 0.0,
        "org.apache.commons.math3.optim$MaxIter#unlimited()": 0,
        "org.apache.commons.math3.optim$PointValuePair#PointValuePair(double[],double)": 0.4750096619072153,
        "org.apache.commons.math3.optim$PointValuePair#PointValuePair(double[],double,boolean)": 0.4750096619072153,
        "org.apache.commons.math3.optim$PointValuePair#getPoint()": 0.5493502655735357,
        "org.apache.commons.math3.optim$PointValuePair#getPointRef()": 0.2807449625374386,
        "org.apache.commons.math3.optim$PointValuePair#writeReplace()": 0.0,
        "org.apache.commons.math3.optim$PointValuePair$DataTransferObject#PointValuePair$DataTransferObject(double[],double)": 0.0,
        "org.apache.commons.math3.optim$PointValuePair$DataTransferObject#readResolve()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#PointVectorValuePair(double[],double[])": 0.03857583749052298,
        "org.apache.commons.math3.optim$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)": 0.03857583749052298,
        "org.apache.commons.math3.optim$PointVectorValuePair#getPoint()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#getPointRef()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#getValue()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#getValueRef()": 0.036369648372665396,
        "org.apache.commons.math3.optim$PointVectorValuePair#writeReplace()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair$DataTransferObject#PointVectorValuePair$DataTransferObject(double[],double[])": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair$DataTransferObject#readResolve()": 0.0,
        "org.apache.commons.math3.optim$SimpleBounds#SimpleBounds(double[],double[])": 0.4364357804719848,
        "org.apache.commons.math3.optim$SimpleBounds#getLower()": 0.441054277135977,
        "org.apache.commons.math3.optim$SimpleBounds#getUpper()": 0.441054277135977,
        "org.apache.commons.math3.optim$SimpleBounds#unbounded(int)": 0.48304589153964794,
        "org.apache.commons.math3.optim$SimpleValueChecker#SimpleValueChecker(double,double)": 0.2624453295839119,
        "org.apache.commons.math3.optim$SimpleValueChecker#SimpleValueChecker(double,double,int)": 0.0,
        "org.apache.commons.math3.optim$SimpleValueChecker#converged(int,org.apache.commons.math3.optim.PointValuePair,org.apache.commons.math3.optim.PointValuePair)": 0.26892643710023856,
        "org.apache.commons.math3.optim$SimpleVectorValueChecker#SimpleVectorValueChecker(double,double)": 0.03340765523905305,
        "org.apache.commons.math3.optim$SimpleVectorValueChecker#SimpleVectorValueChecker(double,double,int)": 0.0,
        "org.apache.commons.math3.optim$SimpleVectorValueChecker#converged(int,org.apache.commons.math3.optim.PointVectorValuePair,org.apache.commons.math3.optim.PointVectorValuePair)": 0.03571428571428571,
        "org.apache.commons.math3.optim.nonlinear.scalar$GoalType#<clinit>()": 0.4167608663643759,
        "org.apache.commons.math3.optim.nonlinear.scalar$GoalType#GoalType(java.lang.String,int)": 0.4167608663643759,
        "org.apache.commons.math3.optim.nonlinear.scalar$GradientMultivariateOptimizer#GradientMultivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar$GradientMultivariateOptimizer#computeObjectiveGradient(double[])": 0.052414241836095915,
        "org.apache.commons.math3.optim.nonlinear.scalar$GradientMultivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar$GradientMultivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#MultivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.4562105641233377,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#computeObjectiveValue(double[])": 0.5636214801906779,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#getGoalType()": 0.48414529977050813,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.4581897949526569,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.4581897949526569,
        "org.apache.commons.math3.optim.nonlinear.scalar$ObjectiveFunction#ObjectiveFunction(org.apache.commons.math3.analysis.MultivariateFunction)": 0.5208340021397525,
        "org.apache.commons.math3.optim.nonlinear.scalar$ObjectiveFunction#getObjectiveFunction()": 0.5393308788692645,
        "org.apache.commons.math3.optim.nonlinear.scalar$ObjectiveFunctionGradient#ObjectiveFunctionGradient(org.apache.commons.math3.analysis.MultivariateVectorFunction)": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar$ObjectiveFunctionGradient#getObjectiveFunctionGradient()": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker)": 0.05698028822981897,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#checkParameters()": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#doOptimize()": 0.052414241836095915,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#findUpperBound(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.052414241836095915,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$1#<clinit>()": 0.052414241836095915,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$Formula#<clinit>()": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$Formula#NonLinearConjugateGradientOptimizer$Formula(java.lang.String,int)": 0.050507627227610534,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$IdentityPreconditioner#NonLinearConjugateGradientOptimizer$IdentityPreconditioner()": 0.052414241836095915,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$IdentityPreconditioner#precondition(double[],double[])": 0.0545544725589981,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$LineSearchFunction#NonLinearConjugateGradientOptimizer$LineSearchFunction(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer,double[],double[])": 0.052414241836095915,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$LineSearchFunction#value(double)": 0.052414241836095915,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#AbstractSimplex(double[])": 0.3223291856101521,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#AbstractSimplex(double[][])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#AbstractSimplex(int)": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#AbstractSimplex(int,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#build(double[])": 0.29095718698132317,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#createHypercubeSteps(int,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)": 0.29095718698132317,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#getDimension()": 0.29095718698132317,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#getPoint(int)": 0.29095718698132317,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#getPoints()": 0.29095718698132317,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#getSize()": 0.29095718698132317,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)": 0.1690308509457033,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#setPoint(int,org.apache.commons.math3.optim.PointValuePair)": 0.23904572186687872,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#setPoints(org.apache.commons.math3.optim.PointValuePair[])": 0.3086066999241838,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#CMAESOptimizer(int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean,org.apache.commons.math3.optim.ConvergenceChecker)": 0.6172133998483676,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#checkParameters()": 0.6761234037828132,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#copyColumn(org.apache.commons.math3.linear.RealMatrix,int,org.apache.commons.math3.linear.RealMatrix,int)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#diag(org.apache.commons.math3.linear.RealMatrix)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#divide(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.6875238727711586,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#doOptimize()": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#eye(int,int)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#getStatisticsDHistory()": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#getStatisticsFitnessHistory()": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#getStatisticsMeanHistory()": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#getStatisticsSigmaHistory()": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#initializeCMA(double[])": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#inverse(int[])": 0.6875238727711586,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#log(org.apache.commons.math3.linear.RealMatrix)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#max(double[])": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#max(org.apache.commons.math3.linear.RealMatrix)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#min(double[])": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#min(org.apache.commons.math3.linear.RealMatrix)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#ones(int,int)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.6304883249912805,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.6304883249912805,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#push(double[],double)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#randn(int)": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#randn1(int,int)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#repmat(org.apache.commons.math3.linear.RealMatrix,int,int)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#reverse(int[])": 0.6875238727711586,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#sequence(double,double,double)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#sortedIndices(double[])": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#sqrt(org.apache.commons.math3.linear.RealMatrix)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#square(org.apache.commons.math3.linear.RealMatrix)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#sumRows(org.apache.commons.math3.linear.RealMatrix)": 0.6875238727711586,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#triu(org.apache.commons.math3.linear.RealMatrix,int)": 0.6875238727711586,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#updateBD(double)": 0.6875238727711586,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#updateCovariance(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,int[],org.apache.commons.math3.linear.RealMatrix)": 0.6875238727711586,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,org.apache.commons.math3.linear.RealMatrix)": 0.1091089451179962,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#zeros(int,int)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$DoubleIndex#CMAESOptimizer$DoubleIndex(double,int)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$DoubleIndex#compareTo(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$DoubleIndex)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$DoubleIndex#equals(java.lang.Object)": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$DoubleIndex#hashCode()": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#CMAESOptimizer$FitnessFunction(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#isFeasible(double[])": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#penalty(double[],double[])": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#repair(double[])": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#setValueRange(double)": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#value(double[])": 0.7126966450997984,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$PopulationSize#CMAESOptimizer$PopulationSize(int)": 0.6304883249912805,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$PopulationSize#getPopulationSize()": 0.6761234037828132,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$Sigma#CMAESOptimizer$Sigma(double[])": 0.6172133998483676,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$Sigma#getSigma()": 0.6761234037828132,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(double[])": 0.3779644730092272,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(double[],double,double)": 0.3779644730092272,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(double[][])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(double[][],double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(int)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(int,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double)": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optim.PointValuePair[],double,java.util.Comparator)": 0.2857142857142857,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#iterate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)": 0.2857142857142857,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(double[])": 0.2279211529192759,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(double[],double,double,double,double)": 0.2279211529192759,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(double[][])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(double[][],double,double,double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(int)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(int,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double)": 0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#iterate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)": 0.1690308509457033,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#<clinit>()": 0.08451542547285165,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#PowellOptimizer(double,double)": 0.0944911182523068,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#PowellOptimizer(double,double,double,double)": 0.1336306209562122,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#PowellOptimizer(double,double,double,double,org.apache.commons.math3.optim.ConvergenceChecker)": 0.08451542547285165,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#PowellOptimizer(double,double,org.apache.commons.math3.optim.ConvergenceChecker)": 0.0944911182523068,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#checkParameters()": 0.08451542547285165,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#doOptimize()": 0.08451542547285165,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#newPointAndDirection(double[],double[],double)": 0.0944911182523068,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer$LineSearch#PowellOptimizer$LineSearch(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer,double,double)": 0.08451542547285165,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer$LineSearch#search(double[],double[])": 0.0944911182523068,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer$LineSearch$1#value(double)": 0.0944911182523068,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#SimplexOptimizer(double,double)": 0.2645751311064591,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#SimplexOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.2807449625374386,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#checkParameters()": 0.2807449625374386,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#doOptimize()": 0.2807449625374386,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.2807449625374386,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.2807449625374386,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer$1#value(double[])": 0.29095718698132317,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer$2#compare(org.apache.commons.math3.optim.PointValuePair,org.apache.commons.math3.optim.PointValuePair)": 0.29095718698132317,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#JacobianMultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.03760887072223008,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#computeJacobian(double[])": 0.03940552031195503,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunction#ModelFunction(org.apache.commons.math3.analysis.MultivariateVectorFunction)": 0.038778336716474064,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunction#getModelFunction()": 0.038778336716474064,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunctionJacobian#ModelFunctionJacobian(org.apache.commons.math3.analysis.MultivariateMatrixFunction)": 0.038984058779272523,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunctionJacobian#getModelFunctionJacobian()": 0.038984058779272523,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#MultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.03760887072223008,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#checkParameters()": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#computeObjectiveValue(double[])": 0.038778336716474064,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getTarget()": 0.03857583749052298,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getTargetSize()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getWeight()": 0.038778336716474064,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector$Target#Target(double[])": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector$Target#getTarget()": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#Weight(double[])": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)": 0,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#getWeight()": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.03760887072223008,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeCost(double[])": 0.04052204492365539,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeResiduals(double[])": 0.038984058779272523,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeSigma(double[],double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])": 0.03940552031195503,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getChiSquare()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getRMS()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getWeightSquareRoot()": 0.024000768036865964,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#setCost(double)": 0.04052204492365539,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)": 0.038376477822666816,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,org.apache.commons.math3.optim.ConvergenceChecker)": 0.03340765523905305,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#GaussNewtonOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.03857583749052298,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#checkParameters()": 0.03394221166510653,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#doOptimize()": 0.03394221166510653,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()": 0.02817180849095055,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)": 0.0236227795630767,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#checkParameters()": 0.023809523809523808,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])": 0.036369648372665396,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])": 0.024000768036865964,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#doOptimize()": 0.023809523809523808,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#qTy(double[])": 0.024000768036865964,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.024000768036865964,
        "org.apache.commons.math3.optim.univariate$BracketFinder#BracketFinder()": 0.0629940788348712,
        "org.apache.commons.math3.optim.univariate$BracketFinder#BracketFinder(double,int)": 0.0629940788348712,
        "org.apache.commons.math3.optim.univariate$BracketFinder#eval(org.apache.commons.math3.analysis.UnivariateFunction,double)": 0.0668153104781061,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getEvaluations()": 0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getFHi()": 0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getFLo()": 0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getFMid()": 0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getHi()": 0.0668153104781061,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getLo()": 0.0668153104781061,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getMaxEvaluations()": 0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getMid()": 0.07715167498104596,
        "org.apache.commons.math3.optim.univariate$BracketFinder#search(org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optim.nonlinear.scalar.GoalType,double,double)": 0.0668153104781061,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#<clinit>()": 0.042257712736425826,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#BrentOptimizer(double,double)": 0.0,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#BrentOptimizer(double,double,org.apache.commons.math3.optim.ConvergenceChecker)": 0.042257712736425826,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#best(org.apache.commons.math3.optim.univariate.UnivariatePointValuePair,org.apache.commons.math3.optim.univariate.UnivariatePointValuePair,boolean)": 0.0472455591261534,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#doOptimize()": 0.045834924851410566,
        "org.apache.commons.math3.optim.univariate$SearchInterval#SearchInterval(double,double)": 0.0,
        "org.apache.commons.math3.optim.univariate$SearchInterval#SearchInterval(double,double,double)": 0.0445435403187374,
        "org.apache.commons.math3.optim.univariate$SearchInterval#getMax()": 0.0445435403187374,
        "org.apache.commons.math3.optim.univariate$SearchInterval#getMin()": 0.0445435403187374,
        "org.apache.commons.math3.optim.univariate$SearchInterval#getStartValue()": 0.0445435403187374,
        "org.apache.commons.math3.optim.univariate$SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double)": 0.07142857142857142,
        "org.apache.commons.math3.optim.univariate$SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double,int)": 0.0,
        "org.apache.commons.math3.optim.univariate$SimpleUnivariateValueChecker#converged(int,org.apache.commons.math3.optim.univariate.UnivariatePointValuePair,org.apache.commons.math3.optim.univariate.UnivariatePointValuePair)": 0.07142857142857142,
        "org.apache.commons.math3.optim.univariate$UnivariateObjectiveFunction#UnivariateObjectiveFunction(org.apache.commons.math3.analysis.UnivariateFunction)": 0.043355498476206,
        "org.apache.commons.math3.optim.univariate$UnivariateObjectiveFunction#getObjectiveFunction()": 0.043355498476206,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#UnivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.042257712736425826,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#computeObjectiveValue(double)": 0.045834924851410566,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#getGoalType()": 0.045834924851410566,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#getMax()": 0.045834924851410566,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#getMin()": 0.045834924851410566,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#getStartValue()": 0.045834924851410566,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.043355498476206,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.043355498476206,
        "org.apache.commons.math3.optim.univariate$UnivariatePointValuePair#UnivariatePointValuePair(double,double)": 0.045834924851410566,
        "org.apache.commons.math3.optim.univariate$UnivariatePointValuePair#getPoint()": 0.0472455591261534,
        "org.apache.commons.math3.optim.univariate$UnivariatePointValuePair#getValue()": 0.045834924851410566,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": 0.0863566391276138,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": 0.0863566391276138,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.1475422227126635,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 0.29095718698132317,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)": 0,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.23979625973207228,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": 0.4364357804719848,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": 0.2979355690895435,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 0.23979625973207228,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 0.2869984013336701,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 0.28829998806257884,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.12412907553046826,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": 0.10691041994400663,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.0896350003375318,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.11193398793189654,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.10450907442146998,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.24525573579398632,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.1320916373367653,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.1698287980288617,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.1610380005360682,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.10169856723618427,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0901898804739672,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.16951988522098477,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.11494442702761563,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.008625819491779428,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.12400612109320948,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.15281246137553164,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.15281246137553164,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.025310373177627687,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.15827827107881998,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.15676361163220498,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.08209507430231829,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.011116602147330214,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.17500681268153892,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.17500681268153892,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.17500681268153892,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.17500681268153892,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.09100315103865801,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.08639187954496622,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.09100315103865801,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.01531589335482564,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.014656833601216487,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 0.17847795375689088,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.3353353533357125,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.02786391062876764,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 0.18661690879115475,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#resetCount()": 0.183229750550533,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": 0.18650096164806276,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.025031308716087945,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.020619652471058063,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.4722250688807642,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#scale(double,double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#scaleInPlace(double,double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.10061677063583065,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.2316027779265504,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#getFirst()": 0.0,
        "org.apache.commons.math3.util$Pair#getKey()": 0.2561358820277077,
        "org.apache.commons.math3.util$Pair#getSecond()": 0.0,
        "org.apache.commons.math3.util$Pair#getValue()": 0.3076935564410225,
        "org.apache.commons.math3.util$Pair#hashCode()": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.09341609898779205,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.28931878117892235,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.02817180849095055,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.12702744766889426,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.10799366256478468,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-7": {
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double)": 0.06950480468569159,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()": 0.12309149097933272,
        "org.apache.commons.math3.analysis.solvers$AllowedSolution#AllowedSolution(java.lang.String,int)": 0.12309149097933272,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)": 0.06788442333021306,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)": 0.06608186004550898,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)": 0.06788442333021306,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()": 0.07001400420140048,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()": 0.07018624063435965,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()": 0.06804138174397717,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMaxEvaluations()": 0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()": 0.06804138174397717,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()": 0.07142857142857142,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()": 0.07580980435789034,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()": 0.06741998624632421,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isSequence(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.06726727939963124,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.07624928516630233,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.06741998624632421,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyInterval(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)": 0.07669649888473704,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,double,double,int)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,double,int)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,int)": 0.1889822365046136,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()": 0.1889822365046136,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#getMaximalOrder()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)": 0.19611613513818404,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": 0.2182178902359924,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()": 0.22941573387056174,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#UnivariateSolverUtils()": 0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isSequence(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#midpoint(double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)": 0.06311944030978031,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)": 0.07580980435789034,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(double,double,double,double)": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(org.apache.commons.math3.exception.util.Localizable,double,double,double,double,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getFHi()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#getFLo()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#getHi()": 0,
        "org.apache.commons.math3.exception$NoBracketingException#getLo()": 0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#AbstractIntegrator()": 0,
        "org.apache.commons.math3.ode$AbstractIntegrator#AbstractIntegrator(java.lang.String)": 0.07738232325341368,
        "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)": 0.08362420100070908,
        "org.apache.commons.math3.ode$AbstractIntegrator#addEventHandler(org.apache.commons.math3.ode.events.EventHandler,double,double,int)": 0.23570226039551587,
        "org.apache.commons.math3.ode$AbstractIntegrator#addEventHandler(org.apache.commons.math3.ode.events.EventHandler,double,double,int,org.apache.commons.math3.analysis.solvers.UnivariateSolver)": 0.21320071635561041,
        "org.apache.commons.math3.ode$AbstractIntegrator#addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler)": 0.08838834764831843,
        "org.apache.commons.math3.ode$AbstractIntegrator#clearEventHandlers()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#clearStepHandlers()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])": 0.08164965809277261,
        "org.apache.commons.math3.ode$AbstractIntegrator#getCurrentSignedStepsize()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#getCurrentStepStart()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#getEvaluations()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#getEventHandlers()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#getMaxEvaluations()": 0,
        "org.apache.commons.math3.ode$AbstractIntegrator#getName()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#getStepHandlers()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#initIntegration(double,double[],double)": 0.08164965809277261,
        "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])": 0.07930515857181442,
        "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)": 0.08058229640253803,
        "org.apache.commons.math3.ode$AbstractIntegrator#setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)": 0.08164965809277261,
        "org.apache.commons.math3.ode$AbstractIntegrator#setMaxEvaluations(int)": 0.07738232325341368,
        "org.apache.commons.math3.ode$AbstractIntegrator#setStateInitialized(boolean)": 0.08164965809277261,
        "org.apache.commons.math3.ode$AbstractIntegrator$1#compare(org.apache.commons.math3.ode.events.EventState,org.apache.commons.math3.ode.events.EventState)": 0.23570226039551587,
        "org.apache.commons.math3.ode$EquationsMapper#EquationsMapper(int,int)": 0.07832604499879574,
        "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])": 0.079555728417573,
        "org.apache.commons.math3.ode$EquationsMapper#getDimension()": 0.07905694150420949,
        "org.apache.commons.math3.ode$EquationsMapper#getFirstIndex()": 0.0,
        "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])": 0.08164965809277261,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#ExpandableStatefulODE(org.apache.commons.math3.ode.FirstOrderDifferentialEquations)": 0.08058229640253803,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations)": 0.0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])": 0.08164965809277261,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getCompleteState()": 0.08164965809277261,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimary()": 0.0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryMapper()": 0.08137884587711594,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryState()": 0.0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryStateDot()": 0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getSecondaryMappers()": 0.08164965809277261,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getSecondaryState(int)": 0.0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getSecondaryStateDot(int)": 0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getTime()": 0.08058229640253803,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getTotalDimension()": 0.08164965809277261,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#setCompleteState(double[])": 0.0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#setPrimaryState(double[])": 0.08058229640253803,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#setSecondaryState(int,double[])": 0.0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#setTime(double)": 0.08058229640253803,
        "org.apache.commons.math3.ode$ExpandableStatefulODE$SecondaryComponent#ExpandableStatefulODE$SecondaryComponent(org.apache.commons.math3.ode.SecondaryEquations,int)": 0.0,
        "org.apache.commons.math3.ode.events$EventHandler$Action#<clinit>()": 0.20851441405707477,
        "org.apache.commons.math3.ode.events$EventHandler$Action#EventHandler$Action(java.lang.String,int)": 0.20851441405707477,
        "org.apache.commons.math3.ode.events$EventState#EventState(org.apache.commons.math3.ode.events.EventHandler,double,double,int,org.apache.commons.math3.analysis.solvers.UnivariateSolver)": 0.20851441405707477,
        "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)": 0.20851441405707477,
        "org.apache.commons.math3.ode.events$EventState#getConvergence()": 0,
        "org.apache.commons.math3.ode.events$EventState#getEventHandler()": 0.21320071635561041,
        "org.apache.commons.math3.ode.events$EventState#getEventTime()": 0.22941573387056174,
        "org.apache.commons.math3.ode.events$EventState#getMaxCheckInterval()": 0,
        "org.apache.commons.math3.ode.events$EventState#getMaxIterationCount()": 0,
        "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)": 0.20851441405707477,
        "org.apache.commons.math3.ode.events$EventState#reset(double,double[])": 0.25,
        "org.apache.commons.math3.ode.events$EventState#stepAccepted(double,double[])": 0.20851441405707477,
        "org.apache.commons.math3.ode.events$EventState#stop()": 0.21320071635561041,
        "org.apache.commons.math3.ode.events$EventState$1#value(double)": 0.22360679774997896,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(java.lang.String,double,double,double,double)": 0.09901475429766744,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(java.lang.String,double,double,double[],double[])": 0.0,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)": 0.09759000729485333,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getCurrentStepStart()": 0.0,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMaxStep()": 0.09853292781642932,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMinStep()": 0.09853292781642932,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])": 0.09712858623572641,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#resetInternalState()": 0.09284766908852593,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)": 0.09534625892455924,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setInitialStepSize(double)": 0.0,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double,double)": 0.09901475429766744,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double[],double[])": 0.0,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#<clinit>()": 0.17149858514250882,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#DormandPrince853Integrator(double,double,double,double)": 0.1796053020267749,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#DormandPrince853Integrator(double,double,double[],double[])": 0.0,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)": 0.18257418583505536,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#getOrder()": 0.17149858514250882,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()": 0.17149858514250882,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#DormandPrince853StepInterpolator()": 0.17149858514250882,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#DormandPrince853StepInterpolator(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator)": 0.18257418583505536,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)": 0.19245008972987526,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doCopy()": 0.18257418583505536,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()": 0.18257418583505536,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#readExternal(java.io.ObjectInput)": 0.0,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])": 0.18257418583505536,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#storeTime(double)": 0.18257418583505536,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)": 0.0,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(java.lang.String,boolean,double[],double[][],double[],org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator,double,double,double,double)": 0.13483997249264842,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(java.lang.String,boolean,double[],double[][],double[],org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator,double,double,double[],double[])": 0.0,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#getMaxGrowth()": 0.0,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#getMinReduction()": 0.0,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#getSafety()": 0.0,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)": 0.1259881576697424,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#setMaxGrowth(double)": 0.12126781251816648,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#setMinReduction(double)": 0.12126781251816648,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#setSafety(double)": 0.12126781251816648,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()": 0.09166984970282113,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator)": 0.09805806756909202,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)": 0.0,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])": 0.09667364890456635,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#shift()": 0.09667364890456635,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)": 0.0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#AbstractStepInterpolator()": 0.09090909090909091,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#AbstractStepInterpolator(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])": 0.0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#AbstractStepInterpolator(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator)": 0.09667364890456635,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)": 0.07669649888473704,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()": 0.09667364890456635,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()": 0.0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()": 0.08137884587711594,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()": 0.09578262852211514,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getCurrentTime()": 0.08606629658238704,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalCurrentTime()": 0.08362420100070908,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()": 0.08362420100070908,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()": 0.0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)": 0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)": 0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()": 0.08137884587711594,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedTime()": 0.0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getPreviousTime()": 0.0873704056661038,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#isForward()": 0.08304547985373997,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#readBaseExternal(java.io.ObjectInput)": 0.0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])": 0.09667364890456635,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)": 0.07930515857181442,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftCurrentTime(double)": 0.23570226039551587,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftPreviousTime(double)": 0.23570226039551587,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#shift()": 0.07930515857181442,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#storeTime(double)": 0.07930515857181442,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.016951587590520262,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.02196343933976307,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.03259906833194042,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.058025885318565944,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.05616559563017304,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.05012547071170855,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.03114373299321498,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.03594425773447947,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.029867384554474945,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.03331483023263848,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.03809696588797296,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.045834924851410566,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.047565149415449405,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.047565149415449405,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.038778336716474064,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.04926646390821466,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.048795003647426664,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.022893427324781505,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.05913123959890826,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.03138824102871723,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.03146583877637763,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.03013743873394561,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": 0.028606478384531155,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.03138824102871723,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.03138824102871723,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.03146583877637763,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.03146583877637763,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.03013743873394561,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.04062222318511938,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.038866103716823586,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 0.03382550457458692,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.0,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 0.03537745688386125,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": 0.0,
        "org.apache.commons.math3.util$Incrementor#resetCount()": 0.034731435582359395,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": 0.035355339059327376,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.02964345833643761,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": 0.0,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": 0.0,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 0.0,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": 0.027513674254937545,
        "org.apache.commons.math3.util$Precision#Precision()": 0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.03369085602646046,
        "org.apache.commons.math3.util$Precision#equals(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": 0.0,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": 0.0
    },
    "Math-8": {
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution(org.apache.commons.math3.random.RandomGenerator)": 0.03892494720807615,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double)": 0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": 0.0,
        "org.apache.commons.math3.distribution$DiscreteDistribution#DiscreteDistribution(java.util.List)": 1.0,
        "org.apache.commons.math3.distribution$DiscreteDistribution#DiscreteDistribution(org.apache.commons.math3.random.RandomGenerator,java.util.List)": 0.21320071635561041,
        "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()": 0.0,
        "org.apache.commons.math3.distribution$DiscreteDistribution#probability(java.lang.Object)": 0.0,
        "org.apache.commons.math3.distribution$DiscreteDistribution#reseedRandomGenerator(long)": 0,
        "org.apache.commons.math3.distribution$DiscreteDistribution#sample()": 0.5773502691896258,
        "org.apache.commons.math3.distribution$DiscreteDistribution#sample(int)": 1.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#DiscreteRealDistribution(double[],double[])": 0.2773500981126146,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#DiscreteRealDistribution(org.apache.commons.math3.random.RandomGenerator,double[],double[])": 0.2773500981126146,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#density(double)": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportLowerBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportUpperBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#probability(double)": 0.0,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#sample()": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotANumberException#NotANumberException()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": 0.0,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": 0.0,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)": 0.03774256780481986,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])": 0.0303868562731382,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int)": 0.0,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int[])": 0.0303868562731382,
        "org.apache.commons.math3.random$AbstractWell#setSeed(long)": 0.03125,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": 0.02912346855536793,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": 0.02912346855536793,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.04397994971335425,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": 0.0,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()": 0.031098520678556146,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#initRan()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 0.031098520678556146,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#getDelegate()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0,
        "org.apache.commons.math3.random$Well19937c#Well19937c()": 0.03774256780481986,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int)": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int[])": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c(long)": 0.0,
        "org.apache.commons.math3.random$Well19937c#next(int)": 0.079555728417573,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.20412414523193154,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.04389512813061471,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.util$Pair#getFirst()": 0.0,
        "org.apache.commons.math3.util$Pair#getKey()": 0.05212860351426869,
        "org.apache.commons.math3.util$Pair#getSecond()": 0.0,
        "org.apache.commons.math3.util$Pair#getValue()": 0.0604122093330177,
        "org.apache.commons.math3.util$Pair#hashCode()": 0.0
    },
    "Math-9": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": 0.0,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": 0.0,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": 0.0,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.19245008972987526,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()": 0.31622776601683794,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getOrigin()": 0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.19245008972987526,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()": 1.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()": 0.07856742013183861,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)": 0.07856742013183861,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.1643989873053573,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.17677669529663687,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0.14433756729740646,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()": 0.1889822365046136,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()": 0.5,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)": 0.14744195615489714,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toArray()": 0.7071067811865475,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString(java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": 0.01703006758225429,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.0,
        "org.apache.commons.math3.util$FastMath#abs(long)": 0.0,
        "org.apache.commons.math3.util$FastMath#acos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#acosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#asinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#atanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#floor(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#log10(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#max(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(float,float)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(int,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#min(long,long)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#random()": 0.0,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": 0.0,
        "org.apache.commons.math3.util$FastMath#rint(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#round(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#signum(float)": 0.0,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sinh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": 0.02308785482698051,
        "org.apache.commons.math3.util$FastMath#tan(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": 0.0,
        "org.apache.commons.math3.util$FastMath#tanh(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 0.0,
        "org.apache.commons.math3.util$FastMath#ulp(float)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.0,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.11704114719613057,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.11547005383792514,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 0.0,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": 0.0,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 0.0,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.0
    },
    "Time-1": {},
    "Time-10": {},
    "Time-11": {},
    "Time-12": {},
    "Time-13": {},
    "Time-14": {},
    "Time-15": {},
    "Time-17": {},
    "Time-18": {},
    "Time-19": {},
    "Time-2": {},
    "Time-20": {},
    "Time-3": {},
    "Time-4": {},
    "Time-6": {},
    "Time-7": {},
    "Time-8": {},
    "Time-9": {}
}